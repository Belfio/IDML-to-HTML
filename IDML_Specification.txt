 2012 Adobe Systems Incorporated. All rights reserved.
If this guide is distributed with software that includes an end user agreement, this guide, as well as the software
described in it, is furnished under license and may be used or copied only in accordance with the terms of such
license. Except as permitted by any such license, no part of this guide may be reproduced, stored in a retrieval
system, or transmitted, in any form or by any means, electronic, mechanical, recording, or otherwise, without the
prior written permission of Adobe Systems Incorporated. Please note that the content in this guide is protected
under copyright law even if it is not distributed with software that includes an end user license agreement.
The content of this guide is furnished for informational use only, is subject to change without notice, and should
not be construed as a commitment by Adobe Systems Incorporated. Adobe Systems Incorporated assumes no
responsibility or liability for any errors or inaccuracies that may appear in the informational content contained in
this guide.
Please remember that existing artwork or images that you may want to include in your project may be protected
under copyright law. The unauthorized incorporation of such material into your new work could be a violation of
the rights of the copyright owner. Please be sure to obtain any permission required from the copyright owner.
Any references to company names and company logos in sample material are for demonstration purposes only
and are not intended to refer to any actual organization.
Adobe, the Adobe logo, Acrobat, Post Script and Reader are either registered trademarks or trademarks of Adobe
Systems Incorporated in the United States and/or other countries.
Java and Java Script are trademarks or registered trademarks of Sun Microsystems, Inc. in the United States and
other countries.
Windows and Open Type are either registered trademarks or trademarks of Microsoft Corporation in the United
States and/or other countries.
SVG is a trademark of the World Wide Web Consortium; marks of the W3C are registered and held by its host
institutions MIT, INRIA and Keto.
All other trademarks are the property of their respective owners.
Adobe Systems Incorporated, 345 Park Avenue, San Jose, California 95110, USA.
Notice to U.S. Government End Users. The Software and Documentation are “Commercial Items,” as that term is
defined at 48 C.F.R. §2.101, consisting of “Commercial Computer Software” and “Commercial Computer Software
Documentation,” as such terms are used in 48 C.F.R. §12.212 or 48 C.F.R. §227.7202, as applicable. Consistent with
48 C.F.R. §12.212 or 48 C.F.R. §§227.7202-1 through 227.7202-4, as applicable, the Commercial Computer Software
and Commercial Computer Software Documentation are being licensed to U.S. Government end users (a) only as
Commercial Items and (b) with only those rights as are granted to all other end users pursuant to the terms and
conditions herein. Unpublished-rights reserved under the copyright laws of the United States. Adobe Systems
Incorporated, 345 Park Avenue, San Jose, CA 95110-2704, USA. For U.S. Government End Users, Adobe agrees to
comply with all applicable equal opportunity laws including, if appropriate, the provisions of Executive Order
11246, as amended, Section 402 of the Vietnam Era Veterans Readjustment Assistance Act of 1974 (38 USC 4212),
and Section 503 of the Rehabilitation Act of 1973, as amended, and the regulations at 41 CFR Parts 60-1 through
60-60, 60-250, and 60-741. The affirmative action clause and regulations contained in the preceding sentence
shall be incorporated by reference.
Portions Copyright © 2006 by International Digital Publishing Forum™.
IDML File Format Specification
3
Contents
Abstract . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
Terminology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
INX, IDML, and In Design Scripting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
Script (Java Script): . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
IDML: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
Dynamic Object Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
IDML and Third Party Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
Uses for IDML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
IDML Design Goals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
IDML Design Approaches . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
Separate Content for Efficient Processing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
Maximize Compatibility with In Design . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
Maximize Independence of XML Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
Use Attributes Rather Than Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
Self-Documenting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
Not a Literal Representation of In Design Data Structures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
Performance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
Support for Previous Versions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
IDML Document Structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
IDML Package File Organization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
MIMETYPE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
designmap.xml. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
Master Spreads Folder and Master Spreads.xml . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
Resources Folder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
Graphic.xml . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
Fonts.xml . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
Styles.xml . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
Preferences.xml . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
Spreads Folder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
Stories Folder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
XML Folder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
Backing Story.xml . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
Tags.xml . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
Mapping.xml . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
META-INF Folder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
IDML Component Names . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
Default Name . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
User Defined Names . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
Reset Component Name on Import . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
Scripting Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
C++ API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
IDML Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
XML Conventions and Style . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
Names in IDML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
Use of Empty Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
Generating IDML Schema . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
IDML File Format Specification
4
Data Types in IDML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
Scalar Data Types vs. Complex Data Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
Enumerations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
Key String . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
Measurement Units . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
Representation of Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
Representation of Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
Properties Represented as Attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
Properties Represented as Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30
Record Type . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31
Geometry . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31
Variable Type. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31
Complex Structures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32
Use of the Type Attribute in Property Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32
Object Reference Format . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32
Cross-file Reference Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
File Paths in IDML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38
IDML File Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
Common Attributes and Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
Self . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
Scripting Labels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
Optional Values, Defaults, and Preferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
designmap.xml . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44
Documents and Color Management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
Language . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
KinsokuTable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
MojikumiTable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
NumberingList . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
NamedGrid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54
Grid Data Information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54
Motion Preset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
Condition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
ConditionSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
LinkedStoryOption . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
TaggedPDFPreference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
MetadataPacketPreference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58
WatermarkPreference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59
Conditional Text Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
Text Variable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
Layer. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68
Section . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69
DocumentUser . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71
Cross Reference Format . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71
Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
Topic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
CrossReference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
Hyperlinks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
Hyperlink Page Destination . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75
Hyperlink URLDestination . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76
Hyperlink External Page Destination . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
Hyperlink Page Item Source . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78
Bookmark . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
PreflightProfile . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
IDML File Format Specification
5
PreflightRuleInstance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
DataMergeImagePlaceholder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82
HyphenationException . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82
IndexingSortOption . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83
ABullet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83
Assignment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84
AssignedStory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
Article . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85
ArticleMember . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86
Spreads and Master Spreads . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87
Minimal Spread Example. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90
Page Items . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90
Spline Items . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90
Media Items . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
Graphics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
Live Corner Options and Previous Versions of InDesign . . . . . . . . . . . . . . . . . . . . 99
Nested Objects and IDML Structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
Geometry in IDML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
Coordinates, Transformation Matrices, and the IDML Element Hierarchy . . . 100
Pasteboard Coordinates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
Transformations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
Spread Coordinates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
Page Item Geometry . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
Geometry Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106
Rich Interactive Document Features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
Animation Settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
Animation Timing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
Page Item Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
Nested Page Item . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116
Rotated Page Item . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
Transformations and Nested Page Items . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118
Spline Item Containing an Imported Graphic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120
Movies and Sounds . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125
Text Frames . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
Text Frame Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132
Baseline Frame Grid Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136
Transparency . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137
Group . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138
Buttons . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141
Behaviors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146
Multi-State Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149
Associating Page Items with XML Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 155
Pages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156
Columns and Margins . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160
Guides . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160
Transparency Flattener Settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162
Stories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163
Story vs. XMLStory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163
Story vs. Assigned Story . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164
Referring to a Story . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164
Adding a Story . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164
Local Formatting vs. Styles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164
Common Text Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166
Attributes and Elements Related to Japanese Features . . . . . . . . . . . . . . . . . . . . 185
IDML File Format Specification
6
Story Schema . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186
Text Child Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 196
Text Range Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 196
Paragraph Style Range Attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
Paragraph Style Range Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
Character Style Range . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
Character Style Range Attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214
Character Style Range Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214
XML Elements in Text . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
Rules for Breaking Text Range Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 220
Inline Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 220
Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221
Cell . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233
Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246
Anchored Frames . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 248
Anchored Graphics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 251
Hyperlink Text Sources . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253
HyperlinkTextDestination . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 254
Cross Reference Sources . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 255
Fonts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258
Font and Font Family . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258
Referring to a Font . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259
Composite Font . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260
Graphics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262
Colors and Swatches . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262
Swatch . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 263
Color . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 264
Gradient . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
Gradient Stop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268
Tint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268
Mixed Ink. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 270
Mixed Ink Group . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 272
Ink . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 273
Stroke Styles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275
Preferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280
Data Merge . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281
Data Merge Option . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282
Layout Adjustment Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282
EPubExportPreference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283
HTMLExportPreference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 287
XMLImport Peference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 290
XMLExport Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 291
XMLPreference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293
Export For Web Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 294
Transparency Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295
Transparency Default Container Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 296
Story Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 296
Text Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298
Text Default . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 300
Dictionary Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 308
Anchored Object Default . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 308
Anchored Object Setting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309
Baseline Frame Grid Option . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 310
IDML File Format Specification
7
Footnote Option . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311
Text Wrap Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 317
Document Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 318
Grid Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 321
Guide Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322
Margin Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323
Pasteboard Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324
View Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 324
Print Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 326
Print Booklet Option. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 334
Print Booklet Print Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 335
Index Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 337
Index Header Setting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 338
Page Item Default . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 338
Frame Fitting Option . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 339
Button Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .340
Tin Document DData Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .340
Layout Grid Data Information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .340
Story Grid Data Information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341
Cjk Grid Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341
Mojikumi Ui Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 342
Chapter Number Preference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343
Styles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .344
Style Paths and the Self Attribute . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .344
Paragraph Styles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .344
Nested Styles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 355
Character Styles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 357
StyleExportTagMap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 363
Table Styles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 363
Cell Styles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 374
Object Styles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 376
TOCStyles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 380
Trap Presets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 384
XML Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 387
BackingStory.xml . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 387
XMLStory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 387
XMLElement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 388
Mapping . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 390
XMLTags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 392
Appendix A. UCF Container Format . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 394
Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 394
Purpose and Scope . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 394
Definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 394
ASCII . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 394
IDML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395
IRI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395
UCF . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395
UCF Container . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395
UCF User Agent . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395
ODF . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395
OEBPS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395
MIME . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395
RFC . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 395
IDML File Format Specification
8
Relax NG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 396
Rootfile . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 396
XML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 396
Zip . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 396
Relationship of UCF to Other Specifications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 396
Conformance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 397
Conforming Containers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 397
Conforming User Agents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 397
Future Directions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 397
UCF Overview. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 398
UCF: A General Container Technology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 398
“Abstract Container” vs. “Physical Container” . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 398
UCF Container Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 398
File and directory structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 398
Relative IRIs for referring to other components . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 399
File Names . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .400
Container media type identification . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 401
META-INF . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 401
Container – META-INF/container.xml (Optional) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 401
Rootfiles (Optional) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 402
Relationships (Optional) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 402
Manifest – META-INF/manifest.xml (Optional) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 403
Metadata – META-INF/metadata.xml (Optional) . . . . . . . . . . . . . . . . . . . . . . . . . . . 403
Digital Signatures – META-INF/signatures.xml (Optional) . . . . . . . . . . . . . . . . . . 403
Encryption – META-INF/encryption.xml (Optional) . . . . . . . . . . . . . . . . . . . . . . . .404
Rights Management – META-INF/rights.xml (Optional) . . . . . . . . . . . . . . . . . . . .404
Zip Container . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .404
RELAX NG UCF Schema . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 405
Comparison of UCF and OCF . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 411
Digital Signatures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 411
Encryption . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 413
Appendix B. IDML Variants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416
InDesign Snippets (.idms files) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416
ICML . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 425
InCopy Assignments (ICMA) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 427
Appendix C. IDML Defaults . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 428
<Document> Attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 428
Languages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 428
Colors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 428
Inks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 429
Swatches . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 429
Gradients . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 429
Stroke Styles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 429
Font Families . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 429
Composite Font . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 430
Character Styles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 430
[No character style] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 430
Paragraph Styles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 430
[No paragraph style] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 430
NormalParagraphStyle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 437
TOC Styles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 437
Cell Styles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 438
Table Styles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 438
IDML File Format Specification
9
[No table style] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 438
[Basic Table] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 441
Named Grids . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 441
Object Styles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 442
[None] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 443
[Normal Graphics Frame] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .446
[Normal Text Frame] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 450
Trap Presets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .460
[No Trap Preset] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .460
$ID/kDefaultTrapStyleName . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 461
Transparency Preferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 461
Transparency Default Container Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 462
TransparencySetting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 462
StrokeTransparencySetting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .464
FillTransparencySetting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 467
ContentTransparencySetting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 470
Story Preferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 473
Text Frame Preferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 474
Text Preferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 474
Text Defaults . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 475
Anchored Object Defaults . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 482
Anchored Object Settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 482
Baseline Frame Grid Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 483
Footnote Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 483
Text Wrap Preferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 485
Document Preferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 485
Margin Preferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .486
Page Item Defaults . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 487
Frame Fitting Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 487
Button Preferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .488
Conditional Text Preferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .488
XML Tag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .488
Layer. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 489
Master Spread . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 489
Page . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 491
Spread . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 492
Section . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 494
XmlStory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 494
IndexingSortOptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 495
$ID/kIndexGroup_Symbol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 496
$ID/kIndexGroup_Alphabet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 496
$ID/kIndexGroup_Numeric . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 496
$ID/kWRIndexGroup_GreekAlphabet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 496
$ID/kWRIndexGroup_CyrillicAlphabet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 497
$ID/kIndexGroup_Kana . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 497
$ID/kIndexGroup_Chinese . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 497
$ID/kIndexGroup_Korean . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 497
Bullets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 498
dABullet0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 498
dABullet1. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 498
dABullet2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 498
dABullet3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 499
dABullet4 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 499
Assignment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 499
IDML File Format Specification
10
Defaults Example Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 500
BlankFile.idml . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 500
PageItems.idml . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 500
Text.idml . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 500
RID.idml . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 500
Misc.idml . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 500
Appendix D. Datatype.rnc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 501
Appendix E. Update List of IDML 8.0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 513
New Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 513
LinkedPageItemOption . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 513
HtmlItem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 513
ParaStyleMapping . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 513
CharStyleMapping . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 513
TableStyleMapping . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 513
CellStyleMapping . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 514
CheckBox . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 514
ComboBox . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 514
ListBox . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 514
RadioButton . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 514
TextBox . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 514
SignatureField . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 514
Pumpkin . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 514
ObjectExportOption . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 515
SubmitFormBehavior . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 515
ClearFormBehavior . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 515
PrintFormBehavior . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 515
New Attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 515
ApplyStyleMappings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 515
AlternateLayoutLength . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 515
AlternateLayout . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 515
Pagination . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 515
PaginationMaster . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 516
ExternalStyleSheets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 516
Javascripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 516
UseFlexibleColumnWidth . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 516
TextColumnMaxWidth. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 516
AutoSizeType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 516
AutoSizingReferencePoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 516
UseMinimumHeightForAutoSizing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 517
MinimumHeightForAutoSizing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 517
UseMinimumWidthForAutoSizing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 517
MinimumWidthForAutoSizing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 517
UseNoLineBreaksForAutoSizing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 517
QuoteCharactersRotatedInVertical . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 517
ParagraphKashidaWidth . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 517
CreatePrimaryTextFrame . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 518
EnableTextFrameAutoSizingOptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 518
GuideType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 518
GuideZone . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 518
LinkResourceId . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 518
ParentInterfaceChangeCount . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 518
TargetInterfaceChangeCount . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 518
LastUpdatedInterfaceChangeCount . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 519
IDML File Format Specification
11
HorizontalLayoutConstraints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 519
VerticalLayoutConstraints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 519
CustomLayout . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 519
CustomLayoutType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 520
PrintableInPDF . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 520
HiddenUntilTriggered . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 520
AppliedAlternateLayout . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 520
LayoutRule . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 520
SnapshotBlendingMode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 520
OptionalPage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 520
IDML File Format Specification
12 Abstract
1 Abstract
IDML is an XML representation of an In Design document or components. This document
describes the structure of IDML "les, the XML schema for IDML validation, and provides
examples of IDML "le content. This document has been updated for IDML version 8.0, which
corresponds to InDesign CS6. For the list of content updates in this version, refer to “Appendix E.
Update List of IDML 8.0” .
2 Introduction
IDML is an XML-based format that is capable of fully describing an In Design document, and is
the interchange format for Adobe In Design CS4 documents. By using an XML representation of
text and graphic frames, stories, and other aspects of an In Design layout, IDML gives you a way
to create and modify In Design documents using tools outside the In Design application.
Like its precursor INX, IDML is a Document Object Model (DOM) representation of In Design
documents, and is based on the In Design scripting object model. INX stands for “In Design
Interchange” and was introduced in In Design CS2 to support the ability to save documents for
use in a previous version. INX will continue to be used for backward compatibility for In Design
versions prior to In Design CS4; IDML will be used for backward compatibility between In Design
CS4 and future versions.
It was quite difficult to write or edit the INX format, as it was designed to be written and
consumed by In Design alone. IDML addresses requests by third party developers and system
integrators to make INX more readable and to make it easier to change and assemble In Design
documents using XML tools. By using IDML, you can realize gains in performance, convenience,
and $exibility.
IDML is also like INX in that In Design uses the format for a variety of other purposes, such as
library items, In Design snippets (standalone document fragments saved using IDML markup),
and In Copy assignments and stories.
It is important to note that while IDML is an XML format, you do not necessarily need to make
use of In Design’s XML features in an IDML document. In fact, we expect that some users
will prefer to keep all XML processing outside of In Design for a variety of reasons, including
performance and the limitations of the implementation of XML in In Design.
3 Terminology
When you open an IDML document in In Design, the XML elements in the document are
converted to objects—both objects in the resulting In Design document and objects in the In-
Design scripting object model. Because of this, we need to be very careful when using certain
IDML File Format Specification
13 INX, IDML, and In Design Scripting
terms in this speci"cation. When we say “object,” for example, are we referring to the XML
element or the In Design object that the XML element corresponds to a%er the IDML "le has been
opened? The same question applies to the XML attributes and elements that specify properties of
In Design objects.
In this speci"cation, we’ll use the phrase XML element when we’re speci"cally referring to an
element in an IDML "le, and we’ll use XML attribute to refer to an attribute of an XML element.
When we use the terms object and property, we’re referring to an entity in an In Design document
(and in the In Design scripting document object model).
4 INX, IDML, and In Design Scripting
INX, the precursor to IDML, was introduced to give In Design the ability to save a document for
use in a previous version. Rather than write a complicated and error-prone binary "le conversion
plug-in, we decided to use In Design’s scripting features. When In Design exports to INX or
IDML, we serialize objects and properties from the scripting DOM of an In Design document to
an XML "le. When we open an INX or IDML document, In Design constructs layout objects, sets
preferences, enters text, and applies formatting to produce an In Design document.
IDML will continue to be built on and re$ect the scripting DOM view of the In Design object
model. The scripting system provides several vital bene"ts:
• A high-level isolation from the details and changes in the low-level In Design object model.
• Well-documented and easily understood architecture for extending the object model and
the "le format to add third-party data. There is also an existing policy and procedure for
developers to register their objects and attributes to ensure that the object names they add are
unique within the scripting DOM.
• Signi"cant level of object and property parameter validation and error checking.
• High level versioning support and a well-de"ned mechanism for adding, deleting, or
modifying items.
IDML di&ers from the scripting DOM in the following ways:
• Scripting events (methods) are not included in IDML document.
• IDML requires that some elements and attributes appear in certain order, while scripting
DOM can be viewed as random access.
• Some objects and properties that are included in IDML may not be available in scripting object
models for Apple Script, Java Script, VBScript, and vice versa.
• In some cases, property values that are the same as default values are not written out to IDML.
The following example shows the close connection between scripting and IDML:
IDML File Format Specification
14 INX, IDML, and In Design Scripting: Dynamic Object Model
Script (Java Script):
//Where my Rectangle is a reference to a rectangle:
my Rectangle.stroke Weight = .5;
my Rectangle.corner Option = Corner Options.bevel Corner;
IDML:
<Rectangle Stroke Weight=".5" Corner Option="Bevel Corner" .../>
Given the close connection of IDML to In Design scripting, the In Design scripting documentation
and example scripts provide a great way to learn about the format. The scripting object model
is also exposed to scripting clients, and can be viewed from script editors (such as the Adobe
Extend Script Toolkit) for any of the supported scripting languages.
4.1 Dynamic Object Model
It is important to note that In Design’s scripting object model is dynamic, and changes based on
the active set of plug-ins. If you add plug-ins that support In Design scripting, objects, properties,
enumerations, and methods can appear in the scripting object model, and new objects and
properties may appear in the exported IDML. In addition, removing or disabling plug-ins can
change the scripting object model and, therefore, the XML elements written to an IDML "le.
4.2 IDML and Third Party Data
IDML supports the inclusion of new scripting objects and properties added by In Design plug-ins.
Because IDML is built on the In Design scripting object model, any features added by plug-ins
that support In Design scripting can be included in the IDML package.
That said, IDML does not guarantee round-trip of data added to an In Design document by third
party plug-ins. If the third party plug-in does not implement scripting at all, or if the scripting
support for the plug-in is not complete, the data will not be included when you export as IDML.
If the IDML "le calls for a plug-in that is not currently installed, In Design will ignore the plug-
in data (i.e., omit it from the InDesign "le created by opening the IDML document) and will not
include it in a subsequent IDML export of the "le. Note that this di&ers from InDesign’s behavior
when opening InDesign binary "les, where third-party data is maintained when the plug-ins are
missing (refer to the In Design documentation for a more complete description of this behavior).
Since IDML is an XML format, you can add your own XML elements the XML "les in the IDML
package. Note, however, that In Design will ignore XML elements that do not exist in the IDML
schema when opening the IDML "le, and that the data will not be preserved in the converted In-
Design binary document (and will therefore not be included in future IDML export from that
document).
IDML File Format Specification
15 Uses for IDML: IDML and Third Party Data
5 Uses for IDML
IDML provides a way for In Design layouts to interoperate with XML based formats and
technologies. Documents can be created and manipulated in IDML format and can then be
opened and interpreted using In Design.
We’ve designed IDML to make it a key part of automated work$ows. Using IDML, you can:
• Generate or modify IDML documents or document elements using data from databases or
other data sources (programmatic assembly).
• Reuse parts of IDML documents, or break a document into components that can be used in a
development environment (programmatic disassembly).
• Transform document elements using XSLT.
• Find data in In Design documents using XPath or XQuery.
• Use source control to manage creative content, or to compare two versions of a design.
IDML is intended for consumption by In Design-family applications, including In Design, In Copy,
and In Design Server. IDML is not intended as an interchange format for use with applications
outside the In Design family of products, and does not attempt to write or structure In Design
content in a manner that is compatible with other XML layout formats (such as Mars, XSL-FO,
or SVG). It is, however, possible to transform IDML content into these formats by applying XSLT
transformations to the IDML structures. Writing such a transformation is a very large task, and is
beyond the scope of this speci"cation.
6 IDML Design Goals
The primary design goals of IDML are as follows:
• Completeness: Any object, property, or preference that can appear in an In Design document
can be represented in IDML. Complete “round trip” compatibility is expected of IDML "les.
• Readability: The IDML format is human-readable, and should be easily understood by a user
with basic knowledge of the page layout. Representations of In Design elements—spreads, text
frames, stories, and colors, for example—are found inside the XML structure in the same
location as they appear in a document. A text frame inside a group, for example, appears inside
the group element, which, in turn is inside a spread element.
• For ease of programmatic assembly and disassembly, IDML is designed to be read and written
by virtually any program or tool capable of reading and writing XML. Relative to INX, IDML
"les are easier to process using external tools, while maintaining the same full coverage of the
In Design object model.
• Robustness: The In Design mechanisms for reading and interpreting IDML will be robust
in the face of mistakes and eliminate fatal consequences. A Relax NG schema de"nition for
IDML File Format Specification
16 IDML Design Approaches: Separate Content for Efficient Processing
IDML will be provided for validation to help customers and work$ow developers discover
potential errors in their programmatically assembled or edited "les. Since even validated "les
can contain unknown objects, errors will be reported during the interpretation process to
assist in debugging.
• Backward compatibility: A user will be able to take an IDML "le generated for version X and
open it in version X-1 (provided X-1 supports IDML). In Design CS4 is the "rst version to
provide IDML support. In Design CS4 will support the INX format for compatibility with In-
Design CS3.
• Performance: IDML aims to maintain or exceed the performance of INX in In Design CS4.
• Improvements over INX: IDML o&ers the following advantages over INX (this is not an
exhaustive list):
• Provides a published format speci"cation.
• Avoids obscure element and attribute ordering, relationships, and processing constraints
contained in the In Design export/import code.
• Provides an XML schema (Relax NG) for validation.
• Eliminates the use of processing instructions in text content for text object placement
7 IDML Design Approaches
To recognize our design goals for IDML, we have adopted a series of design philosophies, which
we’ll discuss in the following sections.
7.1 Separate Content for Efficient Processing
In Design is o%en part of work$ows where documents are broken into pieces so that they might
be worked on in parallel. In a magazine production process, for example, sections, articles, or
individual spreads might be given to di&erent graphic artists or layout sta&; stories can be given
to di&erent writers and editors. The same thing can be true for the process of assembling an
IDML document. Stories might be populated with text from RSS feeds; informational graphics on
a given spread might be generated from spreadsheet data.
In addition, In Design documents contain a large number of entities that might be standardized
across an organization or publication. Document preferences, styles, fonts, and colors, for
example, might be common to all production processes for a particular job. These preferences can
be stored in separate XML "les and added to an IDML package.
All of the parts of an IDML "le are put together in a Zip-compressed archive to represent one In-
Design document. Inside this container, a speci"c “master” "le de"nes the relationships between
the component "les included in the container.
IDML File Format Specification
17 IDML Design Approaches: Maximize Compatibility with In Design
7.2 Maximize Compatibility with In Design
IDML re$ects the scripting DOM view of an In Design document. It was designed to maximize
compatibility and consistency with the In Design binary "le and represent In Design document as
accurately as possible.
IDML "les do not retain any view or history data of the document; the intent is to represent the
appearance and content of the document in XML.
Being able to convert back and forth between the In Design binary "le format and IDML
is a requirement. In most cases, we must convert between IDML and In Design binary
representations, and each representation should be able to carry extensions added to the other.
There are many work$ows involving conversions between IDML format and In Design binary
format. We also want to encourage a variety of uses that we may not have envisioned. Some
general classes of work$ows include following:
• IDML documents can be constructed from information in a database or from a wire feed using
XML tools, and then opened in In Design for further processing.
• An In Design document can be exported to IDML for use as a template outside of In Design.
The IDML template can be modi"ed using XML tools, then converted back to In Design.
• An In Design document can be exported to an IDML format "le, which can be opened and
saved in previous version of In Design.
When converting between formats, it is not necessary to maintain binary equivalence. We only
need to guarantee a high percentage of visual "delity.
7.3 Maximize Independence of XML Elements
In Design objects represented as XML elements in IDML are intended to be independent
whenever possible. For example, to add, change, or delete a rectangle, you should be able
to manipulate the rectangle element in a speci"c spread "le. Other object types are more
complicated, however. A text frame element, for example, must include a reference to the story
containing the text shown in the text frame. The story itself, including all text formatting
attributes, is in a separate "le inside the IDML package.
7.4 Use Attributes Rather Than Elements
Wherever possible, IDML uses XML attributes, rather than XML elements, for storing most
object properties. XML attributes are more compact, and o&er performance advantages over XML
elements (XML attributes are parsed along with the opening of the element which contains them,
rather than as child XML elements).
IDML File Format Specification
18 IDML Design Approaches: Self-Documenting
7.5 Self-Documenting
The structure of IDML should be as self-documenting as possible. While the parent-child
relationships of the elements do not need to re$ect the object relationship in the In Design binary
object model, they generally re$ect the In Design scripting model.
Object and properties from the scripting model are represented in IDML as XML elements and
attributes. The tag names of the elements and attributes are the “long name” identi"ers for the
objects and properties de"ned in the scripting DOM.
7.6 Not a Literal Representation
of In Design Data Structures
IDML is not intended to represent the internal data structure of In Design, nor is it intended as
a replacement for the In Design SDK. The In Design API and binary "le format will continue to
evolve, and plug-in developers will continue to use the existing interfaces. By using the scripting
DOM, IDML is insulated from changes to the In Design API and low level changes to the "le
system.
7.7 Performance
IDML is designed with performance in mind. There are several design decisions that should result
in performance improvement of IDML export and import:
• Object information is organized to optimize for import/export.
• At the C++ coding level, IDML core processing code and speci"c script providers have been
tuned for better performance.
• IDML documents have been split into functional components, which will give us the ability to
take advantage of multi-tasking during export in a future version.
7.8 Support for Previous Versions
It must be possible to open an IDML in the previous version of In Design (for example opening
an IDML "le from In Design CS5 in In Design CS4). Since IDML is being introduced in In Design
CS4, it is not possible for IDML "les from In Design CS4 to be opened in In Design CS3 or earlier.
Instead, In Design CS4 will be able to export to INX, which will be able to be opened in earlier
versions of In Design.
When a user opens an IDML "le from an incompatible (due to plug-in con"guration) version of
In Design/In Copy, the application will display an error message. The user can choose to attempt
to open the IDML "le.
IDML File Format Specification
19 IDML Document Structure: IDML Package File Organization
8 IDML Document Structure
When you export a document as IDML, In Design creates a Zip archive containing multiple XML
"les. These "les use IDML markup to represent the signi"cant parts of the In Design document.
We split the content of the In Design document into separate "les so that you can work
on speci"c parts of the document—the stories containing the text in the document, for
example—without disturbing other document content, such as colors or imported graphics.
This compartmentalization makes it easier for automated processes to work on the parts of a
document in parallel. It also makes it easier for you to store and re-use fragments of In Design
documents.
In addition, this approach means that a future version of In Design will be able to take advantage
of multithreading when exporting or importing IDML, which will result in better performance.
8.1 IDML Package File Organization
An IDML document exported from In Design is a Zip archive. For more speci"c details of the "le
format, refer to Appendix A, “Universal Container Format.” This is not the only form IDML can
take, however: a single-"le version of IDML is also used for In Design Snippet (.idms) and In Copy
stories (.icml). In some situations, it might be more practical to work with a single XML "le in the
IDML format, rather than using the UCF package.
The XML documents saved in an IDML package are arranged to make it easier to "nd speci"c
content. Files representing spreads, stories, and XML structure, and preferences, for example, are
grouped inside folders inside the archive. The following block diagram shows the arrangement of
XML "les within the IDML archive.
IDML File Format Specification
20 IDML Document Structure: IDML Package File Organization
Figure 1. IDML Package Contents
IDML
Resources
MIMETYPE
Fonts.xml
Styles.xml Graphic.xml Preferences.xml
designmap.xml
Spreads
Spread_nnn.xml
Spread_nnn.xml
Spread_nnn.xml
...
MasterSpreads
Stories
Master Spreads.xml
Story_nnn.xml
Story_nnn.xml
...
META-INF
XML
container.xml
Backing Story.xml
Mapping.xml
Tags.xml
8.1.1 MIMETYPE
MIME stands for Multipurpose Internet Mail Extensions, and provides a standard methodology
for specifying the content type of "les within an IDML package. For more on MIME media types
in general, see <hyperlink>http://www.ietf.org/rfc/rfc2045.txt</hyperlink>. For more information
on the content of the MIMETYPE "le in an IDML package, refer to <hyperlink>“Appendix A:
Universal Container Format.”</hyperlink>
IDML File Format Specification
21 IDML Document Structure: IDML Package File Organization
8.1.2 designmap.xml
The designmap.xml "le is the key to all of the other "les that appear within the IDML package.
This "le speci"es the order in which the spreads appear in the document, maintains the cross
references between the resources and content of the "le, and de"nes a variety of document-level
attributes not supported by other "les. For more on the contents of the designmap.xml "le , see
“Designmap.xml.”
8.1.3 Master Spreads Folder and Master Spreads.xml
The "le Master Spreads.xml contains the master spreads of the document, stored as <Master-
Spread> elements. Each <Master Spread> element within this "le contains all of the page items
(rectangles, ellipses, graphic lines, polygons, groups, buttons, and text frames) that appear on the
pages of the master spread. For more on the contents of the Master Spreads.xml "le , see “Spreads
and Master Spreads”.
For information on the naming of MasterSpread "les, see “IDML Component Names.”
8.1.4 Resources Folder
The Resources folder in an IDML package contains elements that are commonly used by other
"les within the document, such as colors, fonts, and paragraph styles. In addition, most of the
preferences for the document are stored in this folder. The Resources folder contains the following
"les:
Graphic.xml
The Graphic.xml "le contains the inks, colors, swatches, gradients, mixed inks, mixed ink
groups, tints, and stroke styles contained in the document. For more on the contents of the
Graphic.xml "le , see “Graphics.”
Fonts.xml
The Fonts.xml "le contains the fonts used in the document (including composite fonts, if any).
For more on the contents of the Fonts.xml "le , see “Fonts.”
Styles.xml
The Styles.xml "le contains all of the paragraph, character, object, cell, table, and table of
contents (TOC) styles used in the document. For more on the contents of the Styles.xml "le , see
“Styles.”
Preferences.xml
The Preferences.xml "le contains representations of all of the document preferences. For more
on the contents of the Preferences.xml "le , see “Preferences.”
IDML File Format Specification
22 IDML Document Structure: IDML Package File Organization
8.1.5 Spreads Folder
The Spreads folder contains the XML "les representing the spreads in the document. Each spread
contains all of the page items (rectangles, ellipses, graphic lines, polygons, groups, buttons, and
text frames) that appear on the pages of the spread. The <Spread> element also contains <Page>
elements, which contain attributes and elements that relate to the pages of the spread. Note that
<Page> elements do not contain page items.
Spreads do not contain text stream content—the <Text Frame> XML elements in the spread refer
to <Story> elements contained the "les in the Stories folder.
For information on the naming of Spread "les, see “IDML Component Names.”
8.1.6 Stories Folder
The Stories folder contains all of the stories in the In Design document. Each XML "le in the
Stories folder of an IDML archive exported from InDesign represents the contents of a single
story (as a <Story> element)and all of the formatting attributes applied to the text in the story.
Stories can also contain other objects, such as inline or anchored frames within the text, or XML
elements that have been associated with the text.
Paragraph, character, and object styles used to format the text of the story are not de"ned within
a <Story> element. Instead, the story contains cross references (using the unique Self attribute)
to the corresponding styles in the Styles.xml "le stored in the Resources folder of the archive.
For information on the naming of Story "les, see “IDML Component Names.”
8.1.7 XML Folder
The XML folder contains XML elements and settings used in the In Design document.
The XML elements referred to here are the XML elements that actually appear in the In Design
document (i.e., what you see in the Structure view in the InDesign user interface); not the
contents of the XML "les in the IDML archive. Though an IDML "le is made up of XML, the
In Design document it describes does not necessarily contain XML elements.
Backing Story.xml
The Backing Story.xml "le contains the unplaced XML content of the In Design document (i.e.,
XML content that has not yet been associated with an element in the layout).
Tags.xml
The Tags.xml "le contains the XML tag de"nitions stored in the In Design document, including
unused tags.
IDML File Format Specification
23 IDML Document Structure: IDML Component Names
Mapping.xml
The Mapping.xml "le contains the style to tag and tag to style mappings de"ned in the In Design
document.
8.1.8 META-INF Folder
The container.xml "le is a standard part of a UCF package and describes the "le encoding used
by the "les in the package. container.xml also includes a reference to the root document of the
IDML package (usually designmap.xml).
8.2 IDML Component Names
An IDML component name can only be de"ned for a spread, story, or master spread. In an IDML
package, each instance of these elements appears as a separate "le. The component name is used
as the "le name for an object instance and it’s also used to refer to the "le in designmap.xml. Note
the component name does not change the value of the self attribute of the element.
8.2.1 Default Name
A default name is used if an object in an InDesign document does not have a user-de"ned
component name. The default name is generated by appending the object’s UID (an InDesign
internal value) to its script object type. For example, the default name for a story with UID 0x1c8
is Story_uic8.
8.2.2 User Defined Names
A user de"ned name must meet all of the following requirements:
• It must be unique within the IDML package.
• It must not con$ict with any existing names for the same type of element.
• It must not con$ict with default names. To avoid con$ict with default names, a name with the
following pattern is not valid: starts with the script object name, followed by “_”, followed by
a “u” or “U”, followed by 1 or more hex digits, followed by nothing else. For example, Story_
u123 is not valid (because it matches the default name pattern), but Story123, Story_123,
Story_u123_Transformed are all valid user-de"ned component names.
• It must be a valid "le name (it may not contain invalid characters for a "le name, and cannot
include reserved "le name characters).
8.2.3 Reset Component Name on Import
When an IDML package is opened by InDesign, user-de"ned component names will be saved in
the document so they can be used when the document is exported (that is, they are preserved for
round-trip).
IDML File Format Specification
24 IDML Syntax: XML Conventions and Style
Default names are not saved with the document because the object created during import may
have a di&erent UID. A new default name is generated when the document is exported.
8.2.4 Scripting Interface
Component names can be accessed through the IDMLComponentName property on spread, story,
and master spread objects.
8.2.5 C++ API
Component names can be added using the InDesign C++ API. For more on this topic, refer to the
In Design SDK Programming Guide.
9 IDML Syntax
The following sections provide an overview of IDML syntax, starting with the conventions used
in IDML and the way that data types are expressed, and then moving on to the details of the ways
that In Design objects and properties are represented.
9.1 XML Conventions and Style
The following sections describe a number of conventions we have adopted for IDML.
9.1.1 Names in IDML
XML elements and attributes in an IDML "le will use the “long name” of the corresponding
objects in the In Design scripting object model. For example, the Rectangle object in scripting
will become a <Rectangle> element in IDML; the Stroke Weight property will become a Stroke-
Weight attribute (shown here in a <Rectangle> element):
<Rectangle Stroke Weight = "6"/>
Note that the elements representing text objects in IDML di&er from the text objects used in the
scripting object model. In general, the Character Style Range element in IDML corresponds to
the Text Style Range object in the scripting object model. Both represent a continuous run of
identical formatting, and both have roughly the same set of formatting values (represented by
properties in scripting and by attributes in IDML).
9.1.2 Use of Empty Elements
Whenever possible, IDML uses empty elements to represent objects or properties. For example, a
<MarginPreference> element in a <Page> element usually looks something like this:
IDML File Format Specification
25 IDML Syntax: Generating IDML Schema
<MarginPreference ColumnCount="1" ColumnGutter="12" Top="36" Bottom="36" Left="36"
Right="36" ColumnDirection="Horizontal" ColumnsPositions="0 540"/>
As you can see, the <MarginPreference> element does not contain any child elements—all of the
properties of the element are represented as attributes.Empty elements can be processed more
rapidly than elements containing child elements.
9.2 Generating IDML Schema
The complete IDML schema can be written as Relax NG Compact Syntax "les. You can generate
these schema "les using the following script:
//Fill in the location of a folder on your system in the following line.
app.generateIDMLSchema(Folder("/c/IDMLSchema"), false);
When you generate an IDML schema with the second parameter set to false, all of the schema
elements are contained in two "les: IDMarkupLanguage.rnc and datatype.rnc (the latter "le is
included by reference in the former). If you want to view only the schema elements for a speci"c
type of "le in the IDML package (e.g., a Story_nnn.xml "le), you generate separate schema "les
corresponding to each XML "le included in the IDML package (Master Spreads.xml, Spread.xml,
Text.xml, etc.). To do this, run the following script:
//Fill in the location of a folder on your system in the following line.
app.generateIDMLSchema(Folder("/c/IDMLSchema"), true);
The output folder you speci"ed will include the following schema "les (in the same folder
organization as in an IDML package):
datatype.rnc
designmap.rnc
Master Spreads.rnc
Fonts.rnc
Graphic.rnc
Preferences.rnc
Styles.rnc
Spread.rnc
Story.rnc
Backing Story.rnc
Mapping.rnc
Tags.rnc
Note that the content of the datatype.rnc "le is the same in either method of generating the
schema.
IDML File Format Specification
26 IDML Syntax: Data Types in IDML
9.3 Data Types in IDML
IDML data types are declared in a Relax NG Compact Syntax "le named datatype.rnc, which
will be included by all other schema "les. This schema is can be extended by In Design plug-ins
by adding objects and properties to the scripting object model. New versions of the schema can
be generated at any time by In Design. For more on generating the "le, see “Generating IDML
Schema”.
The following table shows a list of basic types. The "rst column lists the script data types, the
second column is the corresponding type name used in the Relax NG schema, and the third
column is the value of the type attribute that appears in the IDML "le (Note that the type
attribute will only appear in a child element of the <Properties> element):
Table 1. IDML basic data types
Script Data Type Schema Data Type Value of Type Attribute in an IDML File
boolean xsd:boolean boolean
string xsd:string string
short integer xsd:short short
long integer xsd:int long
longlong integer xsd:int longlong
double xsd:double double
object xsd:string object
object list xsd:string list of strings as a space-separated string
list xsd:string list of simple types as a space-separated
string
date xsd:date date
file xsd:string file
enumeration xsd:string Depends on the de"nition of the enumeration speci"ed in
datatype.rnc
unit xsd:double unit or double
record text record
stream text binary
9.3.1 Scalar Data Types vs. Complex Data Types
Scalar types are basic types which have a single value associated with them. They are the building
blocks upon which all other data types are constructed.
Complex types are comprised of combinations of the basic types. Lists and records are two
examples of complex types which exist today in the scripting object model.
• Lists are homogenous collections of elements. They are similar to arrays used by traditional
programming languages. Lists contain an attribute that identi"es the length of the list.
IDML File Format Specification
27 IDML Syntax: Data Types in IDML
• Records are heterogeneous collections of elements. Records may contain other records.
Records may also be contained within a list.
9.3.2 Enumerations
In Design scripting makes frequent use of enumerations to de"ne the scope of a property value.
For example, story types can be Regulartext, Toctext, or Indexingtext. In Design’s IDML
export uses the following rules to determine how an enumeration value should be expressed:
• When the value of a property is always an enumeration, it is expressed as an attribute of an
element, and its data type is “string”.
• If the value of a property’s can be one of several di&erent types, including an enumeration,
the property will be expressed as a child element of a <Properties> element, with the type
attribute of enumeration. For example, the following segment of the <Document Preference>
element indicates the column and margin guide colors are “Green”.
IDML schema example (from designmap.rnc, edited to remove o&-topic attributes):
Schema Example 1. Column Guide Color and Margin Guide Color Elements
Document Preference_Object = element Document Preference {
element Properties {
element Column Guide Color { In Design UIColor Type_Type Def }?&
element Margin Guide Color { In Design UIColor Type_Type Def }?
}
?
}
Example from an IDML package (edited to remove o&-topic attributes):
IDML Example 1. <Document Preference>
Properties Expressed as Attributes or Elements, Depending on Their Value
<Properties>
<Column Guide Color type="enumeration">Violet</Column Guide Color>
<Margin Guide Color type="list">
<List Item type="double">66</List Item>
<List Item type="double">60</List Item>
<List Item type="double">196</List Item>
</Margin Guide Color>
</Properties>
</Document Preference>
In the above example, the value of a <Column Guide Color> or <Margin Guide Color> can be either
an In Design UIColor Type enumeration (de"ned in the datatype.rnc "le), or an RGB color
(de"ned as an array of three doubles). Because the value can be more than a single, simple type,
it is expressed as an element, rather than as an attribute. When the color is an enumeration, as in
the <Column Guide Color> element shown above, the name of the enumeration appears as the value
of the element. When the color is an RGB array, it is represented by a series of elements, as shown
by the child elements of the <Margin Guide Color> element.
IDML File Format Specification
28 IDML Syntax: Data Types in IDML
9.3.3 Key String
Many elements and attributes in IDML refer to various settings in an In Design document by
name (default colors or styles, for example) or by the string displayed in the In Design user
interface. These strings can change as the locale (or language) of the application changes.
IDML can use a “key string” and an untranslated string for these values. The key string is used to
look up a localized (translated) string. An untranslated string is used “as is” with no lookup. Both
of these string usages are represented as script data type string.
The four character pre"x $ID/ inserted at the beginning of a string indicates that the string is a
key string, and that In Design should look up the appropriate localized string during the IDML
import process. For example, in the following abbreviated <Index Options> element, the value of
the Title attribute is a key string.
<Index Options Title="$ID/Index"/>
In the example above, the use of the key string means that In Design will look up the localized
string during the process of importing the IDML document. Once the document is open, the
correct string for the current locale will be displayed in the relevant areas of the user interface,
and the corresponding value (object or other setting) will be applied to the property. If, instead,
the value of the attribute was simply the term “Index”, In Design would display that string,
regardless of the locale of the application, and would attempt to apply an object or setting of that
name.
If InDesign cannot "nd a string value to replace the key string, the key string will be used as is.
The following example shows the syntax used when a key string appears in an element:
<Rule Above Gap Color type="string">$ID/Text Color</Rule Above Gap Color>
9.3.4 Measurement Units
Measurement units in IDML exported from In Design are always points (de"ned as 72 units per
inch).
IDML File Format Specification
29 IDML Syntax: Representation of Objects
9.4 Representation of Objects
In Design objects (spreads, colors, or text frames, for example) are represented by XML elements
in IDML. Each object has properties that can be expressed as child XML elements or as attributes.
An object in an In Design document is generally written into an IDML XML element in the
following (simpli"ed) format:
IDML Example 2. Object Serialization
<Object Simple Property="Value" ... Self="Unique ID">
<Properties>
<Complex Property>Value</Complex Property>
</Properties>
<Child Object>...</Child Object>
...
</Object>
Where Object is the name of the In Design object type, Simple Property is a property that can
be expressed as an XML attribute, Self is a unique identi"er for the object, Value is the value of
the property, Complex Property is a property that must be expressed as an XML element (see
“Representation of Properties”), and Child Object is an object contained by the object (e.g., an
object inside a group). The content of the <Child Object> element follows the same pattern as the
<Object> element.
The <Properties> and <Child Object> sections are optional, and depend on the object being
serialized. If both are empty, object can be written as simpli"ed form:
<Object Simple Attribute="Value", ... Self="Unique ID"/>
9.5 Representation of Properties
Properties can be expressed either as attributes or child elements of the containing XML element.
In general, simple values are represented as attributes; more complex values are represented as
elements.
9.5.1 Properties Represented as Attributes
An object property will be expressed as an XML attribute if it meets any of the following
conditions:
• The property is de"ned as simple scripting type (i.e., not Stream Type, Variable Type, or Record-
Type, see “Properties Represented as Elements”) and its property name is not “Contents”.
Because the Contents property may be a very long string and may contain line ending
characters, it is not suitable to be represented as an XML attribute.
• The value of the property is one dimensional array where each member of the array is a simple
data type. It is not necessary for every member to be the same type.
• All of the possible values of the property are either objects or enumerations.
IDML File Format Specification
30 IDML Syntax: Representation of Properties
The name of the scripting property is generally used as the key of the XML attribute, and the
value of the property is stored as the value of the attribute. The value can be either a single value,
or a list of values separated by spaces. For example:
Point Size="12"
Color Value="0 0 0 100"
Note that if the value of the property contains space character, it is encoded as “%20”.
9.5.2 Properties Represented as Elements
If a given property does not meet the rules described above for being written as an attribute, it
will be expressed as an XML element inside the <Properties> child element of the XML element
representing the containing object. The name of the scripting property is used as the name of the
element, and the value of the property is serialized as the content of the element. In general, the
data type of the value will be speci"ed in the type attribute of the element.
Properties are expressed as elements in two basic forms: as a single value and as a list of values.
Table 2. Property Elements
Single value <Properties>
</Properties>
<Guide Color type="enumeration">Light Blue</Guide Color>
List of values <Properties>
<Guide Color type="list">
<List Item type="double">128</List Item>
<List Item type="double">0</List Item>
<List Item type="double">255</List Item>
</Guide Color>
</Properties>
In the example above, the guide color property of an In Design guide is expressed as an element
because it can be either a UIColors_Enum Value enumeration or a custom RGB color.
The scripting object model contains two data types that are always represented as elements in
IDML: Record Type, and Geometry. In addition, some properties of the type Variable Type are
written to IDML as elements. The following sections discuss these types.
IDML File Format Specification
31 IDML Syntax: Representation of Properties
Record Type
Properties whose data type (in the scripting object model) is Record Type are serialized into XML
as a series of child elements inside the <Properties> element, as shown in the following example
(where Tab List is the property name and Alignment, Alignment Character, Leader, and Position are
items in the property record):
IDML Example 3. Record Type Serialization
<Tab List type="record">
<Alignment type="enumeration">Left Align</Alignment>
<Alignment Character type="string">$ID/.</Alignment Character>
<Leader type="string">$ID/</Leader>
<Position type="unit">36</Position>
</Tab List>
Geometry
Page item geometry (the shape of the page item) is represented as a <Path Geometry> element. This
element, in turn, contains one or more <GeometryPathType> elements, each of which, in turn,
contains two or more <Path Point> elements.
The <Path Geometry> element has the following form:
IDML Example 4. Geometry Serialization
<Path Geometry>
<GeometryPathType Path Open="false">
<Path Point Array>
<Path Point Type Anchor="72 -324" Left Direction="72 -324"
Right Direction="72 -324"/>
<Path Point Type Anchor="72, -252" Left Direction="72, -252"
Right Direction="72, -252"/>
<Path Point Type Anchor="144 -252" Left Direction="144 -252"
Right Direction="144 -252"/>
<Path Point Type Anchor="144 -324" Left Direction="144 -324"
Right Direction="144 -324"/>
</Path Point Array>
</GeometryPathType>
</Path Geometry>
For more on geometry in IDML, see “Spreads and Master Spreads.”
Variable Type
Properties in the scripting object model with the data type Stream Type or properties whose name
is Contents are represented as XML elements.
IDML File Format Specification
32 IDML Syntax: Representation of Properties
Complex Structures
If the scripting object model data type of a property is more complex than the structures we have
discussed, it is serialized as a list of elements. The <Descriptor> element (found in the <Page>
element) is an array containing one or more elements of any type. It is serialized as an element
containing a series of property elements, as shown in the following example:
<Descriptor type="list">
<ListItem type="string"></ListItem>
<ListItem type="enumeration">Arabic</ListItem>
<ListItem type="boolean">true</ListItem>
<ListItem type="boolean">false</ListItem>
<ListItem type="long">1</ListItem>
<ListItem type="string"></ListItem>
</Descriptor>
In general, properties serialized as <List Item> elements are used for storing data for round-trip
to and from In Design and In Copy, and can be thought of as read-only properties. It is unlikely
that you will ever need to construct these elements.
9.5.3 Use of the Type Attribute in Property Elements
If a <Properties> element is used to represent the properties of an object, each property is
represented as a child element of the <Properties> element. Each child element, includes a type
attribute whose value is set to the data type (see “Data Types in IDML”) of the property. For
example:
<Properties>
<Baseline Frame Grid Color type="enumeration">Light Blue</Baseline Frame Grid Color>
</Properties>
In the above example, the value Light Blue comes from the de"nition of the UIColors
enumeration in the datatype.rnc "le.
9.5.4 Object Reference Format
Properties in the scripting object model o%en contain references to objects. For example, the
Fill Color property of a Rectangle will always refer to a Color, Tint, Mixed Ink, Gradient, or
Swatch object. IDML expresses this relationship by including a reference to the XML element
representing the object (which is stored elsewhere in the document) as the value of the XML
element or attribute representing the property. Object references are the most common cross
reference format within an IDML "le.
IDML File Format Specification
33 IDML Syntax: Representation of Properties
When serializing an object into an XML element, In Design generates a unique string for the ID
of the element and stores it in the Self attribute. The algorithm used for generating the ID is
complex, and proprietary to Adobe, but it generally follows these rules:
• If an object belongs to a class that identi"es its members by name, then the value of the Self
attribute of the element will be that name. If the name is not unique, then In Design will add a
pre"x and/or post"x strings to create a unique ID upon import.
• If an object is a child of another object, the name or ID of the parent object will be added to the
value of the Self attribute as a pre"x string, using a pattern similar to path syntax:
/parent/childname
• If an object does not have a name, the value of the ID property of the object will be used as the
value of the Self attribute of the element during export.
• If multiple objects exist of the same type, index numbers will be added to the Self attribute as
a post"x string.
The only requirement of the value of the Self attribute is that it is unique within the IDML
package. If you are writing the IDML yourself, you do not need to observe the above pattern—
you can change the value of the Self attribute to anything you want as long as it is unique
(within the IDML package) and as long as all references to the element are also changed to
match.
<Story Self = "ucb" .../>
The following shows an example of an element reference expressed as the value of an XML
element. In the following example, the <Based On> element of a <Paragraph Style> element
refers to another <Paragraph Style> element whose Self attribute contains the value Heading
(the name of the paragraph style). In this case, the paragraph style is de"ned in the Styles.
html "le inside the Resources folder in the IDML package.
<Based On type="object">Paragraph Style\Heading</Based On>
Cross references can also appear as values of attributes. In the following example, the Title-
Style attribute of the <Index Options> element refers to a <Paragraph Style> element whose
Self attribute contains the value Index Title (the name of the paragraph style). In this case,
the paragraph style is de"ned in the Styles.html "le inside the Resources folder in the IDML
package.
<Index Options Title Style="Paragraph Style\Index Title" .../>
The following example shows a cross reference that uses the Self attribute of an element to
refer to the element. The value ucb is the unique identi"er of the <Story> element, as shown
above.
<Text Frame Parent Story="ucb" .../>
• IDML "les can contain forward references (i.e., references to objects which have not yet been
included in the IDML "le).
• References are valid within an IDML package or within a single IDML "le. References from
one package to another or one "le to another are not allowed.
IDML File Format Specification
34 IDML Syntax: Representation of Properties
9.5.5 Cross-file Reference Examples
The following example shows how the <Document> element in a designmap.xml "le can refer to
the spreads that make up the document.
Figure 2. Cross Reference: <Document> to Spread file
IDML
Resources
<Document>
MIMETYPE
<id Pkg:Spread src = "Spreads/Spread_ucb.xml" .../>
<id Pkg:Spread src = "Spreads/Spread.ucc.xml" .../>
</Document>
Fonts.xml
Styles.xml Graphic.xml Preferences.xml
designmap.xml
Spreads
Spread_ucb.xml Spread_ucc.xml
IDML File Format Specification
35 IDML Syntax: Representation of Properties
The following example shows how the Parent Story attribute of a <Text Frame> element in a
Spread.xml "le refers to the story that contains the text in the text frame.
Figure 3. Cross Reference: <Text Frame> to <Story>
IDML
Resources
MIMETYPE
Fonts.xml
Styles.xml Graphic.xml Preferences.xml
<Spread Self = "ub5">
<Text Frame Self = "udd" Parent Story = "ucb">
designmap.xml
</Text Frame>
Spreads
</Spread>
Spread_ub5.xml
Stories
<Story Self = "ucb" .../>
Story_ucb.xml
The following example shows how the Applied Paragraph Style attribute of a <Paragraph Style-
Range> element in a Story.xml "le refers to the Self attribute of the <Paragraph Style> applied
to the text.
IDML File Format Specification
36 IDML Syntax: Representation of Properties
Figure 4. Cross Reference: <Paragraph Style Range> to <Paragraph Style>
IDML
<id Pkg:Styles>
<Root Paragraph Style Group>
<Paragraph Style Self = "Paragraph Style\Heading">
Resources
</Paragraph Style>
</Root Paragraph Style Group>
MIMETYPE
</Story>
Fonts.xml
Styles.xml Graphic.xml Preferences.xml
designmap.xml
Spreads
Spread_uc5.xml
<Story Self = "ucb">
<Paragraph Style Range Applied Paragraph Style =
"Paragraph Style\Heading">
</Paragraph Style Range>
</Story>
Stories
Story_ucb.xml
In the example shown above, the <Paragraph Style> is part of the <Root Paragraph Style-
Group>. IDML uses a syntax similar to that of a "le path to refer to paragraph styles within their
containing group. For example, if a style named “List First” is in a paragraph style group named
“List Styles,” a reference to the style would look like the following:
Applied Paragraph Style = "Paragraph Style\List Styles%30a List First"
In this example, a colon, encoded as %30a, acts as a path separator character.
IDML File Format Specification
37 IDML Syntax: Representation of Properties
The following example shows how a <Rectangle> element can refer to an external "le. Linked "les
are stored outside the IDML package "le. If a "le cannot be found when the IDML "le is opened
in In Design, it will be listed as a missing link.
Figure 5. Cross Reference: Referring to an External File
IDML
Resources
MIMETYPE
Fonts.xml
Styles.xml Graphic.xml Preferences.xml
<Rectangle Self="ucd">
designmap.xml
Spreads
<Image Self="uc7">
<Link Self="ucc"
Link Resource URI="file:D:/images/pumpkin.jpg"/>
</Image>
</Rectangle>
Spread_ucb.xml
pumpkin.jpg
IDML File Format Specification
38 IDML Syntax: Representation of Properties
The following example shows how to refer to an external hyperlink destination.
Figure 6. Cross Reference: Hyperlink Source and Hyperlink Destination
IDML
Stories
<Character Style Range>
<Hyperlink Text Source Self="ue7"
Name="Hyperlink_1" Hidden="false"
Applied Character Style="n">
<Content>adobe website</Content>
</Hyperlink Text Source>
</Character Style Range>
MIMETYPE
Story_uc6.xml
designmap.xml
<Hyperlink URLDestination Self="ueb" Name="http://www.adobe.com"
Destination URL="http://www.adobe.com" Hidden="false"
Destination Unique Key="1"/>
<Hyperlink Self="uea" Name="adobe website" Source="ue7"
Visible="true" Highlight="None" Width="Thin" Border Style="Solid"
Hidden="false" Destination Unique Key="1">
<Properties>
<Border Color type="enumeration">Black</Border Color>
<Destination type="object">ueb</Destination>
</Properties>
</Hyperlink>
9.5.6 File Paths in IDML
References to linked "les are speci"ed in terms of absolute paths in an IDML "le. When a "le
path is encountered during the course of opening an IDML "le, InDesign will "rst attempt to
locate the "le at the given absolute path. If the "le cannot be found at that location, InDesign uses
an heuristic to locate the linked "le. This approach also attempts to work around cross-platform
issues.
InDesign "rst looks for the link in the folder containing the IDML "le. If the "le cannot be
located in the folder, InDesign searches for the "le by using the "le path to the IDML document.
If the "le is still not found, InDesign goes up one level in the IDML document’s path, and tries
again. Finally, InDesign looks for the link in the folders that have been speci"ed by the user when
updating "le links during the current InDesign session.
For example, here are the search locations for the following two paths:
IDML "le path: /job/projects/p1/doc.idml
Linked "le path: c:\links\graphics\Image.psd
/job/projects/p1/Image.psd
IDML File Format Specification
39 IDML Syntax: Representation of Properties
/job/projects/p1/graphics/Image.psd
/job/projects/p1/links/graphics/Image.psd
/job/projects/Image.psd
/job/projects/graphics/Image.psd
/job/projects/links/graphics/Image.psd
/job/Image.psd
/job/graphics/Image.psd
/job/links/graphics/Image.psd
/Image.psd
/graphics/Image.psd
/links/graphics/Image.psd
If the "le is still not found, InDesign looks for the Image.psd "le in the list of cached folders
selected by the user for re-linking in the current InDesign session.
For example:
Cached folders previously selected during re-linking in current session:
/job/projects/images/Folder1
/job/projects/images/Folder2
/job/projects/images/Folder3
Search of missing link in cached re-link folders:
/job/projects/images/Folder1/Image.psd
/job/projects/images/Folder2/Image.psd
/job/projects/images/Folder3/Image.psd
If the "le still cannot be found, it will be listed as a missing link.
IDML File Format Specification
40 IDML File Reference: Common Attributes and Elements
10 IDML File Reference
This section provides detailed information on the content and structure of each type of "le that
can appear in an IDML document.
10.1 Common Attributes and Elements
A number of attributes an elements are shared by a large number of elements in the "les that
make up an IDML package. Rather than repeat the de"nition of these elements, we’ll document
them int he following sections.
10.1.1 Self
The Self attribute contains a unique identi"er for the elements that contain it. This
identi"er is used elsewhere in the IDML package to refer to the element, as discussed in the
<hyperlink>“Object Reference Format”</hyperlink> section of this speci"cation.
Schema Example 2. Self
attribute Self { xsd:string }
The following example shows the Self attribute of a <Story> element.
IDML Example 5. Self
<Story Self = "udd" .../>
10.1.2 Scripting Labels
Many of the elements in the "les contained in an IDML package can contain a <Label> element.
This element represents a feature of In Design’s scripting object model: most non-text objects can
contain any number of key/value pairs as strings. These objects have a default label property, but
can have custom labels associated with them. Both the key and the value of a script label can be
strings of any length.
For more on using script labels, refer to the Scripting chapter of the Adobe In Design CS4 Scripting
Guide for your scripting language of choice (Apple Script, Java Script, or VBScript).
Schema Example 3. Label
element Properties {
element Label { element Key Value Pair { Key Value Pair_Type Def }*
}?
}
The following example shows both the default label (Key attribute is "Label") and a custom label
that has been added with the scripting method insert Label.
IDML Example 6. Label
<Label>
<Key Value Pair Key="Label" Value="This is a script label."/>
IDML File Format Specification
41 IDML File Reference: Common Attributes and Elements
</Label>
<Label>
</Label>
<Key Value Pair Key="my Custom Label" Value="This is a custom script label."/>
Element Name Element Description
Label The scripting label(s) associated with the object. Optional.
Attribute Name Type Req Description
Key string yes The key of the label.
Value string no The string stored in the label.
Note: Only the default label is visible in the InDesign user interface (in the Script Label panel).
10.1.3 Optional Values, Defaults, and Preferences
As you look through the IDML schema, you’ll notice that most of the attributes and elements are
marked as being optional. When you look at the schema for a <Rectangle> element, for example,
you’ll see that the <Path Geometry> element is optional. Since the <Path Geometry> element
contains the list of path points that de"ne the shape of the rectangle (see “Page Item Geometry”),
it is difficult to understand how it can be optional. What does this mean, in practical terms?
First, it is technically true that the <Path Geometry> element can be omitted. If you omit the
<Path Geometry> element from the <Rectangle> element, In Design will create a default-sized
rectangle when you open the IDML "le. The default size and location of the rectangle don’t really
matter—the point is that In Design supplies default values for the missing values in the IDML
"le. While this is an extreme case—we don’t expect that you’ll ever want to construct a rectangle
without specifying its size and location—it shows that you can construct documents from very
minimal XML elements.
When you look at an IDML "le that you’ve exported from In Design, you’ll see a very large
number of XML elements. A <Document> element alone usually contains dozens of <Language>,
<Text Variable>, and <Cross Reference Format> elements, among others. When you create IDML
"les yourself, you can omit these elements. They are only included in the IDML "le by In Design
to ensure round-trip "delity of the document. If you omit these default elements, In Design will
create the corresponding default objects in the In Design document as it opens the IDML "le.
This behavior corresponds to the way that In Design handles defaults and preferences when
you create documents using the user interface. When you use user interface controls to change
various settings when no documents are open, you’re modifying the application defaults.
Application defaults change the way that all new documents are created, but have no e&ect on
existing documents. When you change settings in a document when no objects are selected, on
the other hand, you’re changing the document defaults. All new objects created in the document
will take on the appropriate default values, but existing objects in the document (and objects
in other documents) will be una&ected. (For more on In Design’s defaults handling, refer to the
online help.)
IDML, however, cannot rely on the application defaults, because they can be changed by the user.
IDML also cannot rely on document defaults, because the IDML schema speci"es that most or
all of the document default values are optional. Instead, IDML gets default values for omitted
optional values from the IDML defaults "le. This mechanism takes the place of both application
and document defaults in the user-interface scenario described above, and guarantees that
IDML File Format Specification
42 IDML File Reference: Common Attributes and Elements
the behavior of an IDML document will remain consistent, regardless of the user settings and
installation details (such as the locale of the application). If a document default value is not found
in the IDML document, InDesign will use the corresponding value from the IDML defaults "le.
Typically, users set document defaults to specify a commonly-used formatting attribute—the
default font, stroke weight, or "ll color, for example. IDML mirrors this practice by providing
two very useful and important elements: <Page Item Default> and <Text Default> (in an IDML
package "le, you’ll "nd these in the Preferences.xml "le inside the Resources folder). The values
that you provide in these elements de"ne the default formatting for text and page items in the
document.
When you de"ne a default value for an attribute or element in one of these elements, all elements
of a given type that have not explicitly overridden that value will inherit the formatting speci"ed
by the default.
Here’s an example: let’s say that you want the default stroke weight for all page items in a
document to be two points. To do this, you change the value of the Stroke Weight attribute of the
<Page Item Default> element to 2. This means that all page items that you add to the document
will have a stroke weight of two points. If you want to override the default stroke weight on a page
item, you enter a di&erent value in the corresponding attribute in the element de"ning the page
item. In this example, if you want to specify that the stroke weight of a particular rectangle is one
point, you’d set the value of the Stroke Weight attribute of the <Rectangle> object to 1. This value
overrides the formatting speci"ed in the <Page Item Default> element.
In short, if the page item itself speci"es the stroke weight, then InDesign uses that stroke weight
value. If the page item does not specify the stroke weight, then InDesign uses the stroke weight
value stored in the <Page Item Default> element. If the <Page Item Default> element IDML
document does not specify a stroke weight, or if the IDML document does not contain a <Page-
Item Default> element, then InDesign will use the stroke weight value from the <Page Item-
Default> element in the IDML defaults "le.
Note: The above example is a bit of an oversimpli"cation in that it assumes that the default object
style applied to new rectangles is In Design’s built-in “None” object style (which is an object style
that cannot be edited). This is In Design’s default behavior, but can be changed by users. In IDML,
you would specify this default by setting the Applied Object Style attribute of the <Page Item-
Default> element to Object Style/$ID/[None].
This makes writing your own IDML much easier—if you know that most of the page items
you’ll be creating in an IDML document will share the same formatting, you can specify that
formatting in the <Page Item Default> element and then omit the corresponding attributes and
elements when you enter the <Rectangle>, <Oval>, <Polygon>, and <Graphic Line> elements that
share those formatting attributes.
Note: If you are creating your own In Design snippet "les (.idms), you cannot specify the default
formatting in this way—the <Page Item Default> and <Text Default> elements are not used in
snippets. Instead, snippet "les get their default formatting from the In Design documents in which
they are placed. This is the same behavior as importing a snippet "le created by In Design, but
it means that if you’re creating a snippet "le, you’ll need to fully specify all formatting that you
don’t want overridden by the formatting of the documents the snippet will be imported into. For
more on importing and exporting snippets, refer to the In Design online help. For more on the
di&erences between the snippet format and document-level IDML, refer to “Appendix B: Snippets
and ICML Documents.”
IDML File Format Specification
43 IDML File Reference: Common Attributes and Elements
As you continue to look through an IDML document exported from In Design, you’ll also see a
number of preference elements (such as the <XMLImport Preference>, <XMLExport Preference>,
or <Layout Adjustment Preference> elements). Again, these elements are included to maintain
round-trip "delity of the In Design document, and have no e&ect on the construction of spreads,
stories, and page items in an IDML "le. The settings in the <XMLImport Preference> element, for
example, will not have an e&ect until a user chooses File>Import XML in the In Design document
created by opening the IDML document. The content of the IDML document does not change.
When you’re writing your own IDML, you can generally omit these preferences objects. The only
case in which you might want to include these preference elements is if you are creating "les in a
workgroup setting and need to maintain standard behaviors across all documents. If, for example,
your workgroup requires that the Adjust Layout feature is turned on, you’d set the Enable Layout-
Adjustment attribute of the <Layout Adjustment Preference> element to true. For more on the
preferences objects, see “Preferences.xml.”
IDML File Format Specification
44 IDML File Reference: designmap.xml
10.2 designmap.xml
The designmap.xml "le contains a “road map” to the XML elements that make up the document,
and de"nes a variety of document-level attributes. Some elements, such as hyperlinks and cross
references, are collected in the <Document> element; this makes it easier to refer to them from
other parts of the IDML "le or package.
This section describes the contents of the designmap.xml "le in an IDML package "le. If you’re
creating a “single "le” IDML document, you’ll use the same elements, and use the same method
of referring to elements in the "le (generally by the contents of their Self attributes) but won’t
need to include the cross-"le references.
Schema Example 4. Document
Document_Object = element Document {
attribute DOMVersion { "7.0" },
attribute Self { xsd:string },
attribute ActiveProcess { xsd:string }?,
attribute TransparencyAttributeDefaultProperty { xsd:string }?,
attribute StoryList { list { xsd:string * } }?,
attribute FullName { xsd:string }?,
attribute Name { xsd:string }?,
attribute Visible { xsd:boolean }?,
attribute FilePath { xsd:string }?,
attribute Modified { xsd:boolean }?,
attribute Saved { xsd:boolean }?,
attribute ZeroPoint { UnitPointType_TypeDef }?,
attribute UnusedSwatches { list { xsd:string * } }?,
attribute ActiveLayer { xsd:string }?,
attribute Converted { xsd:boolean }?,
attribute Recovered { xsd:boolean }?,
attribute ReadOnly { xsd:boolean }?,
attribute Id { xsd:int }?,
attribute CMYKProfileList { list { xsd:string * } }?,
attribute RGBProfileList { list { xsd:string * } }?,
attribute CMYKProfile { xsd:string }?,
attribute RGBProfile { xsd:string }?,
attribute SolidColorIntent { RenderingIntent_EnumValue }?,
attribute AfterBlendingIntent { RenderingIntent_EnumValue }?,
attribute DefaultImageIntent { RenderingIntent_EnumValue }?,
attribute RGBPolicy { ColorSettingsPolicy_EnumValue }?,
attribute CMYKPolicy { ColorSettingsPolicy_EnumValue }?,
attribute AccurateLABSpots { xsd:boolean }?,
element Properties {
element InstanceList { element IndexInstanceType {
IndexInstanceType_TypeDef }*
}?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
Language_Object*,
IDML File Format Specification
45 IDML File Reference: designmap.xml
element idPkg:Graphic { attribute src {"Resources/Graphic.xml"} }?,
element idPkg:Fonts { attribute src {"Resources/Fonts.xml"} }?,
KinsokuTable_Object*,
MojikumiTable_Object*,
element idPkg:Styles { attribute src {"Resources/Styles.xml"} }?,
NumberingList_Object*,
NamedGrid_Object*,
MotionPreset_Object*,
Condition_Object*,
ConditionSet_Object*,
(element idPkg:Preferences { attribute src {"Resources/Preferences.xml"} }?&
LinkedStoryOption_Object?&
LinkedPageItemOption_Object?&
TaggedPDFPreference_Object?&
MetadataPacketPreference_Object?&
WatermarkPreference_Object?&
ConditionalTextPreference_Object?),
TextVariable_Object*,
element idPkg:Tags { attribute src {"XML/Tags.xml"} }?,
Layer_Object*,
element idPkg:MasterSpread { attribute src {xsd:string
{pattern = ".*\.xml"} } }*,
element idPkg:Spread { attribute src {xsd:string {pattern = ".*\.xml"} } }*,
Section_Object*,
DocumentUser_Object*,
CrossReferenceFormat_Object*,
Index_Object*,
element idPkg:BackingStory { attribute src {"XML/BackingStory.xml"} }?,
element idPkg:Story { attribute src {xsd:string {pattern = ".*\.xml"} } }*,
HyperlinkPageDestination_Object*,
HyperlinkURLDestination_Object*,
HyperlinkExternalPageDestination_Object*,
HyperlinkPageItemSource_Object*,
Hyperlink_Object*,
element idPkg:Mapping { attribute src {"XML/Mapping.xml"} }?,
Bookmark_Object*,
(PreflightProfile_Object*&
DataMergeImagePlaceholder_Object*&
HyphenationException_Object*&
ParaStyleMapping_Object*&
CharStyleMapping_Object*&
TableStyleMapping_Object*&
CellStyleMapping_Object*&
IndexingSortOption_Object*&
ABullet_Object*&
Assignment_Object*&
Article_Object*)
)
}
IDML File Format Specification
46 IDML File Reference: designmap.xml
Table 3. Document Properties Represented as Attributes
Name Type Req Description
Accurate LABSpots boolean no If true, uses LAB alternates for spot colors when
available.
Active Layer string no The active layer.
Active Process string no The active pre$ight process for this document.
After Blending-
Intent
Rendering Intent_
Enum Value
no The rendering intent for colors that result from
transparency interactions on the page a%er
blending. Can be Use Color Settings (Uses the
current color settings), Perceptual (Preserves
the visual relationship between colors at the
expense of actual color values; most suitable for
photographic images with high percentages of
out-of-gamut colors), Saturation (Produces
vivid colors at the expense of color accuracy;
most suitable for business graphics such as
graphs or charts), Relative Colorimetric
(Compares the extreme highlight of the source
color space to that of the desination color space
and shi%s all colors accordingly; out-of-gamut
colors are shi%ed to the closest reproducible col-
or in the destination color space), or Absolute-
Colorimetric (Maintains color accuracy at
the expense of preserving relationships between
colors; most suitable for previewing how paper
color a&ects printed colors).
CMYKPolicy Color Settings-
Policy_Enum Value
no The policy for handling colors in a CMYK color
model, including reading and embedding color
pro"les, mismatches between embedded color
pro"les and the working space, and moving
colors from one document to another. Can be
Color Policy Off (Turns o& color management
for documents whose pro"les do not match the
working space For imported colors, numeric
values override color appearance), Preserve-
Embedded Profiles (Preserves embedded color
pro"les in newly opened documents), Convert-
To Working Space (Converts newly opened
documents to the current working space For
imported colors, color appearance overrides
numeric values), or Combination Of Preserve-
And Safe Cmyk (Preserves raw color numbers
and ignores embedded color pro"les).
CMYKProfile string no The current CMYK pro"le.
CMYKProfile List string no A list of valid CMYK pro"les.
Converted boolean no If true, the Document was converted.
IDML File Format Specification
47 IDML File Reference: designmap.xml
Name Type Req Description
Default Image-
Intent
Rendering Intent_
Enum Value
no The rendering intent for bitmap images. Can
be Use Color Settings (Uses the current color
settings), Perceptual (Preserves the visual
relationship between colors at the expense of
actual color values; most suitable for photo-
graphic images with high percentages of out-
of-gamut colors), Saturation (Produces vivid
colors at the expense of color accuracy; most
suitable for business graphics such as graphs or
charts), Relative Colorimetric (Compares
the extreme highlight of the source color space
to that of the desination color space and shi%s
all colors accordingly; out-of-gamut colors
are shi%ed to the closest reproducible color in
the destination color space), or Absolute-
Colorimetric (Maintains color accuracy at
the expense of preserving relationships between
colors; most suitable for previewing how paper
color a&ects printed colors).
File Path string no The full path to the "le.
Full Name string no The full path to the Document, including the
name of the Document.
Id int no The ID of the document.
Modified boolean no If true, the Document has been modi"ed since it
was last saved.
Name string no The name of the Document.
RGBPolicy Color Settings-
Policy_Enum Value
no The policy for handling colors in an RGB color
model, including reading and embedding color
pro"les, handling mismatches between embed-
ded color pro"les and the working space, and
moving colors from one document to another.
Can be Color Policy Off (Turns o& color
management for documents whose pro"les
do not match the working space For imported
colors, numeric values override color appear-
ance), Preserve Embedded Profiles (Preserves
embedded color pro"les in newly opened docu-
ments), Convert To Working Space (Converts
newly opened documents to the current working
space For imported colors, color appearance
overrides numeric values), or Combination Of-
Preserve And Safe Cmyk (Preserves raw color
numbers and ignores embedded color pro"les).
RGBProfile string no The current RGB pro"le.
RGBProfile List no A list of valid RGB pro"les.
Read Only boolean no If true, the Document is read-only.
Recovered boolean no If true, the Document was recovered.
Saved boolean no If true, the Document has not been saved since it
was created.
IDML File Format Specification
48 IDML File Reference: designmap.xml
Name Type Req Description
Solid Color Intent Rendering Intent_
Enum Value
no The rendering intent for all vector art (areas of
solid color) in native objects. Can be Use Color-
Settings (Uses the current color settings),
Perceptual (Preserves the visual relation-
ship between colors at the expense of actual
color values; most suitable for photographic
images with high percentages of out-of-gamut
colors), Saturation (Produces vivid colors
at the expense of color accuracy; most suit-
able for business graphics such as graphs or
charts), Relative Colorimetric (Compares
the extreme highlight of the source color space
to that of the desination color space and shi%s
all colors accordingly; out-of-gamut colors
are shi%ed to the closest reproducible color in
the destination color space), or Absolute-
Colorimetric (Maintains color accuracy at
the expense of preserving relationships between
colors; most suitable for previewing how paper
color a&ects printed colors).
Story List string no The list of stories in the document, as a sequence
of references to the Self attribute of each story,
separated by spaces.
Transparency-
Attribute Default-
Property
string no Transparency defaults for the document.
Unused Swatches string no A list of the swatches that are not being used, as
a sequence of references to the Self attribute of
each swatch, separated by spaces.
Visible boolean no If true, the Document is visible.
Zero Point UnitPointType_
TypeDef
no The ruler origin, speci"ed as page coordinates in
the format [x, y].
Table 4. Document Properties Represented as Elements
Instance List Index Instance-
Type_Type Def
no A list of the index instances that have been
placed in the document.
IDML Example 7. Document Element Using References to Other Files in the IDML Package
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<?aid style="50" type="document" readerVersion="6.0" featureSet="257"
product="7.0(329)" ?>
<Document xmlns:idPkg="http://ns.adobe.com/AdobeInDesign/idml/1.0/packaging"
DOMVersion="7.0" Self="d" StoryList="ud6 u82" ZeroPoint="0 0" ActiveLayer="ua3"
CMYKProfile="U.S. Web Coated (SWOP) v2" RGBProfile="sRGB IEC61966-2.1" SolidColorI
ntent="UseColorSettings" AfterBlendingIntent="UseColorSettings" DefaultImageIntent
="UseColorSettings" RGBPolicy="PreserveEmbeddedProfiles" CMYKPolicy="CombinationOf
PreserveAndSafeCmyk" AccurateLABSpots="false">
<idPkg:Graphic src="Resources/Graphic.xml"/>
<idPkg:Fonts src="Resources/Fonts.xml"/>
<idPkg:Styles src="Resources/Styles.xml"/>
<idPkg:Preferences src="Resources/Preferences.xml"/>
IDML File Format Specification
49 IDML File Reference: designmap.xml
<idPkg:Tags src="XML/Tags.xml"/>
<idPkg:MasterSpread src="MasterSpreads/MasterSpread_ua4.xml"/>
<idPkg:Spread src="Spreads/Spread_uce.xml"/>
<idPkg:BackingStory src="XML/BackingStory.xml"/>
<idPkg:Story src="Stories/Story_ud6.xml"/>
</Document>
In the above example, the document contains a single story "le, Story_ud6.xml, and a single
spread "le, Spread_uce.xml. All of the other id Pkg: elements refer to standard "les and "le
locations inside the IDML package "le. In the following example, the <Story> and <Spread>
elements are contained within the designmap.xml "le itself.
IDML Example 8. Document Element in a designmap.xml File
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<?aid style="50" type="document" readerVersion="6.0" featureSet="257"
product="7.0(330)" ?>
<Document DOMVersion="7.0" Self="d" StoryList="ud6" ZeroPoint="0 0"
ActiveLayer="ua3"
CMYKProfile="U.S. Web Coated (SWOP) v2" RGBProfile="sRGB IEC61966-2.1"
SolidColorIntent="UseColorSettings" AfterBlendingIntent="UseColorSettings"
DefaultImageIntent="UseColorSettings" RGBPolicy="PreserveEmbeddedProfiles"
CMYKPolicy="CombinationOfPreserveAndSafeCmyk" AccurateLABSpots="false">
<Layer Self="ua3" Name="Layer 1" Visible="true" Locked="false" IgnoreWrap="false"
ShowGuides="true" LockGuides="false" UI="true" Expendable="true"
Printable="true">
<Properties>
</Properties>
</Layer>
Name="A-Master"
<LayerColor type="enumeration">LightBlue</LayerColor>
<MasterSpread Self="ua4" ItemTransform="1 0 0 1 0 0" OverriddenPageItemProps=""
NamePrefix="A" BaseName="Master" ShowMasterItems="true" PageCount="2">
<Page Self="ua9" GeometricBounds="0 0 792 612"
ItemTransform="1 0 0 1 -612 -396" Name="A"
AppliedMaster="n" MasterPageTransform="1 0 0 1 0 0" TabOrder=""
GridStartingPoint="TopOutside" UseMasterGrid="true">
<Properties>
<PageColor type="enumeration">UseMasterColor</PageColor>
</Properties>
<MarginPreference ColumnCount="1" ColumnGutter="12" Top="36"
Bottom="36" Left="36"
Right="36" ColumnDirection="Horizontal" ColumnsPositions="0 540"/>
</Page>
<Page Self="uaa" GeometricBounds="0 0 792 612"
ItemTransform="1 0 0 1 0 -396" Name="A"
AppliedMaster="n" MasterPageTransform="1 0 0 1 0 0" TabOrder=""
GridStartingPoint="TopOutside" UseMasterGrid="true">
<MarginPreference ColumnCount="1" ColumnGutter="12" Top="36"
Bottom="36" Left="36"
Right="36" ColumnDirection="Horizontal" ColumnsPositions="0 540"/>
</Page>
</MasterSpread>
<Spread Self="uce" FlattenerOverride="Default" AllowPageShuffle="true"
ItemTransform="1 0 0 1 0 0" ShowMasterItems="true" PageCount="1"
IDML File Format Specification
50 IDML File Reference: designmap.xml
BindingLocation="0">
<Page Self="ud3" GeometricBounds="0 0 792 612"
ItemTransform="1 0 0 1 0 -396" Name="1"
AppliedMaster="ua4" MasterPageTransform="1 0 0 1 0 0" TabOrder=""
GridStartingPoint="TopOutside" UseMasterGrid="true">
<Properties>
<PageColor type="enumeration">UseMasterColor</PageColor>
</Properties>
<MarginPreference ColumnCount="1" ColumnGutter="12" Top="36"
Bottom="36" Left="36"
Right="36" ColumnDirection="Horizontal" ColumnsPositions="0 540"/>
</Page>
<TextFrame Self="ue8" ParentStory="ud6"
PreviousTextFrame="n" NextTextFrame="n"
ContentType="TextType" ItemLayer="ua3" ItemTransform="1 0 0 1 0 -396">
<Properties>
<PathGeometry>
<GeometryPathType PathOpen="false">
<PathPointArray>
<PathPointType Anchor="72 72"
LeftDirection="72 72"
RightDirection="72 72"/>
<PathPointType Anchor="144 72"
LeftDirection="144 72"
RightDirection="144 72"/>
<PathPointType Anchor="144 144"
LeftDirection="144 144"
RightDirection="144 144"/>
<PathPointType Anchor="72 144"
LeftDirection="72 144"
RightDirection="72 144"/>
</PathPointArray>
</GeometryPathType>
</PathGeometry>
</Properties>
<TextFramePreference TextColumnFixedWidth="72"/>
</TextFrame>
</Spread>
<Story Self="ud6" AppliedTOCStyle="n" TrackChanges="false" StoryTitle="$ID/"
AppliedNamedGrid="n">
<StoryPreference OpticalMarginAlignment="false" OpticalMarginSize="12"
FrameType="TextFrameType" StoryOrientation="Horizontal"
StoryDirection="LeftToRightDirection"/>
<ParagraphStyleRange>
<CharacterStyleRange>
<Content>This is a text frame.</Content>
</CharacterStyleRange>
</ParagraphStyleRange>
</Story>
</Document>
IDML File Format Specification
51 IDML File Reference: designmap.xml
10.2.1 Documents and Color Management
The appearance of all swatches (colors, tints, gradients, mixed inks, and mixed ink groups,
described in section <hyperlink>“Graphics.xml”</hyperlink>) and imported graphics is
determined by the color management pro"les applied to the document. The pro"le does not
change the base properties of these objects (e.g., it does not change the CMYK color values of a
color de"ned in the Graphic.xml "le inside the IDML package); it only a&ects the rendering of
the color for display or output (printing and export).
IDML Example 9. Color Management Attributes
<Document Self="d" CMYKProfile="U.S. Web Coated (SWOP) v2"
RGBProfile="s RGB IEC61966-2.1" Solid Color Intent="Use Color Settings"
After Blending Intent="Use Color Settings" Default Image Intent="Use Color Settings"
RGBPolicy="Preserve Embedded Profiles" CMYKPolicy="Combination Of Preserve And Safe Cmyk"
Accurate LABSpots="false">
A complete discussion of In Design’s color management features is beyond the scope of this
document. For more information, refer to the In Design documentation.
Note: The colors used for drawing user interface items (guides, grids, layer highlights, etc.) are
simply RGB screen values on a given system, and are not color managed.
10.2.2 Language
The <Language> elements in an IDML package de"ne the language dictionaries available for the
document. You cannot create languages by adding new <Language> elements; they are included
for use as references (from, for example, <Paragraph Style> elements in the Styles.xml "le in the
Resources folder of the IDML package), and to maintain round-trip "delity for In Design and In-
Copy documents.
Schema Example 5. Language
Language_Object = element Language {
attribute Self { xsd:string },
attribute Name { xsd:string },
attribute SingleQuotes { xsd:string }?,
attribute DoubleQuotes { xsd:string }?,
attribute PrimaryLanguageName { xsd:string }?,
attribute SublanguageName { xsd:string }?,
attribute Id { xsd:int }?,
attribute HyphenationVendor { xsd:string }?,
attribute SpellingVendor { xsd:string }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Table 5. Language Properties Represented as Attributes
Name Type Req Description
Double Quotes string no The double quotes pair for the language.
IDML File Format Specification
52 IDML File Reference: designmap.xml
Name Type Req Description
Hyphenation Vendor string no The hyphenation rules source.
Id int no The unique ID of the Language.
Name string yes The name of the Language.
Primary Language-
Name
string no The name of the language.
Single Quotes string no The single quotes pair for the language.
Spelling Vendor string no The spell-checking source.
Sublanguage Name string no The sub-language name of the language.
10.2.3 KinsokuTable
Schema Example 6. KinsokuTable{
KinsokuTable_Object = element KinsokuTable {
attribute Self { xsd:string },
attribute Name { xsd:string },
attribute CantBeginLineChars { xsd:string }?,
attribute CantEndLineChars { xsd:string }?,
attribute HangingPunctuationChars { xsd:string }?,
attribute CantBeSeparatedChars { xsd:string }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Table 6. KinsokuTable Properties Represented as Attributes
Name Type Req Description
Cant Begin Line-
Chars
String no The characters in the kinsoku set that cannot
begin a line.
Cant End Line Chars String no The characters in the kinsoku set that cannot be
end a line.
Hanging Punc tu a-
tion Chars
String no The hanging punctuation characters in the kin-
soku set.
Cant Be Separated-
Chars
String no The characters in the kinsoku set that cannot be
separated.
10.2.4 MojikumiTable
MojikumiTable_Object = element MojikumiTable {
attribute Self { xsd:string },
attribute Name { xsd:string },
attribute BasedOnMojikumiSet { MojikumiTableDefaults_EnumValue }?,
element Properties {
IDML File Format Specification
53 IDML File Reference: designmap.xml
element OverrideMojikumiAkiList { element OverrideMojikumiAkiType {
OverrideMojikumiAkiType_TypeDef }*
}?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Table 7. MojikumiTable Properties Represented as Attributes
Name Type Req Description
Base d On Mojikumi-
Set
Mojikumi Table-
Defaults_
EnumValue
no The existing mojikumi set on which to base the
new mojikumi set.
Table 8. MojikumiTable Properties Represented as Elements
Name Type Req Description
Over ride Mojikumi-
Aki List
Over ride Mojikumi-
Aki Type_TypeDef
no The mojikumi overrides for aki.
10.2.5 NumberingList
Schema Example 7. NumberingList
NumberingList_Object = element NumberingList {
attribute Self { xsd:string },
attribute Name { xsd:string },
attribute ContinueNumbersAcrossStories { xsd:boolean }?,
attribute ContinueNumbersAcrossDocuments { xsd:boolean }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Table 9. NumberingList Properties Represented as Attributes
Name Type Req Description
Continue Numbers-
AcrossStories
boolean no If true, numbering continues across stories.
Continue Numbers-
AcrossDocuments
boolean no If true, numbering continues across documents
in a book.
IDML File Format Specification
54 IDML File Reference: designmap.xml
10.2.6 NamedGrid
Schema Example 8. NamedGrid
NamedGrid_Object = element NamedGrid {
attribute Self { xsd:string },
attribute Name { xsd:string },
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
)
}
GridDataInformation_Object?
Table 10. NamedGrid Properties Represented as Attributes
Name Type Req Description
Name string yes The name of the named grid.
10.2.7 Grid Data Information
Default grid properties. Applies to named, layout, and frame (story) grids.
Schema Example 9. GridDataInformation
GridDataInformation_Object = element GridDataInformation {
attribute FontStyle { xsd:string }?,
attribute PointSize { xsd:double }?,
attribute CharacterAki { xsd:double }?,
attribute LineAki { xsd:double }?,
attribute HorizontalScale { xsd:double }?,
attribute VerticalScale { xsd:double }?,
attribute LineAlignment { LineAlignment_EnumValue }?,
attribute GridAlignment { GridAlignment_EnumValue }?,
attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
attribute GridView { GridViewSettings_EnumValue }?,
attribute CharacterCountLocation { CharacterCountLocation_EnumValue }?,
attribute CharacterCountSize { xsd:double }?,
element Properties {
element AppliedFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?
}
?
}
IDML File Format Specification
55 IDML File Reference: designmap.xml
Table 11. GridDataInformation Properties Represented as Attributes
Name Type Req Description
CharacterAki double no The amount of white space between characters.
Character-
Alignment
Character Align-
ment_Enum Value
no The alignment of small characters to the largest
character in the line. Can be AlignBaseline,
AlignEmTop, AlignEmCenter, Align Em-
Bottom, AlignICFTop, or AlignICFBottom.
Chara cter Count-
Location
Character Count-
Location_Enum-
Value
no The character count location. Can be None,
TopAlign, LeftAlign, BottomAlign, or
RightAlign.
Character Count-
Size
double no The character size for the character count
display.
FontStyle string no The name of the font style.
GridAlignment Grid Alignment_
Enum Value
no The alignment to the frame grid or baseline grid.
Can be None, AlignBaseline, AlignEmTop,
AlignEmCenter, AlignEmBottom,
AlignICFTop, or AlignICFBottom.
GridView Grid View Settings_
EnumValue
no The grid view setting. Can be GridViewEnum,
ZnViewEnum, AlignViewEnum, or
GridAndZnViewEnum.
HorizontalScale double no The horizontal scaling applied to characters
within the grid.
LineAlignment LineAlignment_
EnumValue
no The alignment of the lines of the grid.
Can be LeftOrTopLineAlign, Center-
Line Align, Right Or Bottom Line Align,
LeftOrTopLineJustify, Center Line-
Justify, Right Or Bottom Line Justify, or
FullLineJustify.
LineAki double no The amount of white space between lines.
PointSize double no The point size of characters in the grid.
VerticalScale double no The vertical scaling applied to the grid.
Table 12. GridDataInformation Properties Represented as Elements
Name Type Req Description
Font string no The font applied to the grid, as the name of the
font or as a reference to the Self attribute of a
font object.
10.2.8 Motion Preset
InDesign includes a number of motion presets—default animation settings that can be applied to
page items in an InDesign document. For more on motion presets, refer to the InDesign online
documentation.
Schema Example 10. MotionPreset
MotionPreset_Object = element MotionPreset {
attribute Self { xsd:string },
IDML File Format Specification
56 IDML File Reference: designmap.xml
attribute Name { xsd:string }?,
attribute EditLocked { xsd:boolean }?,
attribute DeleteLocked { xsd:boolean }?,
attribute NameLocked { xsd:boolean }?,
element Properties {
element Contents { xsd:string }?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Table 13. MotionPreset Properties Represented as Attributes
Name Type Req Description
DeleteLocked boolean no If true, the motion preset cannot be deleted.
EditLocked boolean no If true, the motion preset cannot be edited.
Name string no The name of the motion preset.
NameLocked boolean no If true, the name of the motion preset cannot be
edited.
Table 14. MotionPreset Properties Represented as Elements
Name Type Req Description
Contents string no The motion preset de"nition. This is the XML
representation of the motion preset as de"ned by
Adobe Flash, packaged inside a CDATA section.
More details can be found at the URL http://
www.adobe.com/devnet/$ash/learning_guide/
animation/. Developers should entity encode
and use the contents of the motion preset XML
"le in the folder presets/motion presets that cor-
responds to the speci"c motion preset that they
are adding to the document.
10.2.9 Condition
In Design documents can feature conditional text–text that is only visible in the layout when a
speci"c state is enabled. The <Condition> element controls the appearance of the text governed by
a condition.
Schema Example 11. Condition
Condition_Object = element Condition {
attribute Self { xsd:string },
attribute Name { xsd:string },
attribute IndicatorMethod { ConditionIndicatorMethod_EnumValue }?,
attribute UnderlineIndicatorAppearance { ConditionUnderlineIndicatorAppearance_
EnumValue }?,
attribute Visible { xsd:boolean }?,
element Properties {
IDML File Format Specification
57 IDML File Reference: designmap.xml
}?
element IndicatorColor { InDesignUIColorType_TypeDef }?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}
?
}
Table 15. Condition Properties Represented as Attributes
Name Type Req Description
Indicator Method Condition-
Indicator Method_
Enum Value
no The condition indicator method.
Name string yes The name of the Condition.
Underline-
Indicator-
Appearance
Condition-
Underline-
Indicator-
Appearance_Enum-
Value
no The condition underline indicator appearance.
Visible boolean no If true, the Condition is visible.
Table 16. Condition Properties Represented as Elements
Name Type Req Description
Indicator Color list of 3 doubles
or In Design-
UIColor Type_Type-
Def
no The color for the condition indicator, specified
either as an array of three doubles, each in the
range 0 to 255 and representing R, G, and B val-
ues, or as a UI color.
10.2.10 ConditionSet
Schema Example 12. ConditionSet
ConditionSet_Object = element ConditionSet {
attribute Self { xsd:string },
attribute Name { xsd:string },
element Properties {
element SetConditions { element VisibilityPair { VisibilityPair_TypeDef }*
}?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Table 17. Condition Properties Represented as Elements
Name Type Req Description
SetConditions Visibility Pair_
TypeDef
no List of conditions and visibilities in the set.
IDML File Format Specification
58 IDML File Reference: designmap.xml
10.2.11 LinkedStoryOption
Schema Example 13. LinkedStoryOption
LinkedStoryOption_Object = element LinkedStoryOption {
attribute UpdateWhileSaving { xsd:boolean }?,
attribute WarnOnUpdateOfEditedStory { xsd:boolean }?,
attribute RemoveForcedLineBreaks { xsd:boolean }?
}
Table 18. LinkedStoryOption Properties Represented as Attributes
Name Type Req Description
Update While Saving boolean no If true, the linked story will be updated while
saving.
Warn On Update Of-
Edited Story
boolean no If true, a warning will be shown if the update
link operation will override local edits.
Remove Forced Line-
Breaks
boolean no If true, forced line breaks will be removed dur-
ing story creation or update.
10.2.12 TaggedPDFPreference
Schema Example 14. TaggedPDFPreference
TaggedPDFPreference_Object = element TaggedPDFPreference {
attribute StructureOrder { TaggedPDFStructureOrderOptions_EnumValue }?
}
Table 19. TaggedPDFPReferenceStructureOrder Properties Represented as Elements
Name Type Req Description
StructureOrder Tagged PDF-
Structure Order-
Options_Enum Value
no Can be UseArticles (use the order de"ned in
the Articles panel) or UseXmlStructure (use
the order of elements in the XML structure).
IDML Example 10. TaggedPDFPReferenceStructureOrder
<TaggedPDFPreferenceStructureOrder="UseXMLStructure"/>
10.2.13 MetadataPacketPreference
Schema Example 15. MetadataPacketPreference
MetadataPacketPreference_Object = element MetadataPacketPreference {
element Properties {
element Contents { xsd:string }?
}
?
}
Table 20. MetadataPacketPreference Properties Represented as Elements
Name Type Req Description
Contents String no The metadata packet for the document.
IDML File Format Specification
59 IDML File Reference: designmap.xml
10.2.14 WatermarkPreference
WatermarkPreference_Object = element WatermarkPreference {
attribute WatermarkVisibility { xsd:boolean }?,
attribute WatermarkDoPrint { xsd:boolean }?,
attribute WatermarkDrawInBack { xsd:boolean }?,
attribute WatermarkText { xsd:string }?,
attribute WatermarkFontFamily { xsd:string }?,
attribute WatermarkFontStyle { xsd:string }?,
attribute WatermarkFontPointSize { xsd:int }?,
attribute WatermarkOpacity { xsd:int }?,
attribute WatermarkRotation { xsd:int }?,
attribute WatermarkHorizontalPosition { WatermarkHorizontalPositionEnum_
EnumValue }?,
attribute WatermarkHorizontalOffset { xsd:double }?,
attribute WatermarkVerticalPosition { WatermarkVerticalPositionEnum_EnumValue
}?,
attribute WatermarkVerticalOffset { xsd:double }?,
element Properties {
element WatermarkFontColor { InDesignUIColorType_TypeDef }?
}
?
}
Table 21. WatermarkPreference Properties Represented as Attributes
Name Type Req Description
Watermark-
Visibility
boolean no If true, the watermark is visible.
Watermark Do Print boolean no If true, the watermark will print.
Watermark Draw In-
Back
boolean no If true, the watermark draws behind all page
items.
WatermarkText string no The text of the watermark.
Water mark Font-
Family
string no The font family of the watermark text.
Water mark Font-
Style
string no The font style of the watermark text.
Water mark Font-
Point Size
int no The point size of the watermark text.
Watermark Opacity int no The opacity of the watermark text.
Watermark Rotation int no The rotation of the watermark.
Water mark-
Horizontal-
Position
Water mark-
Horizontal-
PositionEnum_
EnumValue
no The horizontal origin of the watermark. Can
be WatermarkHCenter, WatermarkHLeft, or
WatermarkHRight.
Water mark-
Horizontal Offset
double no The offset of the watermark from its horizontal
origin.
IDML File Format Specification
60 IDML File Reference: designmap.xml
Name Type Req Description
Water mark-
Vertical Position
Water mark-
Vertical-
PositionEnum_
EnumValue
no The vertical origin of the watermark. Can be
WatermarkVCenter, WatermarkVLeft, or
WatermarkVRight.
Water mark-
VerticalOffset
double no The offset of the watermark from its vertical
origin.
Table 22. WatermarkPreference Properties Represented as Elements
Name Type Req Description
Water mark Font-
Color
list of 3 doubles
or In Design-
UIColor Type_Type-
Def
no The color for the watermark, specified either as
an array of three doubles, each in the range 0 to
255 and representing R, G, and B values, or as a
UI color.
10.2.15 Conditional Text Preference
Schema Example 16. Conditional Text Preference
ConditionalTextPreference_Object = element ConditionalTextPreference {
attribute ShowConditionIndicators { ConditionIndicatorMode_EnumValue }?,
attribute ActiveConditionSet { xsd:string }?
}
Table 23. Conditional Text Preference Properties Represented as Attributes
Name Type Req Description
Show Condition-
Indicators
boolean no If true, display the condition indicators in the
user interface.
Active Condition-
Set
string no A reference to the active condtion set, as the
value of the Self attribute of the <Condition>
element.
10.2.16 Text Variable
A text variable is an item you insert in text that varies according to the context. For example, the
Last Page Number variable displays the page number of the last page of the document. If you add
or remove pages, the variable is updated accordingly. The text variables in an IDML document
are de"ned by <Text Variable> elements. Text variables come in a variety of types: <Custom Text-
Variable Preference>, <File Name Variable Preference>, <Page Number Variable Preference>,
<Chapter Number Variable Preference>, <Date Variable Preference>, <Match Character-
Style Preference>, <Match Paragraph Style Preference>, or <Caption Metadata Variable-
Preference>element.
The type of a text variable is de"ned by the Variable Type attribute of the <Text Variable>
element, and the de"nition of the text variable is speci"ed in a child element of the <Text-
Variable> element.
IDML File Format Specification
61 IDML File Reference: designmap.xml
A <Text Variable> element stored in the <Document> element is only the de"nition of the text
variable. Text variable instances appear in <Story> elements, and all of the formatting of the text
variable instance is de"ned there, not in the <Document> element. For more on text variables, refer
to the In Design online help.
Schema Example 17. Text Variable
TextVariable_Object = element TextVariable {
attribute Self { xsd:string },
attribute Name { xsd:string },
attribute VariableType { VariableTypes_EnumValue }?,
(
CustomTextVariablePreference_Object?&
FileNameVariablePreference_Object?&
PageNumberVariablePreference_Object?&
ChapterNumberVariablePreference_Object?&
DateVariablePreference_Object?&
MatchCharacterStylePreference_Object?&
MatchParagraphStylePreference_Object?&
CaptionMetadataVariablePreference_Object?
)
}
Table 24. Text Variable Properties Represented as Attributes
Name Type Req Description
Name string no The name of the text variable.
Variable Type Variable Types_
Enum Value
no The Text Variable type. Can be Custom Text-
Type (Custom text variable), File Name Type
(File name variable), Last Page Number Type
(Last page number variable), Chapter Number-
Type (Chapter number variable), Output Date-
Type (Output date variable), Creation Date-
Type (Creation date variable), Modification-
Date Type (Modi"cation date variable),
Match Character Style Type (Running header
character style variable), Match Paragraph-
Style Type (Running header paragraph style
variable), Xref Page Number Type (Cross ref-
erence page number type), Xref Chapter-
Number Type (Cross reference chapter number
type), or Live Caption Type (Metadata caption
type).
Text variables share some attributes, as shown in the following table.
Table 25. Common Text Variable Properties Represented as Attributes
Name Type Req Description
Text Before string no Text that appears before the text variable
instance.
Text After string no Text that appears a%er a text variable instance.
IDML File Format Specification
62 IDML File Reference: designmap.xml
Schema Example 18. Custom Text Variable Preference
CustomTextVariablePreference_Object = element CustomTextVariablePreference {
element Properties {
element Contents {
(string_type, xsd:string ) |
(enum_type, SpecialCharacters_EnumValue ) |
(object_type, xsd:string )
}?
}
?
}
Table 26. Custom Text Variable Preference Properties Represented as Elements
Name Type Req Description
Contents Special-
Characters_ Enum-
Value or string
no The text contents of the Custom Text Variable-
Preference.
Schema Example 19. File Name Variable Preference
FileNameVariablePreference_Object = element FileNameVariablePreference {
attribute TextBefore { xsd:string }?,
attribute IncludePath { xsd:boolean }?,
attribute IncludeExtension { xsd:boolean }?,
attribute TextAfter { xsd:string }?
}
Table 27. File Name Variable Preference Properties Represented as Attributes
Name Type Req Description
Include Path boolean no If true, include the "le path in the text variable
instances.
Include Extension boolean no If true, include the "le extension in the text vari-
able instances.
Schema Example 20. Page Number Variable Preference
PageNumberVariablePreference_Object = element PageNumberVariablePreference {
attribute TextBefore { xsd:string }?,
attribute Format { VariableNumberingStyles_EnumValue }?,
attribute TextAfter { xsd:string }?,
attribute Scope { VariableScopes_EnumValue }?
}
Table 28. Page Number Variable Preference Properties Represented as Attributes
Name Type Req Description
Format Variable-
Numbering Styles_
Enum Value
no The format of the page number. Can be
Current, Arabic, Upper Roman, Lower Roman,
Upper Letters, Lower Letters, Kanji, Full-
Width Arabic, Single Leading Zeros, or
Double Leading Zeros.
Scope Variable Scopes_
Enum Value
no The scope of the page number variable. Can be
Document Scope or Section Scope.
IDML File Format Specification
63 IDML File Reference: designmap.xml
Schema Example 21. Chapter Number Variable Preference
ChapterNumberVariablePreference_Object = element ChapterNumberVariablePreference {
attribute TextBefore { xsd:string }?,
attribute Format { VariableNumberingStyles_EnumValue }?,
attribute TextAfter { xsd:string }?
}
Table 29. Chapter Number Variable Preference Properties Represented as Attributes
Name Type Req Description
Format Variable-
Numbering Styles_
Enum Value
no The format of the chapter number. Can be
Current, Arabic, Upper Roman, Lower Roman,
Upper Letters, Lower Letters, Kanji, Full-
Width Arabic, Single Leading Zeros, or
Double Leading Zeros.
Schema Example 22. Date Variable Preference
DateVariablePreference_Object = element DateVariablePreference {
attribute TextBefore { xsd:string }?,
attribute Format { xsd:string }?,
attribute TextAfter { xsd:string }?
}
Table 30. Date Variable Preference Properties Represented as Attributes
Name Type Req Description
Format string no The format of the date variable.
Schema Example 23. Match Character Style Preference
MatchCharacterStylePreference_Object = element MatchCharacterStylePreference {
attribute TextBefore { xsd:string }?,
attribute TextAfter { xsd:string }?,
attribute AppliedCharacterStyle { xsd:string }?,
attribute SearchStrategy { SearchStrategies_EnumValue }?,
attribute ChangeCase { ChangeCaseOptions_EnumValue }?,
attribute DeleteEndPunctuation { xsd:boolean }?
}
Table 31. Match Character Style Preference Properties Represented as Attributes
Name Type Req Description
Applied Character-
Style
string no A reference to the character style applied to the
text variable (as the value of the Self attribute
of the <Character Style>).
Change Case Change Case-
Options_Enum Value
no Change the case of the text variable. Can be
Uppercase, Lowercase, Titlecase, or
Sentencecase.
Delete End-
Punctuation
boolean no If true, delete any punctuation at the end of the
text variable.
Search Strategy Search Strategies_
Enum Value
no The search strategy applied to the text variable.
Can be First On Page or Last On Page.
IDML File Format Specification
64 IDML File Reference: designmap.xml
Schema Example 24. Match Paragraph Style Preference
MatchParagraphStylePreference_Object = element MatchParagraphStylePreference {
attribute TextBefore { xsd:string }?,
attribute TextAfter { xsd:string }?,
attribute AppliedParagraphStyle { xsd:string }?,
attribute SearchStrategy { SearchStrategies_EnumValue }?,
attribute ChangeCase { ChangeCaseOptions_EnumValue }?,
attribute DeleteEndPunctuation { xsd:boolean }?
}
Table 32. Match Paragraph Style Preference Properties Represented as Attributes
Name Type Req Description
Applied Character-
Style
string no A reference to the paragraph style applied to the
text variable (as the value of the Self attribute
of the <Paragraph Style>).
Change Case Change Case-
Options_Enum Value
no Change the case of the text variable. Can be
Uppercase, Lowercase, Titlecase, or
Sentencecase.
Delete End-
Punctuation
boolean no If true, delete any punctuation at the end of the
text variable.
Search Strategy Search Strategies_
Enum Value
no The search strategy applied to the text variable.
Can be First On Page or Last On Page.
Schema Example 25. CaptionMetadataVariablePreference
CaptionMetadataVariablePreference_Object = element
CaptionMetadataVariablePreference {
attribute TextBefore { xsd:string }?,
attribute MetadataProviderName { xsd:string }?,
attribute TextAfter { xsd:string }?
}
Table 33. Match Paragraph Style Preference Properties Represented as Attributes
Name Type Req Description
Meta Data Provider-
Name
string no The metadata provider name for the variable (see
table following).
Table 34. MetaData Provider Names
Attribute Value Description
"$ID/#LinkInfoNameStr" Uses the "le name of the linked "le as the caption metadata
value.
"$ID/#LinkInfoStatusStr" Uses the link status as the caption metadata value.
"$ID/#LinkInfoPageNumberStr" Uses the page number on which the linked "le is placed as the
caption metadata value.
"$ID/#LinkInfoSizeStr" Uses the size of the linked "le as the caption metadata value.
"$ID/#LinkInfoColorSpaceStr" Uses the color space of the linked "le as the caption metadata
value.
IDML File Format Specification
65 IDML File Reference: designmap.xml
"$ID/#LinkInfoColorProfileStr" Uses the ICC pro"le of the linked "le as the caption metadata
value.
"$ID/#LinkInfoLayerOverrideStr" Uses the Layer Overrides information for the linked "le as the
caption metadata value.
"$ID/#LinkInfoPPIStr" Uses the actual PPI of the linked "le as the caption metadata
value.
"$ID/#LinkInfoEffectivePPIStr" Uses the e&ective PPI of the linked "le as the caption meta-
data value.
"$ID/#LinkInfoTransparencyStr" Uses the transparency information (Yes/No) of the linked "le
as the caption metadata value.
"$ID/#LinkInfoPixelSizeStr" Uses the dimensions of the linked "le as the caption metadata
value.
"$ID/#LinkInfoScaleStr" Uses the scaling percentage of the linked "le as the caption
metadata value.
"$ID/#LinkInfoSkewStr" Uses the skew angle of the linked "le as the caption metadata
value.
"$ID/#LinkInfoRotationStr" Uses the rotation angle of the linked "le as the caption meta-
data value.
"$ID/#LinkInfoLayerNameStr" Uses the layer name on which the linked "le is placed as the
caption metadata value.
"$ID/#LinkInfoFullPathStr" Uses the full path of the linked "le as the caption metadata
value.
"$ID/#LinkInfoXMPApertureStr" Uses the XMP aperture information of the linked "le as the
caption metadata value. This corresponds to the "FNum-
ber" element in the XMP namespace "http://ns.adobe.com/
exif/1.0/" in the linked "le's XMP packet.
"$ID/#LinkInfoXMPShutterStr" Uses the XMP exposure time information of the linked "le as
the caption metadata value. This corresponds to the "Expo-
sureTime " element in the XMP namespace "http://ns.adobe.
com/exif/1.0/" in the linked "le's XMP packet.
"$ID/#LinkInfoXMPISOSpeedStr" Uses the XMP ISO speed rating of the linked "le as the cap-
tion metadata value. This corresponds to the "ISOSpeedRat-
ings " element in the XMP namespace "http://ns.adobe.com/
exif/1.0/" in the linked "le's XMP packet.
"$ID/#LinkInfoXMPFocalLengthStr" Uses the XMP focal length of the linked "le as the caption
metadata value. This corresponds to the "FocalLength " ele-
ment in the XMP namespace "http://ns.adobe.com/exif/1.0/"
in the linked "le's XMP packet.
"$ID/#LinkInfoXMPCaptureDateStr" Uses the XMP capture date/time of the linked "le as the cap-
tion metadata value. This corresponds to the "DateTimeOrigi-
nal " element in the XMP namespace "http://ns.adobe.com/
exif/1.0/" in the linked "le's XMP packet.
"$ID/#LinkInfoXMPCameraStr" Uses the XMP camera model information of the linked "le as
the caption metadata value. This corresponds to the "Model"
element in the XMP namespace "http://ns.adobe.com/
ti&/1.0/" in the linked "le's XMP packet.
IDML File Format Specification
66 IDML File Reference: designmap.xml
"$ID/#LinkInfoXMPLensStr" Uses the XMP lens information of the linked "le as the cap-
tion metadata value. This corresponds to the "Lens" element
in the XMP namespace "http://ns.adobe.com/exif/1.0/aux/" in
the linked "le's XMP packet.
"$ID/#LinkInfoUsedSwatchesStr" Uses the list of swatches used by the linked "le as the caption
metadata value.
"$ID/#LinkInfoXMPCreditStr" Uses the XMP credits information of the linked "le as the
caption metadata value. This corresponds to the "Credit"
element in the XMP namespace "http://ns.adobe.com/photo-
shop/1.0/" in the linked "le's XMP packet.
"$ID/#LinkInfoXMPHeadlineStr" Uses the XMP headline information of the linked "le as the
caption metadata value. This corresponds to the "Headline"
element in the XMP namespace "http://ns.adobe.com/photo-
shop/1.0/" in the linked "le's XMP packet.
"$ID/#LinkInfoXMPLocationStr" Uses the XMP location information of the linked "le as the
caption metadata value. This corresponds to the "Location"
element in the XMP namespace "http://iptc.org/std/Iptc4x-
mpCore/1.0/xmlns/" in the linked "le's XMP packet.
"$ID/#LinkInfoXMPLocationCityS
tr"
Uses the XMP city information of the linked "le as the cap-
tion metadata value. This corresponds to the "City" element in
the XMP namespace "http://ns.adobe.com/photoshop/1.0/" in
the linked "le's XMP packet.
"$ID/#LinkInfoXMPLocation-
StateStr"
Uses the XMP state information of the linked "le as the cap-
tion metadata value. This corresponds to the "State" element
in the XMP namespace "http://ns.adobe.com/photoshop/1.0/"
in the linked "le's XMP packet.
"$ID/#LinkInfoXMPLocation-
CountryStr"
Uses the XMP country information of the linked "le as the
caption metadata value. This corresponds to the "Country"
element in the XMP namespace "http://ns.adobe.com/photo-
shop/1.0/" in the linked "le's XMP packet.
"$ID/#LinkInfoFormatTypeStr" Uses the "le format of the linked "le as the caption metadata
value.
"$ID/#LinkInfoLinkTypeStr" Uses the link type of the linked "le as the caption metadata
value.
"$ID/#LinkInfoXMPTitleStr" Uses the XMP document title information of the linked
"le as the caption metadata value. This corresponds to the
"title" element in the XMP namespace "http://purl.org/dc/ele-
ments/1.1/" in the linked "le's XMP packet.
"$ID/#LinkInfoXMPAuthorStr" Uses the XMP document author information of the linked
"le as the caption metadata value. This corresponds to the
"creator" element in the XMP namespace "http://purl.org/dc/
elements/1.1/" in the linked "le's XMP packet.
"$ID/#LinkInfoXMPDescriptionStr" Uses the XMP description information of the linked "le as
the caption metadata value. This corresponds to the "descrip-
tion" element in the XMP namespace "http://purl.org/dc/ele-
ments/1.1/" in the linked "le's XMP packet.
"$ID/#LinkInfoXMPKeywordsStr" Uses the XMP keywords of the linked "le as the caption
metadata value. This corresponds to the "subject" element in
the XMP namespace "http://purl.org/dc/elements/1.1/" in the
linked "le's XMP packet.
IDML File Format Specification
67 IDML File Reference: designmap.xml
"$ID/#LinkInfoXMPRatingStr" Uses the XMP rating of the linked "le as the caption meta-
data value. This corresponds to the "Rating" element in the
XMP namespace "http://ns.adobe.com/xap/1.0/" in the linked
"le's XMP packet.
"$ID/#LinkInfoXMPCreatorToolStr" Uses the XMP creator tool information of the linked "le as
the caption metadata value. This corresponds to the "Creator-
Tool" element in the XMP namespace "http://ns.adobe.com/
xap/1.0/" in the linked "le's XMP packet.
"$ID/#LinkInfoXMPCreateDateStr" Uses the XMP creation date-time of the linked "le as the cap-
tion metadata value. This corresponds to the "CreateDate" ele-
ment in the XMP namespace "http://ns.adobe.com/xap/1.0/"
in the linked "le's XMP packet.
"$ID/#LinkInfoXMPCopyrightStr" Uses the XMP copyright information of the linked "le as the
caption metadata value. This corresponds to the "Copyright"
element in the XMP namespace "http://ns.adobe.com/xap/1.0/
rights/" in the linked "le's XMP packet.
"$ID/#LinkInfoPlaceDateStr" Uses the last imported date-time of the linked "le as the cap-
tion metadata value.
"$ID/#LinkInfoModDateStr" Uses the modi"cation date-time of the linked "le as the cap-
tion metadata value.
"$ID/#LinkInfoChildLinksStr" Uses the number of child links of the linked "le as the caption
metadata value.
"$ID/#LinkInfoFolder0Str" Uses the folder name in which the linked "le exists as the
caption metadata value. Blank if it is the root folder.
"$ID/#LinkInfoFolder1Str" Uses the folder name of the parent of the folder in which the
linked "le exists as the caption metadata value. Blank if it is
the root folder, or if path is too short to identify this folder.
"$ID/#LinkInfoFolder2Str" Uses the folder name of the second level parent of the folder
in which the linked "le exists as the caption metadata value.
Blank if it is the root folder, or if path is too short to identify
this folder.
"$ID/#LinkInfoFolder3Str" Uses the folder name of the third level parent of the folder
in which the linked "le exists as the caption metadata value.
Blank if it is the root folder, or if path is too short to identify
this folder.
"$ID/#LinkInfoFolder4Str" Uses the folder name of the fourth level parent of the folder
in which the linked "le exists as the caption metadata value.
Blank if it is the root folder, or if path is too short to identify
this folder.
"$ID/#LinkInfoFolder5Str" Uses the folder name of the "%h level parent of the folder in
which the linked "le exists as the caption metadata value.
Blank if it is the root folder, or if path is too short to identify
this folder.
"$ID/#LinkInfoFolder6Str" Uses the folder name of the sixth level parent of the folder
in which the linked "le exists as the caption metadata value.
Blank if it is the root folder, or if path is too short to identify
this folder.
IDML File Format Specification
68 IDML File Reference: designmap.xml
"$ID/#LinkInfoFolder7Str" Uses the folder name of the seventh level parent of the folder
in which the linked "le exists as the caption metadata value.
Blank if it is the root folder, or if path is too short to identify
this folder.
"$ID/#LinkInfoFolder8Str" Uses the folder name of the eighth level parent of the folder
in which the linked "le exists as the caption metadata value.
Blank if it is the root folder, or if path is too short to identify
this folder.
"$ID/#LinkInfoVolumeNameStr" Uses the drive or root volume name of the linked "le as the
caption metadata value.
"$ID/#LinkInfoStoryModStr" Uses the story modi"cation status of the linked story as the
caption metadata value.
"$ID/#LinkInfoStoryNote-
CountDesc"
Uses the number of notes in the linked story as the caption
metadata value.
"$ID/#LinkInfoStoryTrack-
ChangesDesc"
Uses the track changes setting (on or o&) of the linked story
as the caption metadata value.
"$ID/#LinkInfoStoryLabelDesc" Uses the label of the linked story as the caption metadata
value.
"$ID/#LinkInfoStoryAssignment-
Desc"
Uses the name of the assignment to which the linked story
belongs as the caption metadata value.
"$ID/#LinkInfoStoryAssigned-
ToDesc"
Uses the user name to whom the assignment containing the
linked story is assigned as the caption metadata value.
"$ID/#LinkInfoWorkgroupStatus-
Str"
Uses the Version Cue status of the linked "le as the caption
metadata value.
"$ID/#LinkInfoWorkgroupUser Str" Uses the Version Cue user name of the linked "le as the cap-
tion metadata value.
IDML Example 11. Text Variable
<Text Variable Self="d Text Variablen Last Page Number" Name="Last Page Number"
Variable Type="Last Page Number Type">
<Page Number Variable Preference
Self="d Text Variablen Last Page Number Page Number Variable Preference1"
Text Before="" Format="Current" Text After="" Scope="Section Scope"/>
</Text Variable>
10.2.17 Layer
In Design documents can contain layers, which are transparent planes on which you can arrange
the page items in your layout. Layers can be used to control the stacking order of objects in a
document, but they can also be used to organize objects in a document. Layers in an In Design
document are document-wide. In IDML, <Layer> elements appear inside the <Document> element
in the designmap.xml "le.
For more on layers, refer to the In Design online help.
Schema Example 26. Layer
Layer_Object = element Layer {
attribute Self { xsd:string },
attribute Name { xsd:string }?,
attribute Visible { xsd:boolean }?,
IDML File Format Specification
69 IDML File Reference: designmap.xml
attribute Locked { xsd:boolean }?,
attribute IgnoreWrap { xsd:boolean }?,
attribute ShowGuides { xsd:boolean }?,
attribute LockGuides { xsd:boolean }?,
attribute UI { xsd:boolean }?,
attribute Expendable { xsd:boolean }?,
attribute Printable { xsd:boolean }?,
element Properties {
element LayerColor { InDesignUIColorType_TypeDef }?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Table 35. Layer Properties Represented as Attributes
Name Type Req Description
Expendable boolean no If true, the layer can be deleted.
Ignore Wrap boolean no If true, objects on the layer ignore text wrap.
Locked boolean no If true, the layer is locked.
Lock Guides boolean no If true, the guides on the layer are locked.
Name string no The name of the layer.
Printable boolean no If true, the objects on the layer can be printed.
Show Guides boolean no If true, show the guides assigned to the layer.
Visible boolean no If true, the layer is visible in the user interface.
Table 36. Layer Properties Represented as Elements
Name Type Req Description
Layer Color InDesign UI Color-
Type_Type Def
no The color of the layer, speci"ed either as an
array of three doubles, each in the range 0 to 255
and representing R, G, and B values, or as an
In Design UIColor Type enumeration.
IDML Example 12. Layer
<Layer Self="ub5" Name="Layer 1" Visible="true" Locked="false" Ignore Wrap="false"
Show Guides="true" Lock Guides="false" UI="true" Expendable="true" Printable="true">
<Properties><Layer Color type="enumeration">Light Blue</Layer Color></Properties>
</Layer>
10.2.18 Section
Page ranges in an In Design document can be broken up into sections. Section properties control
the page numbering system in use in the pages of the section. For more on sections, refer to the
In Design online help.
Schema Example 27. Section
Section_Object = element Section {
IDML File Format Specification
70 IDML File Reference: designmap.xml
attribute Self { xsd:string },
attribute Length { xsd:int }?,
attribute Name { xsd:string }?,
attribute AlternateLayoutLength { xsd:int }?,
attribute AlternateLayout { xsd:string }?,
attribute Pagination { PaginationOption_EnumValue }?,
attribute PaginationMaster { xsd:string }?,
attribute ContinueNumbering { xsd:boolean }?,
attribute IncludeSectionPrefix { xsd:boolean }?,
attribute PageNumberStart { xsd:int {minInclusive="1" maxInclusive="999999"} }?,
attribute Marker { xsd:string }?,
attribute PageStart { xsd:string }?,
attribute SectionPrefix { xsd:string }?,
element Properties {
element PageNumberStyle {
(enum_type, PageNumberStyle_EnumValue ) |
(string_type, xsd:string )
}?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Note: In Design features a variety of approaches to numbering and cross references; section
numbering can interact with special characters, text variables, and paragraph numbering.
Table 37. Section Properties Represented as Attributes
Name Type Req Description
Continue Numbering boolean no If true, continue page numbering from the pre-
vious section in the document.
Include Section-
Prefix
boolean no If true, include the value of the Section Pre"x
attribute in the nameo of the section.
Length int no The number of pages in the section.
Marker string no The marker character for the section.
Name string no The name of the section.
Page Number Start int no The starting page number of the section. Range:
1 to 999999.
Page Number Style Page Number_Enum-
Style
no The page numbering style applied to the section.
Can be Upper Roman, Lower Roman, Upper-
Letters, Lower Letters, Arabic, Kanji,
Double Leading Zeros, Triple Leading Zeros,
Arabic Alif Ba Tah, Arabic Abjad, Hebrew-
Biblical, or Hebrew Non Standard.
Page Start string no A reference to the page that starts the section (as
the value of the Self attribute of the <Page>
element).
Section Prefix string no The pre"x for the section.
IDML File Format Specification
71 IDML File Reference: designmap.xml
Name Type Req Description
AlternateLayout-
Length
int no The number of pages in the alternate layout sec-
tion.
AlternateLayout string no The alternate layout name for a set of pages.
Pagination PaginationOption_
EnumValue
no The pagination option for this section for adding
and removing pages in HTML5.
PaginationMaster string no The master to apply when pages are added in
HTML5.
10.2.19 DocumentUser
Schema Example 28. DocumentUser
DocumentUser_Object = element DocumentUser {
attribute Self { xsd:string },
attribute UserName { xsd:string },
element Properties {
element UserColor { InCopyUIColorType_TypeDef }?
}
?
}
Table 38. DocumentUser Properties Represented as Attributes
Name Type Req Description
UserName string no The name of the user.
Table 39. DocumentUser Properties Represented as Elements
Name Type Req Description
User Color list of doubles
or InDesign UI-
Color Type_Type Def
no The color for the user, speci"ed either as an
array of three doubles, each in the range 0 to 255
and representing R, G, and B values, or as an
In Design UIColor Type enumeration.
10.2.20 Cross Reference Format
In Design documents can contain cross references. Cross references are made up of <Building-
Block> elements.
Schema Example 29. Cross Reference Format
CrossReferenceFormat_Object = element CrossReferenceFormat {
attribute Self { xsd:string },
attribute Name { xsd:string }?,
attribute AppliedCharacterStyle { xsd:string }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
IDML File Format Specification
72 IDML File Reference: designmap.xml
?
,
(
)
}
BuildingBlock_Object*
Table 40. Cross Reference Format Properties Represented as Attributes
Name Type Req Description
Applied Character-
Style
string no A reference to the character style applied to the
cross reference format (as the value of the Self
attribute of the <Character Style>).
Name string yes The name of the cross reference format.
Cross references are made up of “building blocks”—elements that specify text and text formatting
that can be added to a cross reference (for more on building blocks, refer to the In Design
documentation). The <Cross Reference Format> element can contain multiple <Building Block>
elements.
Schema Example 30. Building Block
BuildingBlock_Object = element BuildingBlock {
attribute Self { xsd:string },
attribute BlockType { BuildingBlockTypes_EnumValue },
attribute AppliedCharacterStyle { xsd:string }?,
attribute CustomText { xsd:string }?,
attribute AppliedDelimiter { xsd:string }?,
attribute IncludeDelimiter { xsd:boolean }?
}
Table 41. Building Block Properties Represented as Attributes
Name Type Req Description
Applied Character-
Style
string no A reference to the character style applied to
the cross reference format (as the value of the
Self attribute of the <Character Style>).
A reference to the character style
applied to the text variable (as the
value of the Self attribute of the
<Character Style>).
Applied Delimiter string no The delimiter character of the building block.
Block Type Building Block-
Types _Enum Value
no The type of the building block. Can be
Custom String Building Block, File Name-
Building Block, Chapter Number Building-
Block, Page Number Building Block, Full-
Paragraph Building Block, Paragraph-
Number Building Block, Paragraph Text-
Building Block, or Bookmark Name Building-
Block.
Custom Text string no The text of the building block. Valid only when
the Block Type is Custom String Building-
Block.
IDML File Format Specification
73 IDML File Reference: designmap.xml
Name Type Req Description
Include Delimiter boolean no If true, include the delimiter character in the
building block instances.
IDML Example 13. Building Block
<Building Block Self="u8b Building Block1" Block Type="Paragraph Number Building Block"
Applied Character Style="n" Custom Text="$ID/" Applied Delimiter="$ID/" Include-
Delimiter="false"/>
10.2.21 Index
An index in an InDesign document.
Schema Example 31. Index
Index_Object = element Index {
attribute Self { xsd:string },
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
Topic_Object*
)
}
Topic
A topic in an index.
Schema Example 32. Topic
Topic_Object = element Topic {
attribute Self { xsd:string },
attribute SortOrder { xsd:string }?,
attribute Name { xsd:string },
(
Topic_Object*&
CrossReference_Object*
)
}
Table 42. Topic Properties Represented as Attributes
Name Type Req Description
Name string yes The name of the topic.
SortOrder string no The indexing sort order of the topic.
IDML File Format Specification
74 IDML File Reference: designmap.xml
CrossReference
A cross reference topic in the document’s index (not a cross reference text variable).
Schema Example 33. CrossReference
CrossReference_Object = element CrossReference {
attribute Self { xsd:string },
attribute ReferencedTopic { xsd:string }?,
attribute CrossReferenceType { CrossReferenceType_EnumValue }?,
attribute CustomTypeString { xsd:string }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Table 43. Cross Reference Properties Represented as Attributes
Name Type Req Description
CrossReference-
Type
Cross Reference-
Type_EnumValue
no The type of the cross reference. Can be Custom-
Cross Reference, Custom Cross Reference-
After, Custom Cross ReferenceBefore, See,
See Also, See Also Herein, See Herein, or
See Or Also Bracket.
Custom Type String string no The string for a custom cross reference (used
when CrossReferenceType is Custom Cross-
Reference, Custom Cross Reference After,
or Custom Cross ReferenceBefore).
Referenced Topic string no The topic of this cross reference.
10.2.22 Hyperlinks
You can create hyperlinks in an In Design document so that when you export to PDF, a viewer can
click a link to jump to other locations in the same PDF document, to other PDF documents, or to
web sites. Hyperlinks are made up of a hyperlink source and a hyperlink destination, and various
display/formatting options.
A hyperlink source is hyperlinked text, a hyperlinked text frame, or a hyperlinked graphics
frame. A hyperlink destination is the URL, position in text, or page to which a hyperlink jumps.
A source can jump to only one destination, but any number of sources can jump to the same
destination.
Schema Example 34. Hyperlink
Hyperlink_Object = element Hyperlink {
attribute Self { xsd:string },
attribute Name { xsd:string }?,
attribute Source { xsd:string },
attribute Visible { xsd:boolean }?,
attribute Highlight { HyperlinkAppearanceHighlight_EnumValue }?,
attribute Width { HyperlinkAppearanceWidth_EnumValue }?,
IDML File Format Specification
75 IDML File Reference: designmap.xml
attribute BorderStyle { HyperlinkAppearanceStyle_EnumValue }?,
attribute Hidden { xsd:boolean }?,
attribute DestinationUniqueKey { xsd:int }?,
element Properties {
element BorderColor { InDesignUIColorType_TypeDef }?&
element Destination {
(element FileName { string_type, xsd:string },
element Volumn { string_type, xsd:string },
element DirectoryId { long_type, xsd:int },
element DataLinkClassId { long_type, xsd:int },
element DestinationUid { long_type, xsd:int }) |
(object_type, xsd:string )
}?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Table 44. Hyperlink Properties Represented as Attributes
Name Type Req Description
Name string yes The name of the hyperlink.
Source string yes A reference to the source of the hyperlink (as the
value of the Self attribute of the element).
Visible boolean no If true, they hyperlink will be visible in the
exported PDF.
Highlight Hyperlink-
Appearance High-
light_Enum Value
no The highight of the hyperlink. Can be None,
Invert, Outline or Inset.
Width Hyperlink-
Appearance Width_
Enum Value
The width of the stroke applied to the hyperlink
Can be Thin, Medium, or Thick.
Border Style Hyperlink-
Appearance Style_
Enum Value
no The border style of the hyperlink. Can be Solid
or Dashed.
Hidden boolean no If true, the hyperlink is hidden in the output
PDF.
Destination-
Unique Key
int no A unique key identifying the hyperlink destina-
tion.
Hyperlink Page Destination
A hyperlink page destination speci"es a page in the document as the destination for a hyperlink.
Schema Example 35. Hyperlink Page Destination
HyperlinkPageDestination_Object = element HyperlinkPageDestination {
attribute Self { xsd:string },
attribute Name { xsd:string },
IDML File Format Specification
76 IDML File Reference: designmap.xml
attribute NameManually { xsd:boolean }?,
attribute DestinationPage { xsd:string }?,
attribute ViewSetting { HyperlinkDestinationPageSetting_EnumValue }?,
attribute ViewPercentage { xsd:double {minInclusive="5" maxInclusive="4000"} }?,
attribute Hidden { xsd:boolean }?,
attribute DestinationUniqueKey { xsd:int }?,
element Properties {
element ViewBounds { UnitRectangleBoundsType_TypeDef }?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Table 45. Hyperlink Page Destination Properties Represented as Attributes
Name Type Req Description
Destination Page string no The destination (target) page of the hyperlink.
Destination-
Unique Key
int no A unique key identifying the hyperlink destina-
tion.
Hidden boolean no If true, the hyperlink is hidden in the PDF.
Name string yes The name of the hyperlink page destination.
The name must be unique within the IDML
document.
Name Manually boolean no If true, name the hyperlink page destination
manually.
View Percentage double no The view percentage, if View Setting is Fixed.
View Setting Hyperlink-
Destination Page-
Setting_Enum Value
no The view at which to view the content of the
hyperlink. Can be Fixed, Fit View, Fit-
Window, Fit Width, Fit Height, Fit-
Visible, or Inherit Zoom .
Table 46. Hyperlink Page Destination Properties Represented as Elements
Name Type Req Description
View Bounds Unit Rectangle-
Bounds Type_
TypeDef
yes The view rectangle, speci"ed in the format [y1,
x1, y2, x2]. Note: Valid only when view setting
is Fixed.
Hyperlink URLDestination
A hyperlink page destination speci"es a web address as the destination for a hyperlink.
Schema Example 36. Hyperlink URLDestination
HyperlinkURLDestination_Object = element HyperlinkURLDestination {
attribute Self { xsd:string },
attribute DestinationUniqueKey { xsd:int }?,
attribute Name { xsd:string },
IDML File Format Specification
77 IDML File Reference: designmap.xml
attribute DestinationURL { xsd:string }?,
attribute Hidden { xsd:boolean }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Table 47. Hyperlink Page Destination Properties Represented as Attributes
Name Type Req Description
Destination-
Unique Key
int no A unique key identifying the hyperlink URL
destination.
Destination URL string no The URL of the hyperlink.
Name string yes The name of the hyperlink URL destination.
The name must be unique within the IDML
document.
Hidden boolean no If true, the hyperlink is hidden in the PDF.
Hyperlink External Page Destination
A hyperlink page destination speci"es a page outside the document as the destination for a
hyperlink.
Schema Example 37. Hyperlink External Page Destination
HyperlinkExternalPageDestination_Object = element HyperlinkExternalPageDestination
{
attribute Self { xsd:string },
attribute DestinationUniqueKey { xsd:int }?,
attribute Name { xsd:string }?,
attribute DocumentPath { xsd:string }?,
attribute DestinationPageIndex { xsd:int {minInclusive="1" maxInclusive="9999"}
}?,
attribute ViewSetting { HyperlinkDestinationPageSetting_EnumValue }?,
attribute ViewPercentage { xsd:double {minInclusive="5" maxInclusive="4000"} }?,
attribute Hidden { xsd:boolean }?,
element Properties {
element ViewBounds { UnitRectangleBoundsType_TypeDef }?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
IDML File Format Specification
78 IDML File Reference: designmap.xml
Table 48. Hyperlink External Page Destination Properties Represented as Attributes
Name Type Req Description
Destination Page-
Index
int no The index of the destination page in the target
document. Range: 1 to 9999.
Document Path string no The path to the target document of the hyper-
link.
Destination-
Unique Key
int no A unique key identifying the hyperlink URL
destination.
Name string yes The name of the hyperlink external page desti-
nation.
View Setting Hyperlink-
Destination Page-
Setting_Enum Value
no The view at which to view the content of the
hyperlink. Can be Fixed, Fit View, Fit-
Window, Fit Width, Fit Height, Fit Visible,
or Inherit Zoom .
View Percentage double no The view percentage, if View Setting is Fixed.
Table 49. Hyperlink External Page Destination Properties Represented as Elements
Name Type Req Description
View Bounds list of four
doubles
yes The view rectangle, speci"ed in the format [y1,
x1, y2, x2]. Note: Valid only when view setting
is Fixed.
Hyperlink Page Item Source
A hyperlink page item source is a hyperlink associated with a page item.
Schema Example 38. Hyperlink Page Item Source
HyperlinkPageItemSource_Object = element HyperlinkPageItemSource {
attribute Self { xsd:string },
attribute Name { xsd:string }?,
attribute SourcePageItem { xsd:string },
attribute Hidden { xsd:boolean }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Table 50. Hyperlink External Page Destination Properties Represented as Attributes
Name Type Req Description
Name string yes The name of the hyperlink external page desti-
nation.
Hidden boolean no If true, the hyperlink page item source will be
hidden in the output PDF.
IDML File Format Specification
79 IDML File Reference: designmap.xml
Name Type Req Description
Source Page Item string yes A reference to a page item as the value of its
Self attribute.
IDML Example 14. Hyperlink
<HyperlinkURLDestination Self="HyperlinkURLDestination/adobe.com"
DestinationUniqueKey="1" Name="adobe.com" DestinationURL="http://www.adobe.com"
Hidden="false"/>
<Hyperlink Self="ufb" Name="website" Source="uf8" Visible="false" Highlight="None"
Width="Thin" BorderStyle="Solid" Hidden="false" DestinationUniqueKey="1">
<Properties>
<BorderColor type="enumeration">Black</BorderColor>
<Destination type="object">HyperlinkURLDestination/adobe.com</Destination>
</Properties>
</Hyperlink>
10.2.23 Bookmark
In Design documents can add bookmarks for navigation in PDFs you export.
Schema Example 39. Bookmark
Bookmark_Object = element Bookmark {
attribute Self { xsd:string },
attribute Name { xsd:string }?,
attribute Destination { xsd:string },
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
)
}
Bookmark_Object*
Table 51. Bookmark Properties Represented as Attributes
Name Type Req Description
Destination string no The destination of the bookmark, as a reference
to the Self attribute of a <Page> element.
Name string yes The name of the bookmark.
10.2.24 PreflightProfile
Schema Example 40. PreflightProfile
PreflightProfile_Object = element PreflightProfile {
attribute Self { xsd:string },
attribute Name { xsd:string }?,
attribute Description { xsd:string }?,
IDML File Format Specification
80 IDML File Reference: designmap.xml
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
)
}
PreflightProfileRule_Object*&
PreflightRuleInstance_Object*
Table 52. PreflightProfile Properties Represented as Attributes
Name Type Req Description
Description string no The description of the pre$ight pro"le.
PreflightProfileRule
Schema Example 41. PreflightProfileRule
PreflightProfileRule_Object = element PreflightProfileRule {
attribute Self { xsd:string },
attribute Name { xsd:string }?,
attribute Id { xsd:string },
attribute Description { xsd:string }?,
attribute Flag { PreflightRuleFlag_EnumValue }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
)
}
RuleDataObject_Object*
Table 53. PreflightProfileRule Properties Represented as Attributes
Name Type Req Description
Description string no The description of the pre$ight pro"le rule.
Flag Preflight Rule-
Flag_Enum Value
no Can be ReturnAsError, Return As-
Infor mational, ReturnAsWarning, or
RuleIsDisabled.
Id string yes The unique ID of the pre$ight rule.
Schema Example 42. RuleDataObject
RuleDataObject_Object = element RuleDataObject {
attribute Self { xsd:string },
attribute Name { xsd:string },
attribute DataType { RuleDataType_EnumValue },
IDML File Format Specification
81 IDML File Reference: designmap.xml
attribute Id { xsd:string }?,
element Properties {
element DataValue {
(string_type, xsd:string ) |
(double_type, xsd:double ) |
(long_type, xsd:int ) |
(short_type, xsd:short ) |
(bool_type, xsd:boolean ) |
(object_type, xsd:string ) |
(list_type, element ListItem {
(string_type, xsd:string ) |
(double_type, xsd:double ) |
(long_type, xsd:int ) |
(short_type, xsd:short ) |
(bool_type, xsd:boolean ) |
(object_type, xsd:string ) |
(list_type, element PreflightRuleDataListType {
PreflightRuleDataListType_TypeDef }* )
}* )
}
}
}
Table 54. RuleDataObject Properties Represented as Attributes
Name Type Req Description
DataType Rule Data Type_
EnumValue
yes The data type of the rule. Can be
ID string no The ID of the rule.
Table 55. RuleDataObject Properties Represented as Elements
Name Type Req Description
Properties Pre flight Rule-
Data List Type_
TypeDef
yes The pre$ight rule speci"cation.
PreflightRuleInstance
Schema Example 43. PreflightRuleInstance
PreflightRuleInstance_Object = element PreflightRuleInstance {
attribute Self { xsd:string },
attribute Name { xsd:string }?,
attribute Id { xsd:string },
attribute Description { xsd:string }?,
attribute Flag { PreflightRuleFlag_EnumValue }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
IDML File Format Specification
82 IDML File Reference: designmap.xml
,
(
)
}
RuleDataObject_Object*
Table 56. PreflightRuleInstance Properties Represented as Attributes
Name Type Req Description
Description string no The description of the pre$ight rule instance.
Flag Preflight Rule-
Flag_Enum Value
no Can be ReturnAsError, Return As-
Infor mational, ReturnAsWarning, or
RuleIsDisabled.
Id string yes The unique ID of the pre$ight rule.
10.2.25 DataMergeImagePlaceholder
Schema Example 44. DataMergeImagePlaceholder
DataMergeImagePlaceholder_Object = element DataMergeImagePlaceholder {
attribute Self { xsd:string },
attribute Field { xsd:string },
attribute PlaceholderPageItem { xsd:string }
}
Table 57. DataMergePlaceholder Properties Represented as Attributes
Name Type Req Description
Field string yes The name of the associated data "eld.
Placeholder Page-
Item
string yes A reference to the Self attribute of the place-
holder page item.
10.2.26 HyphenationException
Schema Example 45. HyphenationException
HyphenationException_Object = element HyphenationException {
attribute Self { xsd:string },
attribute Name { xsd:string },
attribute RemovedExceptions { list { xsd:string * } }?,
attribute AddedExceptions { list { xsd:string * } }?
}
Table 58. HyphenationException Properties Represented as Attributes
Name Type Req Description
Removed Exceptions list of strings no A list of removed hyphenation exceptions.
Added Exceptions list of strings no A list of added hyphenation exceptions.
IDML File Format Specification
83 IDML File Reference: designmap.xml
10.2.27 IndexingSortOption
Schema Example 46. IndexingSortOption
IndexingSortOption_Object = element IndexingSortOption {
attribute Self { xsd:string },
attribute Name { xsd:string },
attribute Include { xsd:boolean }?,
attribute Priority { xsd:int }?,
attribute HeaderType { (HeaderTypes_EnumValue ) |
(NothingEnum_EnumValue )
}?
}
Table 59. IndexingSortOption Properties Represented as Attributes
Name Type Req Description
Include boolean no If true, include the indexing sort option when
generating the index.
HeaderType Header Types_
EnumValue
no Indexing sort option header types. Can be
BasicLatin, Belarusian, Bulgarian,
Chinese Pinyin, ChineseStrokeCount,
Croatian, Czech, DanishNorwegian,
Estonian, SwedishFinnish, HiraganaAll,
HiraganaConsonantsOnly, Hungarian,
Katakana, KatakanaConsonantsOnly,
KoreanConsonant, Korean Consonant-
Plus Vowel, Latvian, Lithuanian, Polish,
Romanian, Russian, Slovak, Slovenian,
Spanish, Turkish, or Ukranian.
Priority int no Priority of this indexing sort option (shu'es
prior entries down).
10.2.28 ABullet
Schema Example 47. ABullet{
ABullet_Object = element ABullet {
attribute Self { xsd:string },
attribute CharacterType { BulletCharacterType_EnumValue }?,
attribute CharacterValue { xsd:int }?,
element Properties {
element BulletsFont {
(object_type, xsd:string ) |
(string_type, xsd:string ) |
(enum_type, AutoEnum_EnumValue )
}?&
element BulletsFontStyle {
(string_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue ) |
(enum_type, AutoEnum_EnumValue )
}?
}
?
}
IDML File Format Specification
84 IDML File Reference: designmap.xml
Table 60. ABullet Properties Represented as Attributes
Name Type Req Description
CharacterType Bullet Character-
Type_EnumValue
no The character type. Can be Glyph With Font,
UnicodeOnly, or UnicodeWithFont.
CharacterValue int no The bullet character as a unicode ID or a glyph
ID.
Table 61. ABullet Properties Represented as Elements
Name Type Req Description
BulletsFont string, a
reference to a
font element,
or an AutoEnum_
EnumValue
no Font of the bullet character.
Bullets Font Style string, Nothing-
Enum_EnumValue,
Auto Enum_
EnumValue
no Font style of the bullet character.
10.2.29 Assignment
Schema Example 48. Assignment
Assignment_Object = element Assignment {
attribute Self { xsd:string },
attribute Name { xsd:string }?,
attribute UserName { xsd:string }?,
attribute ExportOptions { AssignmentExportOptions_EnumValue }?,
attribute IncludeLinksWhenPackage { xsd:boolean }?,
attribute FilePath { xsd:string },
element Properties {
element FrameColor {
(InDesignUIColorType_TypeDef ) |
(enum_type, NothingEnum_EnumValue )
}?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
AssignedStory_Object*
)
}
Schema Example 49. Assignment Properties Represented as Attributes
Name Type Req Description
UserName string no The user name.
IDML File Format Specification
85 IDML File Reference: designmap.xml
Name Type Req Description
ExportOptions Assignment Export-
Options_EnumValue
no Can be AssignedSpreads, Empty Frames, or
Everything.
Include LinksWhen-
Package
boolean no If true, includes linked "les when packaging the
assignment.
File Path string yes The "le path to the saved assignment.
Table 62. Assignment Properties Represented as Elements
Name Type Req Description
FrameColor list of doubles,
InDesign UI Color-
Type_TypeDef,
or Nothing Enum_
EnumValue
no The color of the assignment's frames, speci"ed
either as an array of three doubles, each in the
range 0 to 255 and representing R, G, and B
values, or as an In Design UIColor Type enu-
meration.
AssignedStory
AssignedStory_Object = element AssignedStory {
attribute Self { xsd:string },
attribute Name { xsd:string }?,
attribute StoryReference { xsd:string }?,
attribute FilePath { xsd:string }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Schema Example 50. Assignment Properties Represented as Attributes
Name Type Req Description
StoryReference string no A reference to the assigned story.
FilePath string no The "le path (colon delimited on the Mac OS).
10.2.30 Article
Articles give users a way to associate page items with each other for export to electronic
publishing (ePub) formats. For more on articles, refer to the Adobe InDesign CS5.5 online help.
The <Article> element appears as a child of the <Document> element (in an IDML package, the
<Document> element is in the designmap.xml "le). The <Article> element includes a list of one
or more <ArticleMember> elements. Each <ArticleMember> element corresponds to a page item
associated with the article.
The <ArticleMember> elements contain the attribute ItemRef, which simply points to the unique
ID (self attribute) of the corresponding page item (for more on element cross references in
IDML documents, refer to 9.5.4, “Object Reference Format,” in the Adobe IDML File Format
IDML File Format Specification
86 IDML File Reference: designmap.xml
Speci"cation). A given page item can be associated with any number of articles.
Schema Example 51. Article
Article_Object = element Article {
attribute Self { xsd:string },
attribute Name { xsd:string }?,
attribute ArticleExportStatus { xsd:boolean }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
)}
ArticleMember_Object*
Table 63. Article Properties Represented as Attributes
Name Type Req Description
Article Export-
Status
boolean no If true, include the article information in
exported "les.
Table 64. Article Properties Represented as Elements
ArticleMember ArticleMember_
Object
yes A list of one or more article members (which
store cross references to the page items associ-
ated with the article).
IDML Example 15. Article
<Article Self="ue1" Name="my article1" ArticleExportStatus="true">
<ArticleMember Self="ue1ArticleMember0" ItemRef="ue0"/>
<ArticleMember Self="ue1ArticleMember1" ItemRef="udc"/>
</Article>
ArticleMember
Schema Example 52. ArticleMember
ArticleMember_Object = element ArticleMember {
attribute Self { xsd:string },
attribute ItemRef { xsd:string }
}
Table 65. ArticleMember Properties Represented as Attributes
Name Type Req Description
ItemRef String yes A reference to the self attribute of the associ-
ated page item.
IDML File Format Specification
87 IDML File Reference: Spreads and Master Spreads
10.3 Spreads and Master Spreads
The following sections describe the content and structure of the <Spread> and <Master Spread>
elements in IDML. In an IDML package, <Spread> elements are stored in the Spread "les
stored within the Spreads folder (which are named according to the rules described in “IDML
Component Names”). For the remainder of this section, we will refer to these "les as Spread.xml.
The <Master Spread> elements are very similar to the <Spread> elements in each Spread.xml "le.
This distinction is purely for organizational purposes; the XML structures of the two elements are
fundamentally the same, and most of the information in this section can be applied to either type
of "le. In an IDML package, <Master Spread> elements are stored in Master Spreads folder.
The pages in an In Design document are grouped into spreads and master spreads. Master spreads
di&er from document page spreads in that they can be applied to other pages, and are typically
used for repeating layout elements, such as page numbers or running headers. Spreads and master
spreads contain pages, and all page items that can appear in an In Design document. In addition,
spreads contain a number of spread-level preferences, such as $attener settings, the spread
binding location, and the display state of master page items on the spread.
Schema Example 53. Spread Schema
Spread_Object = element Spread {
attribute Self { xsd:string },
attribute FlattenerOverride { SpreadFlattenerLevel_EnumValue }?,
attribute AllowPageShuffle { xsd:boolean }?,
attribute ItemTransform { TransformationMatrixType_TypeDef }?,
attribute ShowMasterItems { xsd:boolean }?,
attribute PageCount { xsd:int }?,
attribute BindingLocation { xsd:int }?,
attribute PageTransitionType { PageTransitionTypeOptions_EnumValue }?,
attribute PageTransitionDirection { PageTransitionDirectionOptions_EnumValue }?,
attribute PageTransitionDuration { PageTransitionDurationOptions_EnumValue }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
FlattenerPreference_Object?,
TimingSetting_Object?,
(Pumpkin_Object*&
Page_Object*&
Oval_Object*&
Rectangle_Object*&
GraphicLine_Object*&
TextFrame_Object*&
Polygon_Object*&
Group_Object*&
EPSText_Object*&
FormField_Object*&
Button_Object*&
MultiStateObject_Object*
CheckBox_Object*&
IDML File Format Specification
88 IDML File Reference: Spreads and Master Spreads
ComboBox_Object*&
ListBox_Object*&
RadioButton_Object*&
TextBox_Object*&
SignatureField_Object*)
)
}
Note that the <Master Spread> element di&ers from the <Spread> element only in that it can
contain Name, Name Prefix, Base Name, and Overridden Page Item Props attributes—only master
spreads have these properties (refer to the In Design documentation for more on master spread
options). <Master Spread> elements also have a <PageColor> element that they do not share with
<Spread> elements. <Master Spread> elements lack the Binding Location, Allow Page Shuffle,
and Flattener Override attributes, as these elements only apply to document spreads (again, for
more on the di&erences between master spreads and document spreads, refer to the In Design
documentation). Apart from these minor di&erences, the two elements—and the child elements
that they can contain, such as <Text Frame>, <Rectangle>, or <Group> elements—are the same.
Schema Example 54. Master Spread Schema
MasterSpread_Object = element MasterSpread {
attribute Self { xsd:string },
attribute ItemTransform { TransformationMatrixType_TypeDef }?,
attribute OverriddenPageItemProps { list { xsd:int * } }?,
attribute Name { xsd:string }?,
attribute NamePrefix { xsd:string }?,
attribute BaseName { xsd:string }?,
attribute ShowMasterItems { xsd:boolean }?,
attribute PageCount { xsd:int }?,
element Properties {
element PageColor {
(InDesignUIColorType_TypeDef ) |
(enum_type, PageColorOptions_EnumValue )
}?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
Page_Object*&
Oval_Object*&
Rectangle_Object*&
GraphicLine_Object*&
TextFrame_Object*&
Polygon_Object*&
Group_Object*&
EPSText_Object*&
FormField_Object*&
Button_Object*&
MultiStateObject_Object*&
TimingSetting_Object?
)
}
IDML File Format Specification
89 IDML File Reference: Spreads and Master Spreads
Most of the properties of a spread or master spread are represented by attributes. The following
table shows the attributes that can appear in a <Spread> or <Master Spread> element.
Table 66. Spread/Master Spread Properties Represented as Attributes
Attribute Data Type Req Description
Flattener Override Spread Flattener_
Level_Enum Value
no The transparency $attener preferences over-
ride for the spread. (<Spread> only). Can be
Default, None, or Custom.
Item Transform list of doubles no A transformation matrix applied to the spread.
In In Design, spreads can be rotated, but not
translated, scaled, or skewed, so this matrix will
only specify rotation, and that only in 90-degree
increments.
Show Master Items Boolean no If true, displays master page items on document
pages in the spread.
Page Count int no The number of pages in the spread.
Binding Location int no The location of the binding edge of the spread.
(<Spread> only)
Allow Page Shuffle Boolean no If true, allows the pages of the spread to move to
other spreads during repagination. If false, keeps
the pages of the spread together, regardless of
repagination. (<Spread> only)
Applied Master string no A reference to the unique I D (the value of the
Self attribute) of the master spread applied to
the <Spread> or <Master Spread>.
Name string no The name of the master spread.
(<Master Spread> only)
Name Prefix string no The name pre"x of the master spread.
(<Master Spread> only)
Base Name string no The base name of the master spread.
(<Master Spread> only)
Page Transition-
Direction
Page Transition-
Type Direction-
Options_EnumValue
no The direction is based on the page transtion
type. Can be: HorizontalIn, HorizontalOut,
VerticalIn, VerticalOut, Down, Left,
LeftDown, LeftUp, Right, RightDown,
RightUp, or Up.
Page Transition-
Duration
Page Transition-
Type Duration-
Options_EnumValue
no The duration of the page transition. Can be
Fast, Medim, or Slow.
Page Transition-
Type
Page Transition-
TypeOptions_
EnumValue
no The type of the page transition. Can be Blinds-
Transition, Box Transition, Comb Transition,
Cover Transition, Dissolve Transition, Fade-
Transition, None Transition, Page Turn Transition,
Push Transition, Split Transition, Uncover-
Transition, Wipe Transition, Zoom In Transition,
or Zoom Out Transition
IDML File Format Specification
90 IDML File Reference: Spreads and Master Spreads
Table 67. Master Spread Properties Represented as Elements
Name Type Req Description
Page Color list of doubles
or In Design-
UIColor Type
no The color of the spread, speci"ed either as a
list of three doubles, each in the range 0 to 255
and representing R, G, and B values, or as an
In Design UIColor Type enumeration.
Minimal Spread Example
The <Spread> element is simply a container for other elements that can appear on a spread. In the
following example, we have omitted the details of the Page and Rectangle elements. For more
information on those objects, refer to the corresponding reference sections.
IDML Example 16. Minimal Spread
<Spread Self="ub5" Page Count="1" Applied Master="ubc">
<Page>...</Page>
<Rectangle>...</Rectangle>
</Spread>
10.3.1 Page Items
Page items are the rectangles, ellipses, graphic lines, polygons, text frames, groups, buttons,
movies, imported graphics, and interactive elements that can appear in an In Design document.
In IDML, page items are collected on spreads as child elements of the <Spread> element.
Page items can be broken into three groups: spline items (rectangles, ellipses, graphic lines,
polygons, and text frames), media items (movies and sounds), and graphics (PDF, EPS, TIFF,
and other types of imported graphics). This corresponds to the class hierarchy in the InDesign
scripting model: SplineItems, MediaItems, and Graphics are all chile elements of the PageItem
class.
Spline Items
Spline items are usually the most common type of page item found in an InDesign document.
Spline items appear in elements named a%er their speci"c class: Rectangle, Oval, Graphic Line,
Polygon, Text Frame, Group, and Button. There is no speci"c spline item for a graphic frame; any
rectangle, ellipse, graphic line, or polygon can contain an imported graphic. The only di&erence
between the Rectangle, Oval, Graphic Line, and Polygon elements is in the number and
arrangement of the Path Point elements contained in their PathGeometry elements.
From the point of view of the In Design scripting model, spline items frequently change their type
as you alter their content type or geometry. Add a point to a rectangle, and it becomes a polygon;
change the content type of a polygon to text type, and it becomes a text frame. IDML works in
a similar fashion—you can add multiple paths to a <Rectangle> element, for example, and In-
Design will still be able to open and interpret the element.
The schemas for Rectangle, Oval, Graphic Line, Polygon, and Text Frame elements are identical.
The following example is for the Rectangle element; variations for other object types will be
discussed later in this section.
IDML File Format Specification
91 IDML File Reference: Spreads and Master Spreads
Media Items
In IDML, media items are represented as <Movie> and <Sound> elements. These elements have
all of the properties of other <PageItem> elements, but add a small number of unique properties.
Media items always appear inside a container element, such as a <Rectangle>.
Graphics
In IDML, imported graphics items are represented as <EPS>, <Image>, and <PDF> elements. These
elements have all of the properties of other <PageItem> elements, but add a small number of
unique properties. Graphics always appear inside a container element, such as a <Rectangle>.
Schema Example 55. Page Item
Rectangle_Object = element Rectangle {
attribute Self { xsd:string },
attribute ContentType { ContentType_EnumValue }?,
attribute StoryTitle { xsd:string }?,
attribute LinkResourceId { xsd:int }?,
attribute ParentInterfaceChangeCount { list { xsd:int * } }?,
attribute TargetInterfaceChangeCount { list { xsd:int * } }?,
attribute LastUpdatedInterfaceChangeCount { list { xsd:int * } }?,
attribute LinkedSourceTableId { xsd:int }?,
attribute HorizontalLayoutConstraints { list { DimensionsConstraints_EnumValue
,DimensionsConstraints_EnumValue ,DimensionsConstraints_EnumValue } }?,
attribute VerticalLayoutConstraints { list { DimensionsConstraints_EnumValue
,DimensionsConstraints_EnumValue ,DimensionsConstraints_EnumValue } }?,
attribute AllowOverrides { xsd:boolean }?,
attribute FillColor { xsd:string }?,
attribute FillTint { xsd:double }?,
attribute OverprintFill { xsd:boolean }?,
attribute CornerRadius { xsd:double }?,
attribute StrokeWeight { xsd:double }?,
attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
attribute EndCap { EndCap_EnumValue }?,
attribute EndJoin { EndJoin_EnumValue }?,
attribute StrokeType { xsd:string }?,
attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
attribute StrokeDashAndGap { list { xsd:double * } }?,
attribute LeftLineEnd { ArrowHead_EnumValue }?,
attribute RightLineEnd { ArrowHead_EnumValue }?,
attribute StrokeColor { xsd:string }?,
attribute StrokeTint { xsd:double }?,
attribute GradientFillStart { UnitPointType_TypeDef }?,
attribute GradientFillLength { xsd:double }?,
attribute GradientFillAngle { xsd:double }?,
attribute GradientStrokeStart { UnitPointType_TypeDef }?,
attribute GradientStrokeLength { xsd:double }?,
attribute GradientStrokeAngle { xsd:double }?,
attribute OverprintStroke { xsd:boolean }?,
attribute GapColor { xsd:string }?,
attribute GapTint { xsd:double }?,
attribute OverprintGap { xsd:boolean }?,
attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
IDML File Format Specification
92 IDML File Reference: Spreads and Master Spreads
attribute Nonprinting { xsd:boolean }?,
attribute ItemLayer { xsd:string }?,
attribute Locked { xsd:boolean }?,
attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
attribute GradientFillHiliteLength { xsd:double }?,
attribute GradientFillHiliteAngle { xsd:double }?,
attribute GradientStrokeHiliteLength { xsd:double }?,
attribute GradientStrokeHiliteAngle { xsd:double }?,
attribute AppliedObjectStyle { xsd:string }?,
attribute CornerOption { CornerOptions_EnumValue }?,
attribute Visible { xsd:boolean }?,
attribute Name { xsd:string }?,
attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
attribute TopRightCornerOption { CornerOptions_EnumValue }?,
attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
attribute TopLeftCornerRadius { xsd:double }?,
attribute TopRightCornerRadius { xsd:double }?,
attribute BottomLeftCornerRadius { xsd:double }?,
attribute BottomRightCornerRadius { xsd:double }?,
attribute ItemTransform { TransformationMatrixType_TypeDef }?,
element Properties {
element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }*
}?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
(
}
?
,
TextPath_Object*,
(TransparencySetting_Object?&
StrokeTransparencySetting_Object?&
FillTransparencySetting_Object?&
AnchoredObjectSetting_Object?&
TextWrapPreference_Object?&
LinkedPageItemOption_Object?&
InCopyExportOption_Object?&
FrameFittingOption_Object?&
ObjectExportOption_Object?&
AnimationSetting_Object?&
TimingSetting_Object?),
(Pumpkin_Object*&
Oval_Object*&
Rectangle_Object*&
GraphicLine_Object*&
TextFrame_Object*&
Polygon_Object*&
Sound_Object*&
Movie_Object*&
Link_Object*&
HtmlItem_Object*&
Graphic_Object*&
Image_Object*&
IDML File Format Specification
93 IDML File Reference: Spreads and Master Spreads
EPS_Object*&
WMF_Object*&
PICT_Object*&
PDF_Object*&
Group_Object*&
EPSText_Object*&
FormField_Object*&
Button_Object*&
MultiStateObject_Object*&
CheckBox_Object*&
ComboBox_Object*&
ListBox_Object*&
RadioButton_Object*&
TextBox_Object*&
SignatureField_Object*&
ImportedPage_Object*)
)
}
Table 68. Common Page Item Properties Represented as Attributes
Name Type Req Description
Allow Overrides boolean no If true, the master page page item allows over-
rides.
Applied Object-
Style
string no The object style applied to the page item.
Bottom Left Corner-
Option
Corner Options_
Enum Value
no The corner option applied to the bottom le%
corner of the object. Note: corner option dif-
fers from end join in that you can set a radius
for a corner option, whereas the rounded or
beveled e&ect of an end join depends upon the
stroke weight. Can be None (No corner option),
Rounded Corner (Rounded corner option),
Inverse Rounded Corner (Inverted rounded
corner option), Inset Corner (Inset corner
option), Bevel Corner (Beveled corner option),
or Fancy Corner (Fancy corner option).
Bottom Left Corner-
Radius
double no The corner radius applied to the bottom le% cor-
ner of the object.
Bottom Right-
Corner Option
Corner Options_
Enum Value
no The corner option applied to the bottom right
corner of the object. Note: corner option dif-
fers from end join in that you can set a radius
for a corner option, whereas the rounded or
beveled e&ect of an end join depends upon the
stroke weight. Can be None (No corner option),
Rounded Corner (Rounded corner option),
Inverse Rounded Corner (Inverted rounded
corner option), Inset Corner (Inset corner
option), Bevel Corner (Beveled corner option),
or Fancy Corner (Fancy corner option).
Bottom Right-
Corner Radius
double no The corner radius applied to the bottom right
corner of the object.
IDML File Format Specification
94 IDML File Reference: Spreads and Master Spreads
Name Type Req Description
Content Type Content Type_Enum-
Value
no The type of content that a frame can contain.
Can be Unassigned (No content type assigned),
Graphic Type (The frame is a graphics frame),
or Text Type (The frame is a text frame).
End Cap End Cap_Enum Value no The end shape of an open path. Can be Butt-
End Cap (A squared end that stops at the path’s
endpoint), Round End Cap (A semicircular
end that extends beyond the endpoint by half
the stroke-width), or Projecting End Cap (A
squared end that extends beyond the endpoint
by half the stroke-width).
End Join End Join_Enum Value no The corner join applied to the page item. Can be
Miter End Join (Miter end join), Round End-
Join (Rounded end join), or Bevel End Join
(Beveled end join).
Fill Color string no The swatch (color, gradient, tint, or mixed ink)
applied to the to "ll the page item. .
Fill Tint double no The percent of tint to use in the page item’s "ll
color. (To specify a tint percent, use a number
in the range of 0 to 100; to use the inherited or
overridden value, use -1.)
Gap Color string no The swatch (color, gradient, tint, or mixed ink)
applied to the gap of a dashed, dotted, or striped
stroke. For information, see stroke type.
Gap Tint double no The tint as a percentage of the gap color. (To
specify a tint percent, use a number in the range
of 0 to 100; to use the inherited or overridden
value, use -1.)
Gradient Fill Angle double no The angle of a linear gradient applied to the "ll
of the page item. (Range: -180 to 180)
Gradient Fill-
Hilite Angle
double no The angle of the gradient "ll highlight.
Gradient Fill-
Hilite Length
double no The length of the gradient "ll highlight.
Gradient Fill-
Length
double no The length (for a linear gradient) or radius (for
a radial gradient) applied to the "ll of the page
item.
Gradient Fill Start UnitPointType_
TypeDef
no The starting point (in page coordinates) of a gra-
dient applied to the "ll of the page item, in the
format [x, y].
Gradient Stroke-
Angle
double no The angle of a linear gradient applied to the
stroke of the page item. (Range: -180 to 180)
Gradient Stroke-
Hilite Angle
double no The angle of the gradient stroke highlight.
Gradient Stroke-
Hilite Length
double no The length of the gradient stroke highlight.
IDML File Format Specification
95 IDML File Reference: Spreads and Master Spreads
Name Type Req Description
Gradient Stroke-
Length
double no The length (for a linear gradient) or radius (for a
radial gradient) applied to the stroke of the page
item.
Gradient Stroke-
Start
UnitPointType_
TypeDef
no The starting point (in page coordinates) of a gra-
dient applied to the stroke of the page item, in
the format [x, y].
Item Layer string no The layer that the page item is on.
Item Transform Transform ation-
MatrixType_
TypeDef
no The transformation matrix applied to the page
item.
Left Line End Arrow Head_Enum-
Value
no The arrowhead applied to the start of the path.
Can be None (None), Simple Arrow Head
(An arrow head formed by two slanting lines
whose intersection forms a 45-degree angle
and whose stroke weight is the same as the
path’s stroke), Simple Wide Arrow Head (An
arrow head formed by two slanting lines whose
intersection forms a 90-degree angle and whose
stroke weight is the same as the path’s stroke),
Triangle Arrow Head (A solid triangle arrow
head whose point describes a 45-degree angle),
Triangle Wide Arrow Head (A solid triangle
arrow head whose point describes a 90-degree
angle), Barbed Arrow Head (A solid arrow head
whose pierced end bows sharply toward the
point and whose point describes a 45-degree
angle), Curved Arrow Head (A solid arrow head
whose pierced end concaves toward the point
and whose point describes a 45-degree angle),
Circle Arrow Head (A hollow circle whose
outline is the same weight as the stroke The
circle’s diameter is 5 times the stroke width),
Circle Solid Arrow Head (A solid circle whose
diameter is 5 times the stroke width), Square-
Arrow Head (A hollow square set perpendicular
to the path, whose outline is the same weight as
the stroke The length of one side of the square
is 5 times the stroke width), Square Solid-
Arrow Head (A solid square set perpendicular
to the end of the path The length of one side
of the square is 5 times the stroke width), or
Bar Arrow Head (A vertical bar bisected by the
stroke, which meets the stroke at a right angle
and is the same weight as the stroke The bar’s
length is 45 times the stroke width).
IDML File Format Specification
96 IDML File Reference: Spreads and Master Spreads
Name Type Req Description
Local Display-
Setting
Display Setting-
Options_Enum Value
no Display performance options for the page item.
Can be High Quality (Slower performance; dis-
plays high-resolution graphics and high-quality
transparencies and turns on anti-aliasing),
Typical (Moderate performance speed; dis-
plays proxy graphics and low-quality transpar-
encies and turns on anti-aliasing), Optimized
(Best performance; grays out graphics and turns
o& transparency and anti-aliasing), or Default
(Uses the container object’s default display per-
formance preferences setting For information,
see default display settings).
Locked boolean no If true, the page item is locked.
Miter Limit double no The limit of the ratio of stroke width to miter
length before a miter (pointed) join becomes a
bevel (squared-o&) join.
Nonprinting boolean no If true, the page item does not print.
Overprint Fill boolean no If true, the page item’s "ll color overprints any
underlying objects. If false, the "ll color knocks
out the underlying colors.
Overprint Gap boolean no If true, the gap color overprints any underly-
ing colors. If false, the gap color knocks out the
underlying colors.
Overprint Stroke boolean no If true, the page item’s stroke color overprints
any underlying objects. If false, the stroke color
knocks out the underlying colors.
IDML File Format Specification
97 IDML File Reference: Spreads and Master Spreads
Name Type Req Description
Right Line End Arrow Head_Enum-
Value
no The arrowhead applied to the end of the path.
Can be None (None), Simple Arrow Head
(An arrow head formed by two slanting lines
whose intersection forms a 45-degree angle
and whose stroke weight is the same as the
path’s stroke), Simple Wide Arrow Head (An
arrow head formed by two slanting lines whose
intersection forms a 90-degree angle and whose
stroke weight is the same as the path’s stroke),
Triangle Arrow Head (A solid triangle arrow
head whose point describes a 45-degree angle),
Triangle Wide Arrow Head (A solid triangle
arrow head whose point describes a 90-degree
angle), Barbed Arrow Head (A solid arrow head
whose pierced end bows sharply toward the
point and whose point describes a 45-degree
angle), Curved Arrow Head (A solid arrow head
whose pierced end concaves toward the point
and whose point describes a 45-degree angle),
Circle Arrow Head (A hollow circle whose
outline is the same weight as the stroke The
circle’s diameter is 5 times the stroke width),
Circle Solid Arrow Head (A solid circle whose
diameter is 5 times the stroke width), Square-
Arrow Head (A hollow square set perpendicular
to the path, whose outline is the same weight as
the stroke The length of one side of the square
is 5 times the stroke width), Square Solid-
Arrow Head (A solid square set perpendicular
to the end of the path The length of one side
of the square is 5 times the stroke width), or
Bar Arrow Head (A vertical bar bisected by the
stroke, which meets the stroke at a right angle
and is the same weight as the stroke The bar’s
length is 45 times the stroke width).
Story Title string no The title of the story associated with this page
item, if any.
Stroke Alignment Stroke Alignment_
Enum Value
no The stroke alignment applied to the page item.
Can be Center Alignment (The stroke straddles
the path), Inside Alignment (The stroke is
inside the path), or Outside Alignment (The
stroke is outside the path, like a picture frame).
Stroke Color string no The swatch (color, gradient, tint, or mixed ink)
applied to the to stroke of the page item.
IDML File Format Specification
98 IDML File Reference: Spreads and Master Spreads
Name Type Req Description
Stroke Corner-
Adjustment
Stroke Corner-
Adjustment_Enum-
Value
no The corner adjustment applied to the page item.
Can be None (No adjustment), Dashes (Changes
the length of dashes so that dashes always occur
at path ends and corners; maintains set gap
length Note: Can cause dashes to be di&erent
lengths on shapes whose sides are of di&erent
lengths, such as rectangles), Gaps (Changes
the length of gaps so that dashes or dots always
occur at ends and corners; maintains dash
length or dot diameter Note: Can cause gaps
to be di&erent lengths on shapes whose sides
are of di&erent lengths, such as rectangles), or
Dashes And Gaps (Adjusts both dashes and gaps
to cover corners and end points Note: Causes
dash and gap sizes to be consistent on all sides of
the shape).
Stroke Dash And Gap string no The dash and gap measurements that de"ne the
pattern of a custom dashed line. De"ne up to
six values (in points) in the format [dash1, gap1,
dash2, gap2, dash3, gap3].
Stroke Tint double no The percent of tint to use in object’s stroke color.
(To specify a tint percent, use a number in the
range of 0 to 100; to use the inherited or overrid-
den value, use -1.)
Stroke Type string no The name of the stroke style to apply.
Stroke Weight double no The weight (in points) to apply to the page item's
stroke.
Top Left Corner-
Option
Corner Options_
Enum Value
no The corner option applied to the top le% corner
of the object. Note: corner option di&ers from
end join in that you can set a radius for a corner
option, whereas the rounded or beveled e&ect
of an end join depends upon the stroke weight.
Can be None (No corner option), Rounded-
Corner (Rounded corner option), Inverse-
Rounded Corner (Inverted rounded corner
option), Inset Corner (Inset corner option),
Bevel Corner (Beveled corner option), or
Fancy Corner (Fancy corner option).
Top Left Corner-
Radius
double no The corner radius applied to the top le% corner
of the object.
Top Right Corner-
Option
Corner Options_
Enum Value
no The corner option applied to the top right corner
of the object. Note: corner option di&ers from
end join in that you can set a radius for a corner
option, whereas the rounded or beveled e&ect
of an end join depends upon the stroke weight.
Can be None (No corner option), Rounded-
Corner (Rounded corner option), Inverse-
Rounded Corner (Inverted rounded corner
option), Inset Corner (Inset corner option),
Bevel Corner (Beveled corner option), or
Fancy Corner (Fancy corner option).
IDML File Format Specification
99 IDML File Reference: Spreads and Master Spreads
Name Type Req Description
Top Right Corner-
Radius
double no The corner radius applied to the top right corner
of the object.
Table 69. Common Page Item Properties Represented by Elements
Name Type Req Description
PathGeometry Array of
GeometryPathType
elements
yes An element containing the geometry of the page
item. For more information, refer to “Geometry
in IDML.”
Live Corner Options and Previous Versions of InDesign
In the InDesign CS4 IDML format, corner options were applied to all of the points in the page
item. InDesign CS5 added the Live Corner E&ects feature, which can apply a di&erent corner
option to each point in the paths of a page item. The CornerRadius and CornerOption attributes
in the InDesign CS4 version of IDML have been replaced with the BottomLeftCornerOption,
Bottom LeftCornerRadius, Bottom RightCornerOption, Bottom RightCornerRadius, Top Left-
Corner Option, Top Left Corner Radius, TopRightCornerOption, and Top Right Corner Radius in
the InDesign CS5 version of IDML.
Opening an InDesign CS4 compliant IDML "le containing the CornerRadius and CornerOption
attributes in InDesign CS5 will apply the same value to all four corners.
Opening an InDesign CS5 IDML "le in InDesign CS4 will apply the corner e&ect and corner
radius speci"ed by the Top Left Corner Option and Top Left Corner Radius to theCornerRadius and
CornerOption attributes, which means that the top le% corner attributes of the InDesign CS5 "le
will be uniformly applied to all corners of the objects in InDesign CS4.
10.3.2 Nested Objects and IDML Structure
Page items (and other objects, such as imported graphics) in an In Design layout are frequently
nested inside other page items. This nesting is explicit in the IDML structure. A <Document>
element, for example contains <Spread> elements, which, in turn, contain <Rectangle> elements
or other page item elements. An imported image is stored as a child XML element of the
containing page item element. Objects inside a group appear as child elements of the <Group>
element.
Only the top-level page items of a spread appear as child elements of the <Spread> element; all
nested objects appear as child elements of their respective container elements.
10.3.3 Geometry in IDML
When you are editing or creating an IDML "le, it’s likely that you will need to draw a page item
at a speci"c location on a page. You’re probably already familiar with the geometry of the paths
in page items—that they’re made up of points positioned at pairs of x and y coordinates—but
it’s likely that you’ll have a few questions in mind. What units of measurement should you use?
Where is the origin of the coordinate system? Are the coordinates used in page items relative to
the page or to the spread? In this section, we’ll attempt to answer these questions.
IDML File Format Specification
100 IDML File Reference: Spreads and Master Spreads
The "rst thing you need to know is that the coordinates used in IDML are not the same as the
coordinates you see in the In Design user interface or in the In Design scripting object model (they
are, however, the same coordinates as used in the In Design C++ model). At the same time, IDML
o&ers a robust and consistent set of elements and attributes for specifying object locations—
anything that can be drawn in the In Design user interface can be achieved in IDML.
This section will focus on how geometry is expressed in IDML; the general topic of the geometry
of page items and spreads in an In Design document is far beyond the scope of this speci"cation.
For more information, refer to the “Layout Fundamentals” chapter of the In Design SDK
Programming Guide. For more on coordinate systems and transformation matrices, refer to the
Post Script Language Reference Manual.
Note: In this section, we’ll refer to a generic <Page Item> element. There are no <Page Item>
elements in IDML; this element is provided for explanatory purposes only—it could be a
<Rectangle>, <Oval>, <Graphic Line>, <Text Frame>, or <Polygon> element.
Coordinates, Transformation Matrices, and the IDML Element Hierarchy
As we mentioned in “Nested Objects and IDML Structure,” above, elements in IDML are
arranged in a speci"c hierarchy. A document contains spreads; spreads contain page items; and
page items can contain other page items. The location of a page item on a spread depends on its
position in the hierarchy. The relationships between the elements are de"ned by the following:
• A document has a base coordinate system (see “Pasteboard Coordinates,” below).
• Each spread or master spread has its own coordinate system (see “Spread Coordinates,” below).
• Each page item element has its own coordinate system (see “Page Item Geometry,” below).
• The relationship of an element’s coordinates to the coordinate system of its parent is
determined by the transformation matrix applied to the element (see “Transformations,”
below).
In the paragraphs above, we talk about each element having its own coordinate system. In the
rest of this section, we’ll refer to the coordinate system of an element as the element’s inner
coordinates.
Pasteboard Coordinates
It’s natural to think of the coordinates in an In Design document in terms of the rulers you see
in the layout window—ruler coordinates. In ruler coordinates, a page item can actually straddle
two di&erent sets of rulers. This, among other reasons, makes ruler coordinates inconvenient for
developers.
Instead, IDML geometry is built on the pasteboard coordinate system. This isn’t the pasteboard
you see surrounding a spread in the user interface; instead, it’s a global coordinate system that
underlies all of the spreads in an In Design document. The pasteboard coordinate system starts at
zero, above the "rst page in the document, and encompasses all of the spreads in the document.
(The pasteboard coordinate system does not have a negative extent.)
IDML File Format Specification
101 IDML File Reference: Spreads and Master Spreads
• The units used by the pasteboard coordinate system are points, de"ned as 72 units per inch.
Changing the de"nition of points in the In Design user interface has no e&ect on the de"nition
of points used in IDML.
• Increasing a vertical coordinate (y) moves the speci"ed location down in pasteboard
coordinates. This is the same as ruler coordinates, but is “$ipped” relative to the x and y axes of
traditional geometry (i.e., what you learned in geometry and trigonometry classes), Post Script,
and PDF.
• Increasing the horizontal coordinate (x) moves the speci"ed location to the right in pasteboard
coordinates (the same as in ruler coordinates and in traditional geometry).
Transformations
In Design documents consist of (among other things) page items on spreads. These page items
have an intrinsic shape that consists of one or more paths. The shape of the paths are completely
determined by a sequence of coordinate pairs that specify either a point the path is to pass
through (the anchor point) or the curvature of the line segments connected to the anchor point
(control points). The shape of page items is completely determined by a collection of x and y
coordinates.
If you were to draw the points that make up the path of a page item on a standard sheet of graph
paper marked at 72 units per inch, the path would, in general, appear di&erent than it does
when printed from In Design. The coordinate system represented by this "ctitious graph paper
is the item’s inner coordinate system. Each page item has a distinct inner coordinate system—its
own sheet of graph paper. The path points that make up the shape of the page item are always
described in inner coordinates.
A transformation matrix speci"es the relationship between the coordinate system of the page
element (the graph paper we talked about earlier) and the coordinate system of its parent element
(another sheet of graph paper). By modifying a transformation matrix, objects can be scaled,
rotated, moved, or transformed in other ways. For example, in In Design, when you rotate a page
item by 30 degrees, it is the item’s transformation matrix that is a&ected, and not the coordinates
of the item’s individual path points. To return to our metaphor we’re rotating the the graph paper
the element is drawn on, relative to the graph paper of its parent element.
The relationship between the pasteboard coordinates of a <Document> element and the coordinate
system of a <Spread> element is determined by the Item Transform attribute of the <Spread>
element.
In IDML, page item elements are child elements of a <Spread> or <Master Spread> element, so
you’ll be more concerned with the coordinate system of those elements than with the pasteboard
coordinate system. (Note that this is unlike the In Design C++ model, where page items are
collected on layers.)
IDML File Format Specification
102 IDML File Reference: Spreads and Master Spreads
You can think of the sequence of transformations applied to an element as a “stack” of
transformations from the pasteboard coordinate system of the <Document> element, through the
inner coordinate system of the <Spread> element, and to the inner coordinate system of a <Page-
Item> element contained as a child of the <Spread> element. To position the element within
its parent element, In Design transforms the inner coordinates of the child element into the
coordinate system of its parent element.
InDesign CS5 supports multiple page sizes in a spread, so <Page> elements have acquired an
ItemTransform attribute that speci"es their location in the spread. This transformation matrix
translates the inner coordinates of the page (de"ned by the GeometricBounds attribute of the
<Page> element) into the coordinate system of the parent <Spread>.
In addition, <Page> elements now have a MasterPageTransform attribute, which de"nes the
relationship of master page items to the page. This transformation matrix transforms the inner
coordinates of the master page items into their locations on the page (i.e., it is applied a%er the
ItemTransform of the <Spread>, but before the ItemTransform of the individual master spread
page items). This attribute corresponds to the Master Page Overlay feature; refer to the InDesign
documentation for more information on this feature.
A transformation between two coordinate systems in two dimensional space is represented by a
3-by-3 transformation matrix written as:
a b 0
c d 0
e f 1
Because a transformation matrix has only six elements that can be changed, it is speci"ed in
IDML using the standard form [a b c d e f]. This transformation matrix is stored in Item-
Transform attribute of a <Page Item> element, or in the Item Transform attribute of a <Spread> or
<Master Spread> element.
To transform the inner coordinates of an element into the inner coordinates of its parent element,
In Design performs the following calculation (where T is the transformation matrix of the child
element):
a b 0
c d 0
e f 1
= TScale ( TShear ( TRotation ( TTranslate
If the transformation matrix applied to an element is the identity matrix ([1 0 0 1 0 0]), then
the inner coordinate system of the element and the inner coordinate system of its parent coincide.
The following list shows the transformation matrices for performing the most common
transformations.
• Translations are speci"ed as [1 0 0 1 tx ty], where tx and ty are the horizontal and vertical
distances to move the object, relative to the center of the pasteboard.
• Scaling is obtained using the matrix [sx 0 0 sy 0 0]. This scales the object in a given element
by sx (horizontal scaling factor) and sy (vertical scaling factor), relative to the pasteboard.
IDML File Format Specification
103 IDML File Reference: Spreads and Master Spreads
• Rotations are produced by the matrix [cos(θ) sin(θ) -sin(θ) cos(θ) 0 0], which has the
e&ect of rotating the object counterclockwise by the angle θ, relative to the pasteboard.
• Skewing is speci"ed by the matrix [1 tan(α) tan(β) 1 0 0], which skews the x (horizontal)
axis of the object by the angle α and the y (vertical) axis of the object by the angle β, relative to
the x and y axis of the pasteboard.
Transformations are applied in the following order: scale, shear, rotate, translate.
Spread Coordinates
The Item Transform attribute of a <Spread> or <Master Spread> element de"nes the relationship
of the spread to the pasteboard coordinate system. In general, only the y translation and rotation
of the transformation matrix de"ned in the Item Transform attribute will be applied to the spread.
Since pages cannot be rotated to arbitrary angles in In Design’s user interface, only 90-degree
rotations are allowed:
Item Transform="1 0 0 1 0 0" No spread rotation
Item Transform="0 1 -1 0 0 0" 90 degree clockwise spread rotation
Item Transform="0 -1 1 0 0 0" 90 degree counterclockwise spread rotation
Item Transform="-1 0 -0 -1 0 0" 180 degree spread rotation
Note: Spreads cannot be scaled or skewed using the transformation matrix in the Item Transform
attribute.
The origin of the spread coordinate system is located at center of the spread. The le% edge of the
"rst right hand page in the spread aligns with the horizontal center of the spread; the right edge of
the "rst le% hand page in the spread appears to the le%. The vertical centers of the pages align with
the vertical center of the spread. Each spread has its own coordinate system origin.
IDML File Format Specification
104 IDML File Reference: Spreads and Master Spreads
Figure 7. IDML Spread Coordinate System
-y
-x 0,0 Center of Spread
+x
Left hand page
Right hand page
+y
Note: The horizontal center of the spread does not correspond to the binding edge of the spread,
and is not marked in any way in the In Design user interface. Le% hand pages are always added to
the le% of the horizontal center of the spread; right hand pages are always added to the right.
Page Item Geometry
The location of a <Spread> element, relative to the pasteboard coordinate system, is determined
by its Item Transform attribute. The <Spread> element uses the same units of measurement
as the pasteboard coordinate system: points. The coordinate system used by a <Page Item>
element, however, can be entirely arbitrary (though the coordinates are always points in IDML
exported form InDesign). The relationship of the inner coordinates of the child element to the
coordinate system of the <Spread> element (or other parent element) is de"ned by the Item-
Transform attribute of the child element. What may appear to be absolute coordinates in a child
element are not absolute with respect to the spread coordinate system, because the values of the
ItemTransform attribute may cause the child element to move, shrink, or expand, relative to the
spread.
Most of the time, when you export IDML from In Design, <Page Item> elements that are direct
children of a <Spread> element (i.e., that are not contained by other page items, groups, or
anchored in text) will have a coordinate system that coincides with the spread coordinates.
The shape of each page item is de"ned by the contents of the <Path Geometry> element (which is
inside the <Properties> element). The <Path Geometry> element contains:
IDML File Format Specification
105 IDML File Reference: Spreads and Master Spreads
• One or more <GeometryPathType> elements representing the paths that make up the page
item. Each <GeometryPathType> element contains a <Path Point Array> element, which
contains a list of <Path Point> elements.
• Each <Path Point> element contains attributes de"ning three coordinate pairs that de"ne the
location of the path point and the curvature of the line segments connecting the path point to
the other points in the path. These attributes are named Path Point Anchor (the location of the
point), Left Direction (incoming Bezier control point), and Right Direction (outgoing Bezier
control point). Each of these attributes take the form x y (where x is the horizontal location of
the point and y is the vertical location, expressed in the inner coordinate system of the page
item).
• The Path Open attribute of the <GeometryPathType> element speci"es whether the path is an
open path or a closed path. If Is Open is true, the path is an open path; if it’s false, the path
is a closed path. An In Design path does not need to be closed to display a "ll that has been
applied to it.
Note: In Design paths use the Nonzero Winding Number rule (not the Even-Odd rule) to
determine the "ll areas of self-intersecting paths. For more on the Nonzero Winding Number
rule, refer to the Post Script Language Reference Manual.
While the shape of the page item is de"ned by the contents of the <GeometryPathType> element,
the actual location of the page item in the spread depends on the contents of the Item Transform
attribute of the page item. This transformation matrix de"nes the relationship between the inner
coordinate system of the page item and the inner coordinate system of its parent.
Figure 8. PathGeometry Element
Properties
PathGeometry
element
GeometryPath
element
Attributes
PathOpen
boolean
PathPoint
Element
Attributes
PathPointAnchor
list of doubles as a space
separated string, in the
following order: x y
LeftDirection
list of doubles as a space
separated string, in the
following order: x y
RightDirection
list of doubles as a space
separated string, in the
following order: x y
PathPoint(…)
GeometryPath(…)
IDML File Format Specification
106 IDML File Reference: Spreads and Master Spreads
Geometry Example
To better demonstrate the e&ect of transformation and object nesting in IDML, let’s follow a point
on a simple rectangle as it is transformed, nested inside another object, and then has another
transformation applied to the parent. In this example, we’ll create a rectangle with a geometric
bounds de"ned by putting the upper le% corner of the rectangle at (72, 72) and the lower right
corner at (144, 144). Both corners are speci"ed in the user interface in points, according to ruler
coordinates, and assuming that the zero point is at the upper le% corner of the page.
Figure 9. Example Rectangle
In the following "gure, we’ve selected the point using the Direct Selection tool; the location of the
point in ruler coordinates is shown in the X and Y "elds of the Control panel.
Figure 10. Selected Point
The rectangle in the above example appears in IDML as shown in the following example. The
point we’re following is highlighted in red.
IDML Example 17. Untransformed Rectangle
<Rectangle Self="ud0" ItemTransform="1 0 0 1 0 0">
<Properties>
<PathGeometry>
<GeometryPathType PathOpen="false">
<PathPointArray>
<PathPointType Anchor="72 -324" LeftDirection="72 -324"
RightDirection="72 -324"/>
<PathPointType Anchor="72 -252" LeftDirection="72 -252"
RightDirection="72 -252"/>
<PathPointType Anchor="144 -252" LeftDirection="144 -252"
IDML File Format Specification
107 IDML File Reference: Spreads and Master Spreads
RightDirection="144 -252"/>
<PathPointType Anchor="144 -324" LeftDirection="144 -324"
RightDirection="144 -324"/>
</PathPointArray>
</GeometryPathType>
</PathGeometry>
</Properties>
</Rectangle>
The parent of the <Rectangle> element is a <Spread> element. Since the rectangle has not been
transformed, the coordinates of the rectangle are therefore coincident with the same coordinates
in the spread. Again, the vertical coordinate origin for the spread is not the same as that shown on
the rulers in the user interface, which is why the y coordinates in the IDML di&er from what you
see in the "elds of the Control panel.
Next, we’ll rotate the triangle by 30 degrees around its center point. When we do this, the location
of the point in ruer coordinates changes, as shown in the following "gure.
Figure 11. Rotation Changes the Point Location Relative to the Rulers
In IDML, however, the coordinates of the point do not change. The transformation is
accomplished using the ItemTransform attribute of the <Rectangle> element, as shown in the
example below (again, we’ve used red to highlight the signi"cant parts of the IDML).
IDML Example 18. Rotation Changes the ItemTransform Attribute in IDML
<Rectangle Self="ud0" ItemTransform="0.8660254037844387 -0.5000000000000001
0.5000000000000001 0.8660254037844387 158.46925639128065 15.415316289918337">
<Properties>
<PathGeometry>
<GeometryPathType PathOpen="false">
<PathPointArray>
<PathPointType Anchor="72 -324" LeftDirection="72 -324"
RightDirection="72 -324"/>
<PathPointType Anchor="72 -252" LeftDirection="72 -252"
RightDirection="72 -252"/>
<PathPointType Anchor="144 -252" LeftDirection="144 -252"
RightDirection="144 -252"/>
<PathPointType Anchor="144 -324" LeftDirection="144 -324"
RightDirection="144 -324"/>
</PathPointArray>
</GeometryPathType>
</PathGeometry>
</Properties>
</Rectangle>
IDML File Format Specification
108 IDML File Reference: Spreads and Master Spreads
Next, we’ll add the rectangle to a group.
Figure 12. Example Rectangle Grouped with an Ellipse
Next, we’ll rotate the group by 30 degrees around its center point. As you can see from the X and
Y "elds in the Control panel, the location of the point changes relative to the ruler coordinates in
the user interface.
Figure 13. The Example Rectangle Inside a Rotated Group
In IDML, you’ll see that the <Rectangle> element now appears within a <Group> element. The
location of the point inside the <Rectangle> element remains the same; the transformations are
applied to the rectangle through the ItemTransform attributes of both the <Group> element and
the <Rectangle> element (again, we’ve highlighted the signi"cant IDML fragments with red).
Because we rotated the group by the same angle as the rectangle, the ItemTransform values are
the same (showing a 30 degree rotation), but the important point is that the ItemTransform and
PathGeometry sections of the rectangle do not change when the group was transformed.
IDML Example 19. The Rectangle is Transformed by the ItemTransform
Attribute of both the Rectangle and the Group
<Group Self="ud2" ItemTransform="0.8660254037844387 -0.5000000000000001
0.5000000000000001 0.8660254037844387 158.46925639128065 15.415316289918337">
<Rectangle Self="ud0" ItemTransform="0.8660254037844387 -0.5000000000000001
0.5000000000000001 0.8660254037844387 158.46925639128065 15.415316289918337">
<Properties>
<PathGeometry>
<GeometryPathType PathOpen="false">
<PathPointArray>
<PathPointType Anchor="72 -324" LeftDirection="72 -324"
RightDirection="72 -324"/>
<PathPointType Anchor="72 -252" LeftDirection="72 -252"
RightDirection="72 -252"/>
IDML File Format Specification
109 IDML File Reference: Spreads and Master Spreads
<PathPointType Anchor="144 -252" LeftDirection="144 -252"
RightDirection="144 -252"/>
<PathPointType Anchor="144 -324" LeftDirection="144 -324"
RightDirection="144 -324"/>
</PathPointArray>
</GeometryPathType>
</PathGeometry>
</Properties>
</Rectangle>
<Oval Self="ud1" ItemTransform="1 0 0 1 0 0">
<Properties>
<PathGeometry>
<GeometryPathType PathOpen="false">
<PathPointArray>
<PathPointType Anchor="69.6615427318801 -315.5"
LeftDirection="63.67562810529901 -315.5"
RightDirection="75.6474573584612 -315.5"/>
<PathPointType Anchor="80.5 -326.3384572681199"
LeftDirection="80.5 -320.35254264153883"
RightDirection="80.5 -332.32437189470096"/>
<PathPointType Anchor="69.6615427318801
-337.1769145362398"
LeftDirection="75.6474573584612 -337.1769145362398"
RightDirection="63.67562810529901 -337.1769145362398"/>
<PathPointType Anchor="58.82308546376021
-326.3384572681199"
LeftDirection="58.82308546376021 -332.32437189470096"
RightDirection="58.82308546376021 -320.35254264153883"/>
</PathPointArray>
</GeometryPathType>
</PathGeometry>
</Properties>
</Oval>
</Group>
The coordinates of the example point remain the same, because they’re expressed in the inner
coordinates of the rectangle. The successive application of transformations via the ItemTransform
attributes of the <Rectangle> element and its container elements (a <Group> element and a
<Spread> element, in this example) determine where the point appears on the page you see in the
InDesign user interface.
10.3.4 Rich Interactive Document Features
InDesign CS5 introduces a number of new features for creating interactive objects for export to
SWF and PDF documents. These features add a new type of page item, the Multi-State Object
(or MSO), which, like a button, is a container for a series of other page items. In addition, all
page items gained a new element, <AnimationSettings>, which controls the animation of the
object in the exported "le. The <TimingSetting> element, which appears inside the <Spread>
and <MasterSpread> elements and inside all page item elements, contains further elements that
control the timing of the animation and supported dynamic media such as video and sound..
IDML File Format Specification
110 IDML File Reference: Spreads and Master Spreads
Animation Settings
The animation of a page item exported to a SWF document is controlled by the properties of the
<AnimationSetting> element of the page item element.
Schema Example 56. AnimationSetting
AnimationSetting_Object = element AnimationSetting {
attribute TransformOffsets { list { xsd:double ,xsd:double } }?,
attribute Duration { xsd:double {minInclusive="0.125" maxInclusive="60"} }?,
attribute DesignOption { DesignOptions_EnumValue }?,
attribute EaseType { AnimationEaseOptions_EnumValue }?,
attribute Plays { xsd:int {minInclusive="1" maxInclusive="100"} }?,
attribute PlaysLoop { xsd:boolean }?,
attribute InitiallyHidden { xsd:boolean }?,
attribute HiddenAfter { xsd:boolean }?,
attribute HasCustomSettings { xsd:boolean }?,
element Properties {
element Preset {
(object_type, xsd:string ) |
(string_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue )
}?&
element MotionPathPoints { GeometryPathType_TypeDef }?&
element MotionPath { element AnimationDataPathKeyFrameType {
AnimationDataPathKeyFrameType_TypeDef }*
}?&
element OpacityArray { element AnimationDataKeyFrameType {
AnimationDataKeyFrameType_TypeDef }*
}?&
element RotationArray { element AnimationDataKeyFrameType {
AnimationDataKeyFrameType_TypeDef }*
}?&
element ScaleXArray { element AnimationDataKeyFrameType {
AnimationDataKeyFrameType_TypeDef }*
}?&
element ScaleYArray { element AnimationDataKeyFrameType {
AnimationDataKeyFrameType_TypeDef }*
}?
}
?
}
Table 70. AnimationSetting Properties Represented as Attributes
Name Type Req Description
DesignOption Design Options_
Enum Value
no Can be From Current Appearance,
To Current Appearance, or To Current-
Location.
Duration double no The duration of the animation, from .125 to 60
seconds.
EaseType Animation Ease-
Options_Enum Value
no Can be NoEase, EaseIn. EaseOut. EaseInOut.
or CustomEase.
IDML File Format Specification
111 IDML File Reference: Spreads and Master Spreads
Name Type Req Description
HasCustomSettings Boolean no If true, the animated object has custom settings.
HiddenAfter Boolean no If true, the animated object is hidden a%er
playing.
InitiallyHidden Boolean no If true, the animated object is hidden before
playing.
Plays int no The number of times to play the animation.
PlaysLoop Boolean no If true, the animation loops.
TransformOffsets list of two
doubles
no The transform o&set percentage from the target
object bounding box's le%-top corner.
Table 71. AnimationSetting Properties Represented as Elements
Name Type Req Description
MotionPath Animation Data-
Path Key Frame Type
no The list of motion path points and key frames
for this animation. MotionPath and Motion-
Path Points are mutually exclusive. Typically
a path is either de"ned by one type or the other,
but not both.
MotionPathPoints Geometry Path Type_
TypeDef
no The list of motion path points for this anima-
tion. MotionPath and Motion Path Points are
mutually exclusive. Typically a path is either
de"ned by one type or the other, but not both.
OpacityArray Animation Data Key-
Frame Type
no The list of opacity key frames for this animation.
IDML File Format Specification
112 IDML File Reference: Spreads and Master Spreads
Name Type Req Description
Preset string no The motion preset applied to the animated
object. Can be a reference to the self attribute
of a motion preset in the IDML "le, or one of
InDesign’s default motion presets: appear,
disappear, fade-in, fade-out, fly-in-
bottom, fly-in-left, fly-in-right, fly-
in-top, , fly-in-blur-bottom, fly-in-
blur-left, fly-in-blur-right, fly-in-
blur-top, fly-out-bottom, fly-out-left,
fly-out-right, fly-out-top, grow, grow-
big, move-left, move-right, move-left-
grow, move-left-shrink, move-right-
grow, move-right-shrink, rotate180cw,
rotate90cw, rotate180ccw, rotate90ccw,
shrink, spring-left, spring-right, zoom-
in-2D, zoom-out-2D , large-bounce, med-
bounce, small-bounce, multiple-bounce,
bounce-smoosh, dance, flyin-pause-
flyout, flyin-stop-flyout, gallop, pulse,
smoke, twirl, swoosh, or wave. Can also be a
custom motion preset, as the "le name (exclud-
ing its extension) containing the preset. Motion
presets are stored in the Presets/Motion presets
folder inside the In Design application folder.
User custom presets are stored the Motion Pre-
sets folder inside the Preferences folder in the
InDesign application folder.
RotationArray Animation Data Key-
Frame Type
The list of rotation key frames for this
animation.
ScaleXArray Animation Data Key-
Frame Type
The list of scale x key frames for this animation.
ScaleYArray Animation Data Key-
Frame Type
The list of scale y key frames for this animation.
IDML Example 20. AnimationSetting
<AnimationSetting TransformOffsets="0 0" Duration="1" DesignOption="FromCurrentApp
earance" EaseType="EaseIn"
Plays="1" PlaysLoop="true" InitiallyHidden="false" HiddenAfter="false"
HasCustomSettings="true">
<Properties>
<Preset type="object">u10b</Preset>
<MotionPathPoints PathOpen="true">
<PathPointArray>
</PathPointArray>
</MotionPathPoints>
<MotionPath>
<AnimationDataPathKeyFrameType KeyFrame="0">
<PathPoint Anchor="0 0" LeftDirection="0 0" RightDirection="0 0"/>
</AnimationDataPathKeyFrameType>
<AnimationDataPathKeyFrameType KeyFrame="23">
<PathPoint Anchor="0.55 4" LeftDirection="0.55 4"
RightDirection="0.55 4"/>
</AnimationDataPathKeyFrameType>
IDML File Format Specification
113 IDML File Reference: Spreads and Master Spreads
</MotionPath>
<OpacityArray>
<AnimationDataKeyFrameType KeyFrame="0" Value="0"/>
<AnimationDataKeyFrameType KeyFrame="23" Value="100"/>
</OpacityArray>
<RotationArray>
<AnimationDataKeyFrameType KeyFrame="0" Value="0"/>
<AnimationDataKeyFrameType KeyFrame="23" Value="45"/>
</RotationArray>
<ScaleXArray>
<AnimationDataKeyFrameType KeyFrame="0" Value="100"/>
<AnimationDataKeyFrameType KeyFrame="23" Value="50"/>
</ScaleXArray>
<ScaleYArray>
<AnimationDataKeyFrameType KeyFrame="0" Value="100"/>
<AnimationDataKeyFrameType KeyFrame="23" Value="150"/>
</ScaleYArray>
</Properties>
</AnimationSetting>
Animation Timing
The <TimingSetting> element contains one or more <TimingList> elements, which contain
one or more <TimingGroup> elements. Each <TimingGroup> element contains at least one
<TimingTarget> element. The <TimingTarget> element can be an animation, video, sound, or
multi-state object. Video and buttons can also be animated. The order and grouping of elements
inside the <TimingSetting> element de"nes the ordering of the animations in the object
containing the <TimingSetting>. The order of <TimingGroup> elements inside a <TimingList>
determines the sequence of animation of groups of objects, and the order of <TimingTarget>
elements in a <TimingGroup> element determines the order of animation of individual page items
inside the <TimingGroup>.
Schema Example 57. TimingSetting
TimingSetting_Object = element TimingSetting (
TimingList_Object*
)
}
Schema Example 58. TimingList
TimingList_Object = element TimingList {
attribute Self { xsd:string },
attribute TriggerEvent { DynamicTriggerEvents_EnumValue }?,
(
TimingGroup_Object*
)
}
IDML File Format Specification
114 IDML File Reference: Spreads and Master Spreads
Table 72. TimingList Properties Represented as Attributes
Name Type Req Description
Trigger Event Dynamic Trigger-
Events_ Enum Value
no The event that triggers the animation. Can
be OnPageLoad, OnPageClick, OnClick,
OnRollover, OnRelease, OnRolloff,
OnSelfClick, or OnSelfRollover.
Schema Example 60. TimingGroup
TimingGroup_Object = element TimingGroup {
attribute Self { xsd:string },
attribute Plays { xsd:int {minInclusive="1" maxInclusive="100"} }?,
attribute PlaysLoop { xsd:boolean }?,
TimingTarget_Object*
(
)
}
Table 73. TimingGroup Properties Represented as Attributes
Name Type Req Description
Plays int no The number of times to play the timing group.
Ignored if PlaysLoop is true.
Plays Loop boolean no If true, play the timing group in a loop.
Schema Example 61. TimingTarget
TimingTarget_Object = element TimingTarget {
attribute Self { xsd:string },
attribute DynamicTarget { xsd:string }?,
attribute DelaySeconds { xsd:double {minInclusive="0" maxInclusive="60"} }?,
attribute ReverseAnimation { xsd:boolean }?,
attribute TargetRole { xsd:int }?,
attribute TargetAction { xsd:int }?,
attribute Placement { xsd:int }?
}
Table 74. TimingTarget Properties Represented as Attributes
Name Type Req Description
Dynamic Target string no The animated page item, as a reference to the
Self attribute of the animated page item, video,
sound, or multi-state object. Video and buttons
can also be animated.
Delay Seconds int no The time delay in seconds for this target, relative
to the start of the current timing group.
Reverse Animation boolean no If true, reverse the animation. Only valid
when the Dynamic Trigger Event for the
<TimingList> containing the <TimingGroup>
of the <TimingTarget> is OnRolloff or
OnSelfRolloff.
IDML File Format Specification
115 IDML File Reference: Spreads and Master Spreads
Name Type Req Description
Target Role int no The target in the timing as video, sound, anima-
tion, or other suppported dynamic media type.
TargetAction int no The action associated with this target when
exported to SWF.
Placement int no The placement of the timing target in the timing
group.
IDML Example 21. TimingSetting
<TimingSetting UnassignedDynamicTargets="">
<TimingList Self="ubbTimingSetting1TimingList0" TriggerEvent="OnPageLoad">
<TimingGroup Self="ubbTimingSetting1TimingList0TimingGroup0" Plays="1"
PlaysLoop="false">
<TimingTarget Self="ubbTimingSetting1TimingList0TimingGroup0if7"
DynamicTarget="uf7" DelaySeconds="2"
ReverseAnimation="false" TargetRole="132354" TargetAction="132353"
Placement="0"/>
</TimingGroup>
<TimingGroup Self="ubbTimingSetting1TimingList0TimingGroup1" Plays="1"
PlaysLoop="false">
<TimingTarget Self="ubbTimingSetting1TimingList0TimingGroup1if8"
DynamicTarget="uf8" DelaySeconds="0"
ReverseAnimation="false" TargetRole="132355" TargetAction="132353"
Placement="0"/>
</TimingGroup>
</TimingList>
</TimingSetting>
10.3.5 Page Item Examples
The following IDML example shows a simple rectangle.
IDML Example 22. Rectangle
<Rectangle Self="ucd" Item Transform="1 0 0 1 0 0">
<Properties>
<Path Geometry>
<Geometry Path Path Open="false">
<Path Point Array>
<Path Point Type Anchor="72 -324" Left Direction="72 -324"
Right Direction="72 -324"/>
<Path Point Type Anchor="72 -252" Left Direction="72 -252"
Right Direction="72 -252"/>
<Path Point Type Anchor="144 -252" Left Direction="144 -252"
Right Direction="144 -252"/>
<Path Point Type Anchor="144 -324" Left Direction="144 -324"
Right Direction="144 -324"/>
</Path Point Array>
</Geometry Path>
</Path Geometry>
</Rectangle>
IDML File Format Specification
116 IDML File Reference: Spreads and Master Spreads
Figure 14. Simple Page Item (a Rectangle)
Nested Page Item
In Design page items can be pasted inside other page items. IDML re$ects this capability by
storing the nested page items as child elements of the page item element, as shown in the
following example.
IDML Example 23. Nested Page Item
<Rectangle Self="ucd" Item Transform="1 0 0 1 0 0">
<Properties>
<Path Geometry>
<Geometry Path Path Open="false">
<Path Point Array>
<Path Point Type Anchor="72 -324" Left Direction="72 -324"
Right Direction="72 -324"/>
<Path Point Type Anchor="72 -252" Left Direction="72 -252"
Right Direction="72 -252"/>
<Path Point Type Anchor="144 -252" Left Direction="144 -252"
Right Direction="144 -252"/>
<Path Point Type Anchor="144 -324" Left Direction="144 -324"
Right Direction="144 -324"/>
</Path Point Array>
</Geometry Path>
</Path Geometry>
</Properties>
<Rectangle Self="uda" Item Transform="1 0 0 1 0 0">
<Properties>
<Path Geometry>
<Geometry Path Path Open="false">
<Path Point Array>
<Path Point Type Anchor="84 -312" Left Direction="84 -312"
Right Direction="84 -312"/>
<Path Point Type Anchor="84 -288" Left Direction="84 -288"
Right Direction="84 -288"/>
<Path Point Type Anchor="108 -288" Left Direction="108 -288"
Right Direction="108 -288"/>
<Path Point Type Anchor="108 -312" Left Direction="108 -312"
Right Direction="108 -312"/>
</Path Point Array>
</Geometry Path>
IDML File Format Specification
117 IDML File Reference: Spreads and Master Spreads
</Path Geometry>
</Properties>
</Rectangle>
</Rectangle>
Figure 15. Nested Page Item
Rotated Page Item
The following example shows a page item that has been rotated by 30 degrees around its center
point. Note that the path point coordinates and geometric bounds remain the same as in the
previous example; only the transformation matrix changes.
In general, applying a counterclockwise rotation using the transformation matrix takes the form:
a = cos(angle), b =-sin(angle), c = sin(angle), d = cos(angle)
Where a, b, c, and d are the "rst four values in the transformation matrix and angle is the angle of
rotation (in degrees).
IDML Example 24. Rotated Page Item
<Rectangle Self="ucd" Item Transform=" 0.8660254037844387 -0.5 0.5
0.8660254037844387 0 0">
<Properties>
<Path Geometry>
<Geometry Path Path Open="false">
<Path Point Array>
<Path Point Type Anchor="72 -324" Left Direction="72 -324"
Right Direction="72 -324"/>
<Path Point Type Anchor="72 -252" Left Direction="72 -252"
Right Direction="72 -252"/>
<Path Point Type Anchor="144 -252" Left Direction="144 -252"
Right Direction="144 -252"/>
<Path Point Type Anchor="144 -324" Left Direction="144 -324"
Right Direction="144 -324"/>
</Path Point Array>
</Geometry Path>
</Path Geometry>
</Properties>
</Rectangle>
IDML File Format Specification
118 IDML File Reference: Spreads and Master Spreads
Figure 16. Rotated Page Item
The following example shows the transformation matrix for the rectangle:
a = 0.8660254037844387 = Cosine of 30 degrees.
b = -0.5 = Negative sine of 30 degrees.
c = 0.5 = Sine of 30 degrees.
d = 0.8660254037844387 = Cosine of 30 degrees.
Transformations and Nested Page Items
The following example shows a rectangle that has been rotated 30 degrees and then pasted inside
another rectangle. The container rectangle is then rotated a further 15 degrees.
<Rectangle Self="ucd" Item Transform="0.9659258262890683 -0.25881904510252074
0.25881904510252074 0.9659258262890683 0 0">
<Properties>
<Path Geometry>
<Geometry Path Path Open="false">
<Path Point Array>
<Path Point Type Anchor="72 -324" Left Direction="72 -324"
Right Direction="72 -324"/>
<Path Point Type Anchor="72 -252" Left Direction="72 -252"
Right Direction="72 -252"/>
<Path Point Type Anchor="144 -252" Left Direction="144 -252"
Right Direction="144 -252"/>
<Path Point Type Anchor="144 -324" Left Direction="144 -324"
Right Direction="144 -324"/>
</Path Point Array>
</Geometry Path>
</Path Geometry>
</Properties>
<Rectangle Self="uda" Item Transform=" 0.8660254037844387 -0.5 0.5
0.8660254037844387 0 0">
<Properties>
<Path Geometry>
<Geometry Path Path Open="false">
<Path Point Array>
<Path Point Type Anchor="84 -312" Left Direction="84 -312"
Right Direction="84 -312"/>
<Path Point Type Anchor="84 -288" Left Direction="84 -288"
IDML File Format Specification
119 IDML File Reference: Spreads and Master Spreads
Right Direction="84 -288"/>
<Path Point Type Anchor="108 -288" Left Direction="108 -288"
Right Direction="108 -288"/>
<Path Point Type Anchor="108 -312" Left Direction="108 -312"
Right Direction="108 -312"/>
</Path Point Array>
</Geometry Path>
</Path Geometry>
</Properties>
</Rectangle>
</Rectangle>
Figure 17. Outer Rectangle
Figure 18. Inner Rectangle
Viewed from In Design’s user interface, you can see that the rotation is cumulative—the rotation
applied to the inner rectangle is the sum of its original rotation plus the rotation of the outer
rectangle. The transformation matrices in the IDML example re$ect this rotation. The following
is the transformation matrix for the outer rectangle (formatted for easier reading):
a = 0.9659258262890683 = Cosine of 15 degrees.
b = -0.25881904510252074 = Negative sine of 15 degrees.
c = 0.25881904510252074 = Sine of 15 degrees.
d = 0.9659258262890683 = Cosine of 15 degrees.
The following example shows the transformation matrix for the inner rectangle:
a = 0.8660254037844387 = Cosine of 30 degrees.
b = -0.5000000000000001 = Negative sine of 30 degrees.
c = 0.5000000000000001 = Sine of 30 degrees.
d = 0.8660254037844387 = Cosine of 30 degrees.
IDML File Format Specification
120 IDML File Reference: Spreads and Master Spreads
Spline Item Containing an Imported Graphic
Placed (imported) graphics always appear inside a spline item. This spline item can be a rectangle,
a graphic line, an oval, or a polygon (these spline items can be nested inside a <State> element of
a <Button> element or a <MultiStateObject> element). There is no special class of page item for a
graphic frame.
The imported graphic itself can be an <Image>, a <PDF>, an <ImportedPage>, an <EPS>, a <PICT>,
or a <WMF>. All of these elements share the attributes and elements of the <Graphic> object, and
add a few attributes and elements speci"c to their speci"c object type. <WMF> and <PICT> elements
are identical to <Graphic>.
Schema Example 62. Graphic Schema
Graphic_Object = element Graphic {
attribute Self { xsd:string },
attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
attribute ImageTypeName { xsd:string }?,
attribute AppliedObjectStyle { xsd:string }?,
attribute ItemTransform { TransformationMatrixType_TypeDef }?,
attribute LinkResourceId { xsd:int }?,
attribute ParentInterfaceChangeCount { list { xsd:int * } }?,
attribute TargetInterfaceChangeCount { list { xsd:int * } }?,
attribute LastUpdatedInterfaceChangeCount { list { xsd:int * } }?,
attribute LinkedSourceTableId { xsd:int }?,
attribute HorizontalLayoutConstraints { list { DimensionsConstraints_EnumValue
,DimensionsConstraints_EnumValue ,DimensionsConstraints_EnumValue } }?,
attribute VerticalLayoutConstraints { list { DimensionsConstraints_EnumValue
,DimensionsConstraints_EnumValue ,DimensionsConstraints_EnumValue } }?,
attribute FillColor { xsd:string }?,
attribute FillTint { xsd:double }?,
attribute OverprintFill { xsd:boolean }?,
attribute CornerRadius { xsd:double }?,
attribute StrokeWeight { xsd:double }?,
attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
attribute EndCap { EndCap_EnumValue }?,
attribute EndJoin { EndJoin_EnumValue }?,
attribute StrokeType { xsd:string }?,
attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
attribute StrokeDashAndGap { list { xsd:double * } }?,
attribute LeftLineEnd { ArrowHead_EnumValue }?,
attribute RightLineEnd { ArrowHead_EnumValue }?,
attribute StrokeColor { xsd:string }?,
attribute StrokeTint { xsd:double }?,
attribute GradientFillStart { UnitPointType_TypeDef }?,
attribute GradientFillLength { xsd:double }?,
attribute GradientFillAngle { xsd:double }?,
attribute GradientStrokeStart { UnitPointType_TypeDef }?,
attribute GradientStrokeLength { xsd:double }?,
attribute GradientStrokeAngle { xsd:double }?,
attribute OverprintStroke { xsd:boolean }?,
attribute GapColor { xsd:string }?,
attribute GapTint { xsd:double }?,
attribute OverprintGap { xsd:boolean }?,
attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
IDML File Format Specification
121 IDML File Reference: Spreads and Master Spreads
attribute Nonprinting { xsd:boolean }?,
attribute ItemLayer { xsd:string }?,
attribute Locked { xsd:boolean }?,
attribute GradientFillHiliteLength { xsd:double }?,
attribute GradientFillHiliteAngle { xsd:double }?,
attribute GradientStrokeHiliteLength { xsd:double }?,
attribute GradientStrokeHiliteAngle { xsd:double }?,
attribute CornerOption { CornerOptions_EnumValue }?,
attribute Visible { xsd:boolean }?,
attribute Name { xsd:string }?,
attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
attribute TopRightCornerOption { CornerOptions_EnumValue }?,
attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
attribute TopLeftCornerRadius { xsd:double }?,
attribute TopRightCornerRadius { xsd:double }?,
attribute BottomLeftCornerRadius { xsd:double }?,
attribute BottomRightCornerRadius { xsd:double }?,
element Properties {
element Contents { text }?&
element GraphicProxy { text }?&
element ClippingPathGeometry { element GeometryPathType {
GeometryPathType_TypeDef }*
}?&
element GraphicBounds { RectangleBoundsType_TypeDef }?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
(
}
?
,
TransparencySetting_Object?&
TextWrapPreference_Object?&
LinkedPageItemOption_Object?&
MetadataPacketPreference_Object?&
AnimationSetting_Object?&
TimingSetting_Object?
)
}
<Graphic> elements inherit all of the attributes and elements of page item elements, and add the
unique attributes and elements shown in the following tables.
Table 75. Graphic Properties Represented as Attributes
Name Type Req Description
Image Type Name string no The type of the image.
IDML File Format Specification
122 IDML File Reference: Spreads and Master Spreads
Table 76. Graphic Properties Represented as Elements
Name Type Req Description
Clipping Path-
Geometry
Geometry Path no The clipping path for the graphic.
Contents text no If the graphic is embedded (rather than stored
externally), this element contains the data of the
graphic.
Graphic Bounds list of doubles no The geometric bounds of the image, in the form
[x1, y1, x2, y2].
Graphic Proxy text no The data of the proxy image.
Table 77. Image Properties Represented as Attributes
Name Type Req Description
ActualPPI list of two
doubles
no The actual pixels per inch of the image, in the
form horizontal, vertical
EffectivePpi list of two
doubles
no The e&ective pixels per inch of the image, in the
form horizontal, vertical.
Image Rendering-
Intent
Rendering Intent_
Enum Value
no The rendering intent of the image.
Space string no
Table 78. Image Properties Represented as Elements
Name Type Req Description
Profile Profile_EnumValue
or string
no The color pro"le applied to the image. Can
be NoCMS, PostScript CMS, UseDocument,
Working, or a string that is the name of the
pro"le.
Table 79. PDF and EPS Properties Represented as Attributes
Name Type Req Description
ActualPPI list of two
doubles
no The actual pixels per inch of the image, in the
form horizontal, vertical
CMKY Vector Policy Placed Vector-
Profile Policy_
Enum Value
no The color pro"le policy for CMYK content in
a placed graphic. Can be HonorAllProfiles,
IgnoreAll, or Ignore Output Intent.
EffectivePpi list of two
doubles
no The e&ective pixels per inch of the image, in the
form horizontal, vertical.
Gray Vector Policy Placed Vector-
Profile Policy_
Enum Value
no The color pro"le policy for grayscale content in
a placed graphic. Can be HonorAllProfiles,
IgnoreAll, or Ignore Output Intent.
RGB Vector Policy0 Placed Vector-
Profile Policy_
Enum Value
no The color pro"le policy for RGB content in a
placed graphic. Can be HonorAllProfiles,
IgnoreAll, or Ignore Output Intent.
IDML File Format Specification
123 IDML File Reference: Spreads and Master Spreads
Name Type Req Description
Space string no
PDFs include the <PDFAttribute> element, which contains properties speci"c to imported PDFs.
Schema Example 63. PDFAttribute
PDFAttribute_Object = element PDFAttribute {
attribute PageNumber { xsd:int }?,
attribute PDFCrop { PDFCrop_EnumValue }?,
attribute TransparentBackground { xsd:boolean }?
}
Table 80. PDFAttribute Properties Represented as Attributes
Name Type Req Description
PageNumber int no
PDFCrop PDF Crop _Enum Value no
Trans parent Back-
ground
boolean no
InDesign can import pages from other InDesign documents as graphics. These pages are
represented in IDML by the <ImportedPage> element, which contains the following unique
properties.
Table 81. ImportedPage Properties Represented as Attributes
Name Type Req Description
Imported Page Crop Imported Page Crop-
Options_Enum Value
no The cropping applied to the imported page. Can
be CropContent, CropBleed, or CropSlug.
Page Number int no Which page of the InDesign document should
be imported.
The following example shows an image that has been placed inside the rectangle that we’ve used
in the previous examples. We’ve omitted the XMP metadata from this example.
IDML Example 25. Page Item Containing an Imported Graphic
<Rectangle Self="ufe" ContentType="GraphicType" ItemLayer="ub6"
AppliedObjectStyle="ObjectStyle/$ID/[None]" Visible="true" Name="$ID/"
ItemTransform="1 0 0 1 -4.200000000000003 6.600000000000023">
<Properties>
<PathGeometry>
<GeometryPathType PathOpen="false">
<PathPointArray>
<PathPointType Anchor="76.2 -330.6"
LeftDirection="76.2 -330.6" RightDirection="76.2 -330.6"/>
<PathPointType Anchor="76.2 -258.6"
LeftDirection="76.2 -258.6" RightDirection="76.2 -258.6"/>
<PathPointType Anchor="148.2 -258.6"
LeftDirection="148.2 -258.6" RightDirection="148.2 -258.6"/>
<PathPointType Anchor="148.2 -330.6"
IDML File Format Specification
124 IDML File Reference: Spreads and Master Spreads
LeftDirection="148.2 -330.6" RightDirection="148.2 -330.6"/>
</PathPointArray>
</GeometryPathType>
</PathGeometry>
</Properties>
<FrameFittingOption LeftCrop="12.000000000000014" TopCrop="18.720000000000027"
RightCrop="12" BottomCrop="18.719999999999914"/>
<Image Self="u101" Space="$ID/#Links_RGB" ActualPpi="300 300"
EffectivePpi="500 500" ImageRenderingIntent="UseColorSettings"
LocalDisplaySetting="Default" ImageTypeName="$ID/JPEG"
AppliedObjectStyle="ObjectStyle/$ID/[None]"
ItemTransform="0.6 0 0 0.6 69 -341.83200000000005"
Visible="true" Name="$ID/">
<Properties>
<Profile type="string">$ID/Embedded</Profile>
<GraphicBounds Left="0" Top="0" Right="144" Bottom="157.44"/>
</Properties>
<TextWrapPreference Inverse="false" ApplyToMasterPageOnly="false"
TextWrapSide="BothSides" TextWrapMode="None">
<Properties>
<TextWrapOffset Top="0" Left="0" Bottom="0" Right="0"/>
</Properties>
<ContourOption ContourType="SameAsClipping" IncludeInsideEdges="false"
ContourPathName="$ID/"/>
</TextWrapPreference>
<Link Self="u106" AssetURL="$ID/" AssetID="$ID/"
LinkResourceURI="file:C:/pumpkin.jpg"
LinkResourceFormat="$ID/JPEG" StoredState="Normal" LinkClassID="35906"
LinkClientID="257" LinkResourceModified="false" LinkObjectModified="false"
ShowInUI="true" CanEmbed="true" CanUnembed="true" CanPackage="true"
ImportPolicy="NoAutoImport" ExportPolicy="NoAutoExport"
LinkImportStamp="file 129053780397050268 396019"
LinkImportModificationTime="2009-12-15T11:13:59"
LinkImportTime="2009-12-21T16:52:00"/>
<ClippingPathSettings ClippingType="None" InvertPath="false"
IncludeInsideEdges="false" RestrictToFrame="false"
UseHighResolutionImage="true" Threshold="25" Tolerance="2" InsetFrame="0"
AppliedPathName="$ID/" Index="-1"/>
<ImageIOPreference ApplyPhotoshopClippingPath="true" AllowAutoEmbedding="true"
AlphaChannelName="$ID/"/>
</Image>
</Rectangle>
The example image is slightly larger than the rectangle. When you select the graphic in the In-
Design user interface, you can see that the bounds of the graphic are outside the bounds of the
containing rectangle (in the illustration below, the graphic is selected; the frame itself is the light
blue square within the bounding box of the graphic).
IDML File Format Specification
125 IDML File Reference: Spreads and Master Spreads
Figure 19. Page Item Containing an Imported Graphic
Movies and Sounds
InDesign can place movie and sound "les into a document. These media "les can be played in
exported SWF and PDF "les. Movies and sounds share most of their properties with other page
items, but each features a few unique properties.
Supported movie and sound "le types: MOV (QuickTime), MPEG, AVI, WAV, AU, AIF, SWF,
FLV, F4V, MP4, MP3 and H.264-encoded MOV "les.
Table 82. Movie Properties Represented as Attributes
Name Type Req Description
CanChoosePosters boolean no If true, the user can choose a poster image for
the movie.
ControllerSkin string no Applicable to FLV/F4V clips only. The video con-
troller skin name. Can be None, SkinOverAll,
SkinOverAllNoCaption, Skin Over All No-
Full No Caption, Skin Over All No Fullscreen,
Skin Over All No Vol NoCaptionNoFull,
SkinOverPlay. Uses None as a default value.
CustomPoster boolean no If true, the movie has had a custom poster image
applied to it.
Description string no A description of the movie.
EmbedInPDF boolean no If true, embed the movie in exported PDF.
FilePath string no The "le path to the movie "le.
FloatingWindow boolean no If true, display the movie in a $oating window
(on playback in an exported PDF or SWF docu-
ment).
FloatingWindow-
Position
Floating Window-
Position_ Enum-
Value
no The position of the $oating window. Can be
UpperLeft, UpperMiddle, UpperRight,
CenterLeft, Center, CenterRight,
LowerLeft, LowerMiddle, or LowerRight.
Floating Window-
Size
Floating Window-
Size_ Enum Value
no The Size of the $oating window. Can be
OneFifth, OneFourth, OneHalf, Full,
Double, Triple, Quadruple, or Max. Only
valid when FloatingWindow is true.
IntrinsicBounds list of int no The bounds of the movie "le, as width, height.
IDML File Format Specification
126 IDML File Reference: Spreads and Master Spreads
Name Type Req Description
MovieLoop boolean no If true, loop the movie in the exported PDF or
SWF document.
PlayMode Play Mode_Enum-
Value
no The play mode for the movie. Can be Once,
StayOpen, or RepeatPlay.
PlayOnPageTurn boolean no If true, the movie plays automatically when a
user views the page that contains the movie
poster in the exported PDF or SWF document.
PosterAvailable boolean no If true, the movie "le contains a poster image.
ShowController boolean no Applicable to FLV/F4V clips only. If true, dis-
plays controller skin with mouse rollover.
ShowControls boolean no If true, show movie playback controls in the
exported PDF or SWF document
URL string no The URL of the movie.
IDML Example 26. Movie
<Movie Self="ufa" Name="birdbridge.f4v" Description=""
FloatingWindowPosition="Center" FloatingWindowSize="Full"
PlayOnPageTurn="false" ShowControls="false" FloatingWindow="false"
EmbedInPDF="false" PlayMode="Once" CustomPoster="false"
FilePath="C:\birdbridge.f4v" ControllerSkin="SkinOver AllNoCaption"
ShowController="true" MovieLoop="false" ItemTransform="1 0 0 1 0 0"
LocalDisplaySetting="Default" AppliedObjectStyle="ObjectStyle/$ID/[None]"
Visible="true">
A <NavigationPoint> element in a <Movie> element represents a cue point in the video.
Schema Example 64. NavigationPoint
NavigationPoint_Object = element NavigationPoint {
attribute Self { xsd:string },
attribute Id { xsd:int }?,
attribute Name { xsd:string }?,
attribute Time { xsd:double }?
}
Name Type Req Description
Id int no Unique identi"er for the cue point. If this is not
speci"ed, a unique number will be assigned as
the Id for the navigation point.
Name string no The UI display name (not unique) - free form
string.
Time double no The time in seconds. While reading this value,
InDesign rounds it up to two places of decimal.
IDML Example 27. NavigationPoint
<NavigationPoint Self="uf7NavigationPoint0" Id="1" Name="Point 1" Time="0.53"/>
IDML File Format Specification
127 IDML File Reference: Spreads and Master Spreads
Table 83. Sound Properties Represented as Attributes
Name Type Req Description
Description string no A description of the movie.
Do Not Print Poster boolean no If true, the poster image associated with the
sound "le will not print.
EmbedInPDF boolean no If true, embed the movie in exported PDF.
FilePath string no The "le path to the movie "le.
SoundLoop boolean no If true, loop the sound in the exported PDF or
SWF document.
Stop On Page Turn boolean no If true, the sound stops automatically when a
user navigates away from the page containing
the sound poster in the exported PDF or SWF
document.
IDML Example 28. Sound
<Sound Self="uf3" Name="abc.mp3" Description="" PlayOnPageTurn="false"
SoundLoop="false" StopOnPageTurn="false" DoNotPrintPoster="false"
EmbedInPDF="true" FilePath="C:\abc.mp3" ItemTransform="1 0 0 1 0 0"
LocalDisplaySetting="Default" AppliedObjectStyle="ObjectStyle/$ID/[None]"
Visible="true">
Text Frames
<Text Frame> elements have a few properties that other page items do not have. The following
sections describe these properties.
Schema Example 65. Text Frame
TextFrame_Object = element TextFrame {
attribute Self { xsd:string },
attribute ParentStory { xsd:string }?,
attribute PreviousTextFrame { xsd:string }?,
attribute NextTextFrame { xsd:string }?,
attribute ContentType { ContentType_EnumValue }?,
attribute AllowOverrides { xsd:boolean }?,
attribute FillColor { xsd:string }?,
attribute FillTint { xsd:double }?,
attribute OverprintFill { xsd:boolean }?,
attribute CornerRadius { xsd:double }?,
attribute StrokeWeight { xsd:double }?,
attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
attribute EndCap { EndCap_EnumValue }?,
attribute EndJoin { EndJoin_EnumValue }?,
attribute StrokeType { xsd:string }?,
attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
attribute StrokeDashAndGap { list { xsd:double * } }?,
attribute LeftLineEnd { ArrowHead_EnumValue }?,
attribute RightLineEnd { ArrowHead_EnumValue }?,
attribute StrokeColor { xsd:string }?,
attribute StrokeTint { xsd:double }?,
attribute GradientFillStart { UnitPointType_TypeDef }?,
IDML File Format Specification
128 IDML File Reference: Spreads and Master Spreads
attribute GradientFillLength { xsd:double }?,
attribute GradientFillAngle { xsd:double }?,
attribute GradientStrokeStart { UnitPointType_TypeDef }?,
attribute GradientStrokeLength { xsd:double }?,
attribute GradientStrokeAngle { xsd:double }?,
attribute OverprintStroke { xsd:boolean }?,
attribute GapColor { xsd:string }?,
attribute GapTint { xsd:double }?,
attribute OverprintGap { xsd:boolean }?,
attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
attribute Nonprinting { xsd:boolean }?,
attribute ItemLayer { xsd:string }?,
attribute Locked { xsd:boolean }?,
attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
attribute GradientFillHiliteLength { xsd:double }?,
attribute GradientFillHiliteAngle { xsd:double }?,
attribute GradientStrokeHiliteLength { xsd:double }?,
attribute GradientStrokeHiliteAngle { xsd:double }?,
attribute AppliedObjectStyle { xsd:string }?,
attribute CornerOption { CornerOptions_EnumValue }?,
attribute Visible { xsd:boolean }?,
attribute Name { xsd:string }?,
attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
attribute TopRightCornerOption { CornerOptions_EnumValue }?,
attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
attribute TopLeftCornerRadius { xsd:double }?,
attribute TopRightCornerRadius { xsd:double }?,
attribute BottomLeftCornerRadius { xsd:double }?,
attribute BottomRightCornerRadius { xsd:double }?,
attribute ItemTransform { TransformationMatrixType_TypeDef }?,
element Properties {
element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }*
}?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
(
}
?
,
(TextPath_Object*&
GridDataInformation_Object?),
(TransparencySetting_Object?&
StrokeTransparencySetting_Object?&
FillTransparencySetting_Object?&
ContentTransparencySetting_Object?&
TextFramePreference_Object?&
AnchoredObjectSetting_Object?&
BaselineFrameGridOption_Object?&
TextWrapPreference_Object?&
LinkedPageItemOption_Object?&
ObjectExportOption_Object?&
AnimationSetting_Object?&
TimingSetting_Object?)
IDML File Format Specification
129 IDML File Reference: Spreads and Master Spreads
)
)
Table 84. Text Frame Properties Represented as Attributes
Name Type Req Description
Next Text Frame string no The value of the Self attribute of the next text frame
(relative to the threading order of the text frames in the
story) linked to this text frame.
Parent Story string no The value of the Self attribute of the story that
appears in this text frame.
Previous Text Frame string no The value of the Self attribute of the previous text
frame (relative to the threading order of the text
frames in the story) linked to this text frame.
It is important to note that the text of a text frame does not appear in the <Text Frame> element.
Instead, the <Text Frame> element contains a reference to a <Story> element (usually stored
within a Story.xml "le within the IDML package). That element contains the text that appears in
the text frame. This is true even when the story is linked to an external "le—the text frame refers
to the Story.xml "le in the IDML package, not to the external "le, and the <Story> element
contains the reference to the external "le.
The following example shows a simple text frame.
IDML File Format Specification
130 IDML File Reference: Spreads and Master Spreads
IDML Example 29. Text Frame
<Text Frame Self="ucd" Parent Story="ue7" Previous Text Frame="n" Next Text Frame="n"
Content Type="Text Type" Item Transform="1 0 0 1 0 0">
<Properties>
<Path Geometry>
<GeometryPathType Path Open="false">
<Path Point Array>
<Path Point Type Anchor="72 -324" Left Direction="72 -324"
Right Direction="72 -324"/>
<Path Point Type Anchor="72 -252" Left Direction="72 -252"
Right Direction="72 -252"/>
<Path Point Type Anchor="144 -252" Left Direction="144 -252"
Right Direction="144 -252"/>
<Path Point Type Anchor="144 -324" Left Direction="144 -324"
Right Direction="144 -324"/>
</Path Point Array>
</GeometryPathType>
</Path Geometry>
</Properties>
<Text Frame Preference Text Column Count="1" Text Column Gutter="12" Text Column Fixed-
Width="72" Use Fixed Column Width="false" First Baseline Offset="Ascent Offset" Minimum-
First Baseline Offset="0" Vertical Justification="Top Align" Vertical Threshold="0"
Ignore Wrap="false">
<Properties>
<Inset Spacing type="list">
<List Item type="unit">0</List Item>
<List Item type="unit">0</List Item>
<List Item type="unit">0</List Item>
<List Item type="unit">0</List Item>
</Inset Spacing>
</Properties>
</Text Frame Preference>
<Baseline Frame Grid Option Use Custom Baseline Frame Grid="false"
Starting Offset For Baseline Frame Grid="0"
Baseline Frame Grid Relative Option="Top Of Inset" <Properties>
<Baseline Frame Grid Color type="enumeration">Light Blue
</Baseline Frame Grid Color>
</Properties>
</Baseline Frame Grid Option>
</Text Frame>
Baseline Frame Grid Increment="12">
IDML File Format Specification
131 IDML File Reference: Spreads and Master Spreads
Figure 20. Text Frame
The following example shows how to use the Next Text Frame attribute to thread (or link) the text
frame to another text frame. Note that the two text frames refer to the same story; you cannot
have linked text frames that refer to separate stories.
IDML Example 30. Threaded (Linked) Text Frames
<Text Frame Self="ucd" Applied Object Style="Object Style\[Normal Graphics Frame]"
Parent Story="uf2" Previous Text Frame="n" Next Text Frame="u108" Content Type="Text-
Type" Story Offset="n" Stroke Weight="0"
Stroke Color="Swatch\c None" Item Transform="1 0 0 1 0 -396" >
<Properties>
<Path Geometry>
<GeometryPathType Path Open="false">
<Path Point Array>
<Path Point Type Anchor="36 72" Left Direction="36 72"
Right Direction="36 72"/>
<Path Point Type Anchor="36 96" Left Direction="36 96"
Right Direction="36 96"/>
<Path Point Type Anchor="136 96" Left Direction="136 96"
Right Direction="136 96"/>
<Path Point Type Anchor="136 72" Left Direction="136 72"
Right Direction="136 72"/>
</Path Point Array>
</GeometryPathType>
</Path Geometry>
</Properties>
</Text Frame>
<Text Frame Self="u108" Applied Object Style="Object Style\k[None]" Parent Story="uf2"
Previous Text Frame="ucd" Next Text Frame="n" Content Type="Text Type" Story Offset="n"
Stroke Weight="1" Item Transform="1 0 0 1 0 -396">
<Properties>
<Path Geometry>
<GeometryPathType Path Open="false">
<Path Point Array>
<Path Point Type Anchor="36 108" Left Direction="36 108"
Right Direction="36 108"/>
IDML File Format Specification
132 IDML File Reference: Spreads and Master Spreads
<Path Point Type Anchor="36 132" Left Direction="36 132"
Right Direction="36 132"/>
<Path Point Type Anchor="136 132" Left Direction="136 132"
Right Direction="136 132"/>
<Path Point Type Anchor="136 108" Left Direction="136 108"
Right Direction="136 108"/>
</Path Point Array>
</GeometryPathType>
</Path Geometry>
</Properties>
</Text Frame>
Figure 21. Threaded Text Frames
Text Frame Preference
The <Text Frame> element also di&ers from other page items in that it contains a <Text Frame-
Preference> element. The <Text Frame Preference> element contains attributes and elements that
control properties such as number of columns in the text frame, the text frame inset distances,
and the method used to calculate the location of the "rst baseline of text in the text frame.
Schema Example 66. Text Frame Preference
TextFramePreference_Object = element TextFramePreference {
attribute TextColumnCount { xsd:int {minInclusive="1" maxInclusive="40"} }?,
attribute TextColumnGutter { xsd:double {minInclusive="0"
maxInclusive="8640"} }?,
attribute TextColumnFixedWidth { xsd:double {minInclusive="0"
maxInclusive="8640"} }?,
attribute UseFixedColumnWidth { xsd:boolean }?,
attribute FirstBaselineOffset { FirstBaseline_EnumValue }?,
attribute MinimumFirstBaselineOffset { xsd:double {minInclusive="0"
maxInclusive="8640"} }?,
attribute VerticalJustification { VerticalJustification_EnumValue }?,
attribute VerticalThreshold { xsd:double {minInclusive="0" maxInclusive="8640"}
}?,
}?,
attribute IgnoreWrap { xsd:boolean }?,
attribute UseFlexibleColumnWidth { xsd:boolean }?,
attribute TextColumnMaxWidth { xsd:double {minInclusive="0" maxInclusive="8640"}
attribute AutoSizingType { AutoSizingTypeEnum_EnumValue }?,
attribute AutoSizingReferencePoint { AutoSizingReferenceEnum_EnumValue }?,
IDML File Format Specification
133 IDML File Reference: Spreads and Master Spreads
attribute UseMinimumHeightForAutoSizing { xsd:boolean }?,
attribute MinimumHeightForAutoSizing { xsd:double }?,
attribute UseMinimumWidthForAutoSizing { xsd:boolean }?,
attribute MinimumWidthForAutoSizing { xsd:double }?,
attribute UseNoLineBreaksForAutoSizing { xsd:boolean }?,
attribute VerticalBalanceColumns { xsd:boolean }?,
element Properties {
element InsetSpacing {
(unit_type, xsd:double {minInclusive="0" maxInclusive="8640"} ) |
(list_type,
element ListItem { unit_type, xsd:double {minInclusive="0"
maxInclusive="8640"} },
element ListItem { unit_type, xsd:double {minInclusive="0"
maxInclusive="8640"} },
element ListItem { unit_type, xsd:double {minInclusive="0"
maxInclusive="8640"} },
element ListItem { unit_type, xsd:double {minInclusive="0"
maxInclusive="8640"} })
}?
}
?
}
Table 85. Text Frame Preference Properties Represented as Attributes
Name Type Req Description
First Baseline-
Offset
First Baseline_
Enum Value
no The distance between the baseline of the text
and the top inset of the text frame. Values can be
Ascent Offset, Cap Height, Leading Offset,
Embox Height, XHeight, or Fixed Height.
Ignore Wrap boolean no If true, ignores text wrap settings for drawn or
placed objects which intersect the text frame.
Minimum First-
Baseline Offset
double {min-
Inclusive="0"
max-
Inclusive="8640"}
no The minimum distance between the baseline of
the text and the top inset of the text frame.
Self string yes The unique I D of the object.
Text Column Count int no The number of columns in the text frame. Note:
Depending on the value of the Use Fixed-
Column Width attribute, the number of
columns can change automatically when
the text frame size changes. Range: 1
to 40.
Text Column Fixed-
Width
double no The column width of the columns in the text
frame. Range: 0 to 8640.
Text Column Gutter double no The space between columns of the text frame.
Range: 0 to 8640.
IDML File Format Specification
134 IDML File Reference: Spreads and Master Spreads
Name Type Req Description
Use Fixed Column-
Width
boolean no If true, maintains column width when the
text frame is resized. If false, causes columns
to resize when the text frame is resized. Note:
When true, resizing the frame can change the
number of columns in the frame.
Vertical Balance-
Columns
boolean no If true, balance vertical justi"cation across all
columns in the text frame.
Vertical-
Justification
Vertical-
Justification_
Enum Value
no The vertical alignment of the text in the text
frame. Values can be Top Align, Center Align,
Bottom Align, or Justify Align.
Vertical Threshold double no The maximum amount of vertical space between
two paragraphs. Note: Valid only when the
Vertical Justification attribute is is
Justify Align; the speci"ed amount is applied
in addition to the space before or space a%er val-
ues de"ned for the paragraphs in the text frame.
Range: 0 to 8640.
UseFlexibleColumn
Width
boolean no If true, maintains column width between a min
and max range when the text frame is resized.
If false, causes columns to resize when the text
frame is resized.
Note: When true, resizing the frame can change
the number of columns in the frame.
TextColumnMax
Width
double {minInclu-
sive="0"
maxInclusive=
"8640"}
no The maximum column width of the columns in
the text frame. Use 0 to indicate no upper limit.
AutoSizingType AutoSizingTypeE-
num_EnumValue
no Auto-sizing type of text frame. Based on type,
reference value is automatically adjusted. For
example, for height only type, top-le% reference
point becomes top-center. Recommended to
change auto-sizing type, a%er setting other auto-
sizing attributes.
AutoSizingReference-
Point
AutoSizingRefer-
enceEnum_Enum-
Value
no The reference point for auto sizing of text frame.
Reference point is automatically adjusted to the
suitable value depending on the auto-sizing type
value. As an example, top le% reference point
becomes top center for height only dimension.
UseMinimumHeight-
ForAutoSizing
boolean no If true, minimum height value is used during
the auto-sizing of text frame.
MinimumHeightFor-
AutoSizing
double no The minimum height for auto-sizing of the text
frame.
UseMinimumWidth-
ForAutoSizing
boolean no If true, minimum width value is used during the
auto-sizing of text frame.
MinimumWidthFor-
AutoSizing
double no The minimum width for auto-sizing of the text
frame.
UseNoLineBreaksFor-
AutoSizing
boolean no If true, line-breaks are not introduced a%er auto
sizing.
IDML File Format Specification
135 IDML File Reference: Spreads and Master Spreads
Table 86. Text Frame Preference Properties Represented as Elements
Name Type Req Description
InsetSpacing double or
ListItem elements
no The text insets applied to the text frame. Rect-
angular text frames can use four inset values
(for the le%, top, right, and bottom of the frame);
non-rectangular text frames can use a single
value (all sides). Can contain up to four List-
Item elements.
IDML Example 31. Text Frame Preference (Single Inset Spacing Value)
<Text Frame Preference Self="uda Text Frame Preference1" Text Column Count="2" Text-
Column Fixed Width="120" First Baseline Offset="Leading Offset">
<Properties>
<Inset Spacing type="unit">6</Inset Spacing>
</Properties>
</Text Frame Preference>
IDML Example 32. Text Frame Preference (Multiple Inset Spacing Values)
<Text Frame Preference Self="uda Text Frame Preference1" Text Column Count="2" Text-
Column Fixed Width="120" <Properties>
<Inset Spacing type="list">
<List Item type="unit">2</List Item>
<List Item type="unit">3</List Item>
<List Item type="unit">6</List Item>
<List Item type="unit">3</List Item>
</Inset Spacing>
</Properties>
</Text Frame Preference>
First Baseline Offset="Leading Offset">
The following example shows how to create a multi-column text frame using the properties of the
Text Frame Preference object.
IDML Example 33. Multi-Column Text Frame
<Text Frame Self="ucd" Applied Object Style="Object Style\k[Normal Graphics Frame]"
Parent Story="uf2" Previous Text Frame="n" Next Text Frame="n" Content Type="Text Type"
Story Offset="n" Stroke Weight="0" Stroke Color="Swatch\c None"
Item Transform="1 0 0 1 6 -432">
<Properties>
<Path Geometry>
<GeometryPathType Path Open="false">
<Path Point Array>
<Path Point Type Anchor="30 72" Left Direction="30 72"
Right Direction="30 72"/>
<Path Point Type Anchor="30 144" Left Direction="30 144"
Right Direction="30 144"/>
<Path Point Type Anchor="186 144" Left Direction="186 144"
Right Direction="186 144"/>
<Path Point Type Anchor="186 72" Left Direction="186 72"
Right Direction="186 72"/>
</Path Point Array>
</GeometryPathType>
</Path Geometry>
IDML File Format Specification
136 IDML File Reference: Spreads and Master Spreads
</Properties>
<Text Frame Preference Self="ucd Text Frame Preference1" Text Column Count="2"
Text Column Gutter="12" Text Column Fixed Width="72" Use Fixed Column Width="false"
First Baseline Offset="Ascent Offset" Minimum First Baseline Offset="0"
Vertical Justification="Top Align" Vertical Threshold="0" Ignore Wrap="false">
<Properties>
<Inset Spacing type="list">
<List Item type="unit">0</List Item>
<List Item type="unit">0</List Item>
<List Item type="unit">0</List Item>
<List Item type="unit">0</List Item>
</Inset Spacing>
</Properties>
</Text Frame Preference>
</Text Frame>
Figure 22. Multi-Column Text Frame
Baseline Frame Grid Options
Text frames can also contain a <Baseline Frame Grid Option> element. This element contains
properties expressed as attributes and elements that control the baseline grid options for the text
frame. The baseline frame grid a&ects paragraphs in the text frame that have been set to snap
to the baseline grid—if the Use Custom Baseline Grid attribute is true, then the baselines of the
paragraphs will snap to the grid de"ned by the <Baseline Frame Grid> element; it it’s false, they’ll
snap to the document baseline grid (which is de"ned in the <Grid Preference> element). For
more on grids and guides, refer to the In Design online help.
IDML File Format Specification
137 IDML File Reference: Spreads and Master Spreads
Schema Example 67. Baseline Frame Grid
BaselineFrameGridOption_Object = element BaselineFrameGridOption {
attribute UseCustomBaselineFrameGrid { xsd:boolean }?,
attribute StartingOffsetForBaselineFrameGrid { xsd:double {minInclusive="0"
maxInclusive="8640"} }?,
attribute BaselineFrameGridRelativeOption {
BaselineFrameGridRelativeOption_EnumValue }?,
attribute BaselineFrameGridIncrement { xsd:double {minInclusive="1"
maxInclusive="8640"} }?,
element Properties {
element BaselineFrameGridColor { InDesignUIColorType_TypeDef }?
}
?
}
IDML Example 34. Baseline Frame Grid
<Baseline Frame Grid Option Frame Grid="true" <Properties>
<Baseline Frame Grid Color </Properties>
</Baseline Frame Grid Option>
Self="uda Baseline Frame Grid Option1" Baseline Frame Grid Relative Option="Top Of Margin">
Use Custom Baseline-
type="enumeration">Light Blue</Baseline Frame Grid Color>
Table 87. Baseline Frame Grid Properties Expressed as Attributes
Name Type Req Description
Use Custom Baseline
Frame Grid
boolean no If true, uses a custom baseline frame grid.
Starting Offset For
Baseline Frame Grid
double no The amount to o&set the baseline grid.
Minimum 0, maximum 8640.
Baseline Frame Grid
Relative Option
Baseline-
Frame Grid-
Relative
Option_Enum Value
no The object from which to o&set the custom base-
line grid. Can be Top Of Page, Top Of Margin,
Top Of Frame, or Top Of Inset.
Baseline Frame-
Grid Increment
double no The distance between grid lines. Minimum 0,
maximum 8640.
Table 88. Baseline Frame Grid Properties Represented as Elements
Name Type Req Description
Baseline Frame-
Grid Color
In Design UIColor-
Type
no The grid line color, speci"ed either as an array
of three doubles, each in the range 0 to 255 and
representing R, G, and B values, or as a UI color.
Transparency
You can apply transparency e&ects to page items in an In Design layout. In IDML, you accomplish
this using the <Transparency Setting> element. A child element (or elements) of this element
specify the transparency e&ect you want to apply.
IDML File Format Specification
138 IDML File Reference: Spreads and Master Spreads
Schema Example 68. Transparency Setting
TransparencySetting_Object = element TransparencySetting {
(
BlendingSetting_Object?&
DropShadowSetting_Object?&
FeatherSetting_Object?&
InnerShadowSetting_Object?&
OuterGlowSetting_Object?&
InnerGlowSetting_Object?&
BevelAndEmbossSetting_Object?&
SatinSetting_Object?&
DirectionalFeatherSetting_Object?&
GradientFeatherSetting_Object?
)
}
Schema Example 69. Blending Setting
BlendingSetting_Object = element BlendingSetting {
attribute BlendMode { BlendMode_EnumValue }?,
attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
attribute KnockoutGroup { xsd:boolean }?,
attribute IsolateBlending { xsd:boolean }?
}
In the following example, a <Blending Setting> element applies transparency to the <Oval>
element. The appearance of a transparent object is a&ected by the transparency $attener settings
of the document and of the spread containing the transparent page items.
IDML Example 35. Transparency
<Oval Self="ucd" Fill Color="Color\c C=100 M=0 Y=0 K=0">
<Transparency Setting Self="ucd Transparency Setting1">
<Blending Setting Self="ucd Transparency Setting1Blending Setting1" Opacity="50"/>
</Transparency Setting>
</Oval>
Figure 23. Transparency
Group
In Design page items can be grouped, and groups can contain other groups. Each object stored
inside a group is represented as a child element of the <Group> element, as shown in the following
example.
IDML File Format Specification
139 IDML File Reference: Spreads and Master Spreads
IDML Example 36. Group
<Group Self="u111" Item Transform="1 0 0 1 0 0">
<Rectangle Self="u10d" Applied Object Style="Object Style\k[Normal Graphics Frame]"
Item Transform ="1 0 0 1 0 0">
<Properties>
<Path Geometry >
<GeometryPathType Path Open="false">
<Path Point Array>
<Path Point Type Anchor="36.5 -359.5" Left Direction="36.5 -359.5"
Right Direction="36.5 -359.5"/>
<Path Point Type Anchor="36.5 -330.5" Left Direction="36.5 -330.5"
Right Direction="36.5 -330.5"/>
<Path Point Type Anchor="65.5 -330.5" Left Direction="65.5 -330.5"
Right Direction="65.5 -330.5"/>
<Path Point Type Anchor="65.5 -359.5" Left Direction="65.5 -359.5"
Right Direction="65.5 -359.5"/>
</Path Point Array>
</GeometryPathType>
</Path Geometry >
</Properties>
</Rectangle>
<Polygon Self="u10e" Applied Object Style="Object Style\k[Normal Graphics Frame]"
Item Transform="1 0 0 1 0 0">
<Properties>
<Path Geometry >
<GeometryPathType Path Open="false">
<Path Point Array>
<Path Point Type Anchor="113.71119986540519 -359.5"
Left Direction="113.71119986540519 -359.5"
Right Direction="113.71119986540519 -359.5"/>
<Path Point Type Anchor="97.28830013459482 -359.5"
Left Direction="97.28830013459482 -359.5"
Right Direction="97.28830013459482 -359.5"/>
<Path Point Type Anchor="89.07685026918963 -345.2773516293136"
Left Direction="89.07685026918963 -345.2773516293136"
Right Direction="89.07685026918963 -345.2773516293136"/>
<Path Point Type Anchor="97.28830013459482 -331.0547032586272"
Left Direction="97.28830013459482 -331.0547032586272"
Right Direction="97.28830013459482 -331.0547032586272"/>
<Path Point Type Anchor="113.71119986540518 -331.0547032586272"
Left Direction="113.71119986540518 -331.0547032586272"
Right Direction="113.71119986540518 -331.0547032586272"/>
<Path Point Type Anchor="121.92264973081038 -345.2773516293136"
Left Direction="121.92264973081038 -345.2773516293136"
Right Direction="121.92264973081038 -345.2773516293136"/>
</Path Point Array>
</GeometryPathType>
</Path Geometry >
</Properties>
</Polygon>
<Oval Self="u10f" Applied Object Style="Object Style\k[Normal Graphics Frame]"
Item Transform="1 0 0 1 0 0">
<Properties>
<Path Geometry >
IDML File Format Specification
140 IDML File Reference: Spreads and Master Spreads
<GeometryPathType Path Open="false">
<Path Point Array>
<Path Point Type Anchor="51 -288.5005"
Left Direction="42.99187117333334 -288.5005"
Right Direction="59.00812882666667 -288.5005"/>
<Path Point Type Anchor="65.5 -303.0005"
Left Direction="65.5 -294.9923711733333"
Right Direction="65.5 -311.0086288266666"/>
<Path Point Type Anchor="51 -317.5005"
Left Direction="59.00812882666667 -317.5005"
Right Direction="42.99187117333334 -317.5005"/>
<Path Point Type Anchor="36.5 -303.0005"
Left Direction="36.5 -311.0086288266666"
Right Direction="36.5 -294.9923711733333"/>
</Path Point Array>
</GeometryPathType>
</Path Geometry >
</Properties>
</Oval>
<Rectangle Self="u110" Applied Object Style="Object Style\k[Normal Graphics Frame]"
Item Transform="1 0 0 1 0 0">
<Properties>
<Path Geometry >
<GeometryPathType Path Open="false">
<Path Point Array>
<Path Point Type Anchor="90.99950000000001 -317.5005"
Left Direction="90.99950000000001 -317.5005"
Right Direction="90.99950000000001 -317.5005"/>
<Path Point Type Anchor="90.99950000000001 -288.5005"
Left Direction="90.99950000000001 -288.5005"
Right Direction="90.99950000000001 -288.5005"/>
<Path Point Type Anchor="119.99950000000001 -288.5005"
Left Direction="119.99950000000001 -288.5005"
Right Direction="119.99950000000001 -288.5005"/>
<Path Point Type Anchor="119.99950000000001 -317.5005"
Left Direction="119.99950000000001 -317.5005"
Right Direction="119.99950000000001 -317.5005"/>
</Path Point Array>
</GeometryPathType>
</Path Geometry >
</Properties>
</Rectangle>
</Group>
IDML File Format Specification
141 IDML File Reference: Spreads and Master Spreads
Figure 24. Group
Buttons
The <Button> element can contain <State> elements, which contain page items that de"ne the
appearance of the button and attributes that de"ne the behavior of the button. Buttons are objects
you can de"ne in In Design that become interactive elements in exported PDF and SWF.
Schema Example 70. Button
Button_Object = element Button {
attribute Self { xsd:string },
attribute VisibilityInPdf { VisibilityInPdf_EnumValue }?,
attribute PrintableInPdf { xsd:boolean }?,
attribute HiddenUntilTriggered { xsd:boolean }?,
attribute Name { xsd:string }?,
attribute Description { xsd:string }?,
attribute LinkResourceId { xsd:int }?,
attribute ParentInterfaceChangeCount { list { xsd:int * } }?,
attribute TargetInterfaceChangeCount { list { xsd:int * } }?,
attribute LastUpdatedInterfaceChangeCount { list { xsd:int * } }?,
attribute LinkedSourceTableId { xsd:int }?,
attribute HorizontalLayoutConstraints { list { DimensionsConstraints_EnumValue
,DimensionsConstraints_EnumValue ,DimensionsConstraints_EnumValue } }?,
attribute VerticalLayoutConstraints { list { DimensionsConstraints_EnumValue
,DimensionsConstraints_EnumValue ,DimensionsConstraints_EnumValue } }?,
attribute AllowOverrides { xsd:boolean }?,
attribute FillColor { xsd:string }?,
attribute FillTint { xsd:double }?,
attribute OverprintFill { xsd:boolean }?,
attribute CornerRadius { xsd:double }?,
attribute StrokeWeight { xsd:double }?,
attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
attribute EndCap { EndCap_EnumValue }?,
attribute EndJoin { EndJoin_EnumValue }?,
attribute StrokeType { xsd:string }?,
attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
attribute StrokeDashAndGap { list { xsd:double * } }?,
attribute LeftLineEnd { ArrowHead_EnumValue }?,
attribute RightLineEnd { ArrowHead_EnumValue }?,
attribute StrokeColor { xsd:string }?,
IDML File Format Specification
142 IDML File Reference: Spreads and Master Spreads
attribute StrokeTint { xsd:double }?,
attribute GradientFillStart { UnitPointType_TypeDef }?,
attribute GradientFillLength { xsd:double }?,
attribute GradientFillAngle { xsd:double }?,
attribute GradientStrokeStart { UnitPointType_TypeDef }?,
attribute GradientStrokeLength { xsd:double }?,
attribute GradientStrokeAngle { xsd:double }?,
attribute OverprintStroke { xsd:boolean }?,
attribute GapColor { xsd:string }?,
attribute GapTint { xsd:double }?,
attribute OverprintGap { xsd:boolean }?,
attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
attribute Nonprinting { xsd:boolean }?,
attribute ItemLayer { xsd:string }?,
attribute Locked { xsd:boolean }?,
attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
attribute GradientFillHiliteLength { xsd:double }?,
attribute GradientFillHiliteAngle { xsd:double }?,
attribute GradientStrokeHiliteLength { xsd:double }?,
attribute GradientStrokeHiliteAngle { xsd:double }?,
attribute AppliedObjectStyle { xsd:string }?,
attribute CornerOption { CornerOptions_EnumValue }?,
attribute Visible { xsd:boolean }?,
attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
attribute TopRightCornerOption { CornerOptions_EnumValue }?,
attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
attribute TopLeftCornerRadius { xsd:double }?,
attribute TopRightCornerRadius { xsd:double }?,
attribute BottomLeftCornerRadius { xsd:double }?,
attribute BottomRightCornerRadius { xsd:double }?,
attribute ItemTransform { TransformationMatrixType_TypeDef }?,
element Properties {
element PathBoundingBox { RectangleBoundsType_TypeDef }?&
element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }*
}?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
(TransparencySetting_Object?&
AnchoredObjectSetting_Object?&
TextWrapPreference_Object?&
LinkedPageItemOption_Object?&
AnimationSetting_Object?),
TimingSetting_Object?,
(State_Object*&
Behavior_Object*&
GotoFirstPageBehavior_Object*&
GotoLastPageBehavior_Object*&
GotoNextPageBehavior_Object*&
GotoPreviousPageBehavior_Object*&
IDML File Format Specification
143 IDML File Reference: Spreads and Master Spreads
GotoNextViewBehavior_Object*&
GotoPreviousViewBehavior_Object*&
GotoURLBehavior_Object*&
GotoAnchorBehavior_Object*&
MovieBehavior_Object*&
SoundBehavior_Object*&
ShowHideFieldsBehavior_Object*&
OpenFileBehavior_Object*&
ViewZoomBehavior_Object*&
SubmitFormBehavior_Object*&
ClearFormBehavior_Object*&
PrintFormBehavior_Object*&
AnimationBehavior_Object*&
GotoNextStateBehavior_Object*&
GotoPreviousStateBehavior_Object*&
GotoStateBehavior_Object*&
GotoPageBehavior_Object*)
)
}
Most of the properties of a <Button> element are shared with other page items. For a listing of
these properties, see “Common Page Item Properties.” A <Button> element can also have the
following properties.
Table 89. Button Properties Expressed as Attributes
Name Type Req Description
Description string no The description of the button.
Name string no The name of the button.
Visibility In Pdf Visibility In Pdf_
Enum Value
no The "eld’s visibility in the PDF document. Can
be Visible In Pdf (The "eld is visible), Hidden-
In Pdf (The "eld is not visible), Visible-
But Does Not Print In Pdf (The "eld is visible
when the PDF document is displayed on-screen
but invisible when the document is printed),
or Hidden But Printable In Pdf (The "eld is
invisible when the PDF document is displayed
on-screen but visible when the document is
printed).
Table 90. Button Properties Expressed as Properties
Name Type Req Description
Path Bounding Box Rectangle Bounds-
Type_TypeDef
no The geometric bounds of the button, in the form
[x1, y1, x2, y2].
Schema Example 71. State
State_Object = element State {
attribute Self { xsd:string },
attribute Active { xsd:boolean }?,
attribute Enabled { xsd:boolean }?,
element Properties {
IDML File Format Specification
144 IDML File Reference: Spreads and Master Spreads
element Statetype {
(enum_type, StateTypes_EnumValue ) |
(long_type, xsd:int )
}?
(
}
?
,
Oval_Object*&
Rectangle_Object*&
GraphicLine_Object*&
TextFrame_Object*&
Polygon_Object*&
Graphic_Object*&
Image_Object*&
EPS_Object*&
WMF_Object*&
PICT_Object*&
PDF_Object*&
Group_Object*&
EPSText_Object*
)
}
Table 91. State Properties Represented as Attributes
Name Type Req Description
Active boolean no If true, the state is the active (or front most) state
in the user interface.
Enabled boolean no If true, objects that use the state appear in PDF
documents. If false, objects that use the state do
not appear in the document when the event that
activates the state, such as a mouseover, occurs.
Name string yes The name of the state.
Statetype State Types_Enum-
Value
no The type of user action that dictates the button’s
appearance. Can be Up, Rollover, or Down.
Button properties represented as attributes are identical to those of other page items (see
“Common Page Item Properties”). The main di&erence between a <Button> element and other
page item elements is that the <Button> contains <State> elements (elements that de"ne the
appearance of the button in response to certain actions in an exported PDF or SWF), and can
contain one or more of the “Behavior” objects, which are discussed a%er the following example.
For more on button states and behaviors, refer to the In Design online help.
IDML Example 37. Button
<Button Self="ud6" Name="Go To First Page" Description="" Fill Color="Color/Black"
Item Transform="1 0 0 1 0 0">
<Properties>
<Path Bounding Box Left="36" Top="-336.25" Right="76" Bottom="-312"/>
</Properties>
<State Self="ud6i0" Name="Up" Active="true" Enabled="true" Statetype="Up">
<Group Self="ud5" Fill Color="Color/Black" Item Transform="1 -0 -0 1 -0 -0">
IDML File Format Specification
145 IDML File Reference: Spreads and Master Spreads
<Polygon Self="ucc" Content Type="Unassigned" Fill Color="Color/Black"
Stroke Weight="0" Item Transform="1 0 0 1 0 0">
<Properties>
<Path Geometry>
<GeometryPathType Path Open="false">
<Path Point Array>
<Path Point Type Anchor="36 -324" Left Direction="36 -324"
Right Direction="36 -324"/>
<Path Point Type Anchor="60 -312" Left Direction="60 -312"
Right Direction="60 -312"/>
<Path Point Type Anchor="60 -336.25" Left Direction="60 -336.25"
Right Direction="60 -336.25"/>
</Path Point Array>
</GeometryPathType>
</Path Geometry>
</Properties>
<Transparency Setting>
<Bevel And Emboss Setting Applied="true" Style="Emboss" Size="3"/>
</Transparency Setting>
</Polygon>
<Rectangle Self="ud3" Story Title="$ID/" Content Type="Unassigned"
Fill Color="Color/Black" Stroke Weight="0" Stroke Color="Swatch/None"
Item Transform="1 0 0 1 0 0">
<Properties>
<Path Geometry>
<GeometryPathType Path Open="false">
<Path Point Array>
<Path Point Type Anchor="66 -336.25" Left Direction="66 -336.25"
Right Direction="66 -336.25"/>
<Path Point Type Anchor="66 -312" Left Direction="66 -312"
Right Direction="66 -312"/>
<Path Point Type Anchor="76 -312" Left Direction="76 -312"
Right Direction="76 -312"/>
<Path Point Type Anchor="76 -336.25" Left Direction="76 -336.25"
Right Direction="76 -336.25"/>
</Path Point Array>
</GeometryPathType>
</Path Geometry>
</Properties>
<Transparency Setting>
<Bevel And Emboss Setting Applied="true" Style="Emboss" Size="3"/>
</Transparency Setting>
</Rectangle>
</Group>
</State>
<Goto First Page Behavior Self="ud7" Zoom Setting="Inherit Zoom"
Name="Go To First Page" Enable Behavior="true" Behavior Event="Mouse Down"/>
</Button>
IDML File Format Specification
146 IDML File Reference: Spreads and Master Spreads
Figure 25. Button
Behaviors
You can create buttons in In Design that perform an action when the document is exported to
PDF format. For example, you can create a button that jumps to a di&erent page of the PDF
document or plays a movie clip. The type of action that a button can perform is called a behavior.
For more on In Design’s button features, refer to the In Design documentation.
Schema Example 72. Behavior
Behavior_Object = element Behavior {
attribute Self { xsd:string },
attribute Name { xsd:string }?,
attribute EnableBehavior { xsd:boolean }?,
attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
The schemas for the behavior elements are all very similar. Rather than show them all here, we’ll
present the attributes common to all behavior elements, then describe the details of speci"c
behavior element schemas when they di&er from the others.
Table 92. Common Behavior Properties Represented as Attributes
Name Type Req Description
Name string no The name of the behavior.
Enable Behavior boolean no If true, enable the button behavior.
Behavior Event Behavior Events_
Enum Value
no The event that triggers the behavior. Can be
Mouse Up, Mouse Down, Mouse Enter, Mouse-
Exit, On Focus, or On Blur.
The Go To Page, Goto First Page Behavior, Goto Last Page Behavior, Goto Next Page Behavior, Goto-
Previous Page Behavior, Goto Next View Behavior, and Goto Previous View Behavior di&er from the
Behavior element only in that they contain a Zoom Setting attribute.
IDML File Format Specification
147 IDML File Reference: Spreads and Master Spreads
Name Type Req Description
Zoom Setting Go To Zoom Options_
Enum Value
no The zoon setting of the behavior. Can be
Inherit Zoom, Fit Window, Fit Width, Fit-
Visible, or Actual Size.
The Goto URLBehavior element di&ers from the Behavior element in that it has an additional
attribute, URL.
Name Type Req Description
URL string no The U RL hyperlink of the button.
The Goto Anchor Behavior contains three attributes that are not shared with the Behavior element:
Zoom Setting (described above), Anchor Name, and File Path.
Name Type Req Description
Anchor Name string no The name of the anchor.
File Path string no The "le path to the "le containing the anchor.
The GotoNextState, GotoPreviousState, and GotoState behaviors control the display of states in
a multi-state object.
Table 93. GotoNextStateBehavior Properties Represented as Attributes
Name Type Req Description
Associated Multi-
State Object
string no The animation page item, as a reference to the
Self attribute of the page item.
Loops To Next Or-
Previous
boolean no If true, will loop to the next or previous state of
the multi-state object.
Table 94. GotoPreviousStateBehavior Properties Represented as Elements
Name Type Req Description
State string no The multi-state object state to go to, as a refer-
ence to the Self attribute of a State element.
Table 95. GotoStateBehavior Properties Represented as Attributes
Name Type Req Description
Associated Multi-
State Object
string no The animation page item, as a reference to the
Self attribute of the page item.
Go Back On Roll Off boolean no If true, will automatically go back to the prior
state on roll o& of the rollover event.
IDML File Format Specification
148 IDML File Reference: Spreads and Master Spreads
Table 96. GotoStateBehavior Properties Represented as Attributes
Name Type Req Description
Associated Multi-
State Object
string no The animation page item, as a reference to the
Self attribute of the page item.
Go Back On Roll Off boolean no If true, will automatically go back to the prior
state on roll o& of the rollover event.
The AnimationBehavior element de"nes the display of animated page items.
Table 97. AnimationBehavior Properties Represented as Attributes
Name Type Req Description
Animated PageItem string no The animation page item, as a reference to the
Self attribute of the page item.
Auto Reverse On-
Roll Off
boolean no If true, will automatically play the animation in
reverse on roll o& of the rollover event.
Operation Animation-
PlayOperations_
EnumValue
no The playback mode. Can be Play, Stop, Pause,
Resume, ReversePlayback, or StopAll.
The Movie Behavior element di&ers from the Behavior element in that it has two additional
attributes, Movie Item and Operation.
Name Type Req Description
Movie Item string no The path to the movie "le.
Navigation Point ID int no The id of the navigation point to play from.
This corresponds to the Id attribute of a
<NavigationPoint> element of the <Movie>
element, whose Self attribute is de"ned in
the pre-existing <MovieBehavior> attribute
MovieItem. This property is ignored for all
operations other than Play From Navigation-
Point.
Operation Movie Play-
Operations_Enum-
Value
no Can be Play, Play From Navigation Point,
Stop, Pause, Resume, or StopAll.
The Sound Behavior element di&ers from the Behavior element in that it has two additional
attributes, Sound Item and Operation.
Name Type Req Description
Sound Item string no The path to the sound "le.
Operation Play Operations_
Enum Value
no Can be Play, Stop, Pause, Resume, or
StopAll.
The Show Hide Fields Behavior element has two attributes that di&er from other Behavior
elements, Fields To Show and Fields To Hide.
Name Type Req Description
IDML File Format Specification
149 IDML File Reference: Spreads and Master Spreads
Fields To Show list of strings
as a space-
separated string
no A list of the "elds to show, as a series of refer-
ences (using the value of the Self attribute of
the elements to refer to).
Fields To Hide list of strings
as a space-
separated string
no A list of the "elds to hide, as a series of references
(using the value of the Self attribute of the ele-
ments to refer to).
The Open File Behavior element has an attributes that di&ers from the Behavior element: File-
Path.
Name Type Req Description
File Path string no The "le path to the "le to open.
The View Zoom Behavior element has an attributes that di&ers from the Behavior element: View-
Zoom Style.
Name Type Req Description
View Zoom Style View Zoom Style_
Enum Value
no Can be Full Screen, Zoom In, Zoom Out, Fit-
Page, Actual Size, Fit Width, Fit Visible,
Single Page, One Column, or Two Column.
The Goto Page Behavior element has two attributes that di&er from the Behavior element: View-
Zoom Style (described above) and Page Number.
Name Type Req Description
Page Number int no The number of the page to display.
Multi-State Object
A multi-state object is very similar to a button, in that it contains states that control the visibility
of page items stored within each state. A multi-state object di&ers from a button in that it can
contain more than three states, and that the display of the states is controlled by an object outside
the multi-state object (typically, a button).
In IDML, the <MultiStateObject> element contains <State> elements, which, as in a <Button>
element, contain page items.
Schema Example 73. MultiStateObject
MultiStateObject_Object = element MultiStateObject {
attribute Self { xsd:string },
attribute InitiallyHidden { xsd:boolean }?,
attribute Name { xsd:string }?,
attribute Description { xsd:string }?,
attribute LinkResourceId { xsd:int }?,
attribute ParentInterfaceChangeCount { list { xsd:int * } }?,
attribute TargetInterfaceChangeCount { list { xsd:int * } }?,
attribute LastUpdatedInterfaceChangeCount { list { xsd:int * } }?,
attribute LinkedSourceTableId { xsd:int }?,
attribute HorizontalLayoutConstraints { list { DimensionsConstraints_EnumValue
,DimensionsConstraints_EnumValue ,DimensionsConstraints_EnumValue } }?,
IDML File Format Specification
150 IDML File Reference: Spreads and Master Spreads
attribute VerticalLayoutConstraints { list { DimensionsConstraints_EnumValue
,DimensionsConstraints_EnumValue ,DimensionsConstraints_EnumValue } }?,
attribute AllowOverrides { xsd:boolean }?,
attribute FillColor { xsd:string }?,
attribute FillTint { xsd:double }?,
attribute OverprintFill { xsd:boolean }?,
attribute CornerRadius { xsd:double }?,
attribute StrokeWeight { xsd:double }?,
attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
attribute EndCap { EndCap_EnumValue }?,
attribute EndJoin { EndJoin_EnumValue }?,
attribute StrokeType { xsd:string }?,
attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
attribute StrokeDashAndGap { list { xsd:double * } }?,
attribute LeftLineEnd { ArrowHead_EnumValue }?,
attribute RightLineEnd { ArrowHead_EnumValue }?,
attribute StrokeColor { xsd:string }?,
attribute StrokeTint { xsd:double }?,
attribute GradientFillStart { UnitPointType_TypeDef }?,
attribute GradientFillLength { xsd:double }?,
attribute GradientFillAngle { xsd:double }?,
attribute GradientStrokeStart { UnitPointType_TypeDef }?,
attribute GradientStrokeLength { xsd:double }?,
attribute GradientStrokeAngle { xsd:double }?,
attribute OverprintStroke { xsd:boolean }?,
attribute GapColor { xsd:string }?,
attribute GapTint { xsd:double }?,
attribute OverprintGap { xsd:boolean }?,
attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
attribute Nonprinting { xsd:boolean }?,
attribute ItemLayer { xsd:string }?,
attribute Locked { xsd:boolean }?,
attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
attribute GradientFillHiliteLength { xsd:double }?,
attribute GradientFillHiliteAngle { xsd:double }?,
attribute GradientStrokeHiliteLength { xsd:double }?,
attribute GradientStrokeHiliteAngle { xsd:double }?,
attribute AppliedObjectStyle { xsd:string }?,
attribute CornerOption { CornerOptions_EnumValue }?,
attribute Visible { xsd:boolean }?,
attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
attribute TopRightCornerOption { CornerOptions_EnumValue }?,
attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
attribute TopLeftCornerRadius { xsd:double }?,
attribute TopRightCornerRadius { xsd:double }?,
attribute BottomLeftCornerRadius { xsd:double }?,
attribute BottomRightCornerRadius { xsd:double }?,
attribute ItemTransform { TransformationMatrixType_TypeDef }?,
element Properties {
element PathBoundingBox { RectangleBoundsType_TypeDef }?&
element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }*
}?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
IDML File Format Specification
151 IDML File Reference: Spreads and Master Spreads
}?
(
}
?
,
TransparencySetting_Object?&
AnchoredObjectSetting_Object?&
TextWrapPreference_Object?&
LinkedPageItemOption_Object?&
State_Object*&
AnimationSetting_Object?&
TimingSetting_Object?
)
}
The <MultiStateObject> element shares most of its properties with all other page items, but adds
unique properties.
Table 98. MultiStateObject Properties Represented as Attributes
Name Type Req Description
Initially Hidden boolean no If true, the multi-state object is initially hidden.
Description string no A description of the multi-state object.
Name string no The name of the mult-state object.
Table 99. MultiStateObject Properties Represented as Elements
Name Type Req Description
Path Bounding Box list of doubles no The bounding box of the multi-state object, in
the form le%, top, right, bottom.
IDML Example 38. MultiStateObject
<MultiStateObject Self="ucc" InitiallyHidden="false" Name="Spinner" Description=""
ItemLayer="ub6" Locked="false" LocalDisplaySetting="Default"
AppliedObjectStyle="ObjectStyle/$ID/[None]" Visible="true"
ItemTransform="1 0 0 1 5 -391">
<Properties>
<PathBoundingBox Left="67" Top="67" Right="139" Bottom="139"/>
</Properties>
<State Self="ucci9" Active="true" Enabled="true">
<Properties>
<Statetype type="long">9</Statetype>
</Properties>
<Group Self="uce" LocalDisplaySetting="Default"
AppliedObjectStyle="ObjectStyle/$ID/[None]" Visible="true" Name="Up"
ItemTransform="1 0 0 1 0 0">
<Rectangle Self="ucd" ContentType="GraphicType" StoryTitle="$ID/"
LocalDisplaySetting="Default" 0"eAngle="0"
AppliedObjectStyle="ObjectStyle/$ID/[None]" Visible="true"
Name="$ID/" ItemTransform="1 0 0 1 0 0">
<Properties>
IDML File Format Specification
152 IDML File Reference: Spreads and Master Spreads
<PathGeometry>
<GeometryPathType PathOpen="false">
<PathPointArray>
<PathPointType Anchor="67 67" LeftDirection="67 67"
RightDirection="67 67"/>
<PathPointType Anchor="67 139" LeftDirection="67 139"
RightDirection="67 139"/>
<PathPointType Anchor="139 139" LeftDirection="139 139"
RightDirection="139 139"/>
<PathPointType Anchor="139 67" LeftDirection="139 67"
RightDirection="139 67"/>
</PathPointArray>
</GeometryPathType>
</PathGeometry>
</Properties>
</Rectangle>
<Polygon Self="ud5" ContentType="Unassigned" StoryTitle="$ID/"
FillColor="Color/DGC1_446a" StrokeWeight="0" StrokeColor="Swatch/None"
LocalDisplaySetting="Default" 0"eAngle="0"
AppliedObjectStyle="ObjectStyle/$ID/[Normal Graphics Frame]" Visible="true"
Name="$ID/" ItemTransform="1 0 0 1 5 5.0000000000000036">
<Properties>
<PathGeometry>
<GeometryPathType PathOpen="false">
<PathPointArray>
<PathPointType Anchor="62 134" LeftDirection="62 134"
RightDirection="62 134"/>
<PathPointType Anchor="134 134" LeftDirection="134 134"
RightDirection="134 134"/>
<PathPointType Anchor="98 62" LeftDirection="98 62"
RightDirection="98 62"/>
</PathPointArray>
</GeometryPathType>
</PathGeometry>
</Properties>
</Polygon>
</Group>
</State>
<State Self="uccia" Active="false" Enabled="true">
<Properties>
<Statetype type="long">10</Statetype>
</Properties>
<Group Self="ucf" LocalDisplaySetting="Default"
AppliedObjectStyle="ObjectStyle/$ID/[None]" Visible="true" Name="Right"
ItemTransform="1 0 0 1 0 0">
<Rectangle Self="ud0" ContentType="GraphicType" StoryTitle="$ID/"
LocalDisplaySetting="Default" 0"eAngle="0"
AppliedObjectStyle="ObjectStyle/$ID/[None]" Visible="true" Name="$ID/"
ItemTransform="1 0 0 1 0 0">
<Properties>
<PathGeometry>
<GeometryPathType PathOpen="false">
<PathPointArray>
<PathPointType Anchor="67 67" LeftDirection="67 67"
IDML File Format Specification
153 IDML File Reference: Spreads and Master Spreads
RightDirection="67 67"/>
<PathPointType Anchor="67 139" LeftDirection="67 139"
RightDirection="67 139"/>
<PathPointType Anchor="139 139" LeftDirection="139 139"
RightDirection="139 139"/>
<PathPointType Anchor="139 67" LeftDirection="139 67"
RightDirection="139 67"/>
</PathPointArray>
</GeometryPathType>
</PathGeometry>
</Properties>
</Rectangle>
<Polygon Self="ud6" ContentType="Unassigned" StoryTitle="$ID/"
FillColor="Color/DGC1_446b" StrokeWeight="0" StrokeColor="Swatch/None"
LocalDisplaySetting="Default" 0"eAngle="0"
AppliedObjectStyle="ObjectStyle/$ID/[Normal Graphics Frame]" Visible="true"
Name="$ID/" ItemTransform="1 0 0 1 5 5.0000000000000036">
<Properties>
<PathGeometry>
<GeometryPathType PathOpen="false">
<PathPointArray>
<PathPointType Anchor="62 62" LeftDirection="62 62"
RightDirection="62 62"/>
<PathPointType Anchor="62 134" LeftDirection="62 134"
RightDirection="62 134"/>
<PathPointType Anchor="134 98" LeftDirection="134 98"
RightDirection="134 98"/>
</PathPointArray>
</GeometryPathType>
</PathGeometry>
</Properties>
</Polygon>
</Group>
</State>
<State Self="uccib" Active="false" Enabled="true">
<Properties>
<Statetype type="long">11</Statetype>
</Properties>
<Group Self="ud1" LocalDisplaySetting="Default"
AppliedObjectStyle="ObjectStyle/$ID/[None]" Visible="true" Name="Down"
ItemTransform="1 0 0 1 0 0">
<Rectangle Self="ud2" ContentType="GraphicType" StoryTitle="$ID/"
LocalDisplaySetting="Default" 0"eAngle="0"
AppliedObjectStyle="ObjectStyle/$ID/[None]" Visible="true" Name="$ID/"
ItemTransform="1 0 0 1 0 0">
<Properties>
<PathGeometry>
<GeometryPathType PathOpen="false">
<PathPointArray>
<PathPointType Anchor="67 67" LeftDirection="67 67"
RightDirection="67 67"/>
<PathPointType Anchor="67 139" LeftDirection="67 139"
RightDirection="67 139"/>
<PathPointType Anchor="139 139" LeftDirection="139 139"
IDML File Format Specification
154 IDML File Reference: Spreads and Master Spreads
RightDirection="139 139"/>
<PathPointType Anchor="139 67" LeftDirection="139 67"
RightDirection="139 67"/>
</PathPointArray>
</GeometryPathType>
</PathGeometry>
</Properties>
</Rectangle>
<Polygon Self="ud7" ContentType="Unassigned" StoryTitle="$ID/"
FillColor="Color/DGC1_446c" StrokeWeight="0" StrokeColor="Swatch/None"
LocalDisplaySetting="Default" 0"eAngle="0"
AppliedObjectStyle="ObjectStyle/$ID/[Normal Graphics Frame]" Visible="true"
Name="$ID/" ItemTransform="1 0 0 1 5 5.0000000000000036">
<Properties>
<PathGeometry>
<GeometryPathType PathOpen="false">
<PathPointArray>
<PathPointType Anchor="62 62" LeftDirection="62 62"
RightDirection="62 62"/>
<PathPointType Anchor="98 134" LeftDirection="98 134"
RightDirection="98 134"/>
<PathPointType Anchor="134 62" LeftDirection="134 62"
RightDirection="134 62"/>
</PathPointArray>
</GeometryPathType>
</PathGeometry>
</Properties>
</Polygon>
</Group>
</State>
<State Self="uccic" Active="false" Enabled="true">
<Properties>
<Statetype type="long">12</Statetype>
</Properties>
<Group Self="ud3" LocalDisplaySetting="Default"
AppliedObjectStyle="ObjectStyle/$ID/[None]" Visible="true" Name="Left"
ItemTransform="1 0 0 1 0 0">
<Rectangle Self="ud4" ContentType="GraphicType" StoryTitle="$ID/"
LocalDisplaySetting="Default" AppliedObjectStyle="ObjectStyle/$ID/[None]"
Visible="true" Name="$ID/" ItemTransform="1 0 0 1 0 0">
<Properties>
<PathGeometry>
<GeometryPathType PathOpen="false">
<PathPointArray>
<PathPointType Anchor="67 67" LeftDirection="67 67"
RightDirection="67 67"/>
<PathPointType Anchor="67 139" LeftDirection="67 139"
RightDirection="67 139"/>
<PathPointType Anchor="139 139" LeftDirection="139 139"
RightDirection="139 139"/>
<PathPointType Anchor="139 67" LeftDirection="139 67"
RightDirection="139 67"/>
</PathPointArray>
</GeometryPathType>
IDML File Format Specification
155 IDML File Reference: Spreads and Master Spreads
</PathGeometry>
</Properties>
</Rectangle>
<Polygon Self="ud8" ContentType="Unassigned" StoryTitle="$ID/"
FillColor="Color/DGC1_446d" StrokeWeight="0" StrokeColor="Swatch/None"
LocalDisplaySetting="Default" 0"eAngle="0"
AppliedObjectStyle="ObjectStyle/$ID/[Normal Graphics Frame]" Visible="true"
Name="$ID/" ItemTransform="1 0 0 1 5 5.0000000000000036">
<Properties>
<PathGeometry>
<GeometryPathType PathOpen="false">
<PathPointArray>
<PathPointType Anchor="134 62" LeftDirection="134 62"
RightDirection="134 62"/>
<PathPointType Anchor="62 98" LeftDirection="62 98"
RightDirection="62 98"/>
<PathPointType Anchor="134 134" LeftDirection="134 134"
RightDirection="134 134"/>
</PathPointArray>
</GeometryPathType>
</PathGeometry>
</Properties>
</Polygon>
</Group>
</State>
</MultiStateObject>
Figure 26. Multi-State Object
Associating Page Items with XML Elements
Page items associated with XML elements in the XML structure of an In Design document do
not di&er from page items that are not associated with the structure—what sets them apart are
references from <XMLElement> elements. In an IDML package, these elements appear in the
Backing Story.xml "le.
In the following example, the <XMLElement> element refers to a <Rectangle> element in the
layout.
IDML Example 39. Associating a Frame with an XML Element
<XMLElement Self="di2" Markup Tag="XMLTag\c Root">
<XMLElement Self="di2i3" Markup Tag="XMLTag\c Frame" XMLContent="ud6"/>
</XMLElement>
IDML File Format Specification
156 IDML File Reference: Spreads and Master Spreads
<!--From Spread_ub8.xml-->
<Rectangle Self="ud6" .../>
Figure 27. Associating an XML Element with a Frame
In the following example, the <XMLElement> refers to a <Story> element in the same package, and
that the <Text Frame> element also refers to this <Story>. XML elements that have been associated
with text appear inside the <Story> element.
IDML Example 40. Associating a Text Frame with an XML Element
<!--From Backing Story.xml-->
<XMLElement Self="di2i3" Markup Tag="XMLTag\Example XMLElement" XMLContent="ucf"/>
<!--From Story_ucf.xml-->
<Story Self="ucf" ...>
<!--From Spread_ub8.xml-->
<Text Frame Self="ucd" Parent Story="ucf".../>
Figure 28. Associating an XML Element with a Text Frame
10.3.6 Pages
Spreads contain one or more pages. The pages in a spread are stored as <Page> elements, which
properties that override document- or spread-based settings, such as trapping presets, the applied
master spread, and page margin settings. Pages in a spread can be of multiple sizes, and are added
to the spread based on the order in which they appear inside the <Spread> element. The location
of the pages inside the spread is determined by the binding direction of the document, which
is de"ned by the Binding Location attribute of the <Spread> element—refer to the In Design
documentation for more information on binding direction.
The size of each page in a spread is de"ned by the GeometricBounds attribute of the page. The
values in the GeometricBounds attribute de"ne the upper-le% and lower-right corners of the page,
in the inner coordinates of the page. The ItemTransform attribute contains a transformation
matrix used to position the page in the spread (for more coordinates and transformations, refer to
“Geometry in IDML”). The transformation matrix in the ItemTransform attribute is a complete
transformation matrix, but only translations are supported.
IDML File Format Specification
157 IDML File Reference: Spreads and Master Spreads
Because the master page applied to each page can be of a di&erent size than the page, InDesign
provides a way to position the contents of the master page as they appear on the page. In IDML,
this transformation appears as the MasterPageTransform attribute on the <Page> element.
While this is a complete transformation matrix (see “Geometry in IDML”), only translations are
supported.
<Page> elements appear in the <Spread> element in the sequence in which they appear in the
spread, relative to the binding direction speci"ed by the Page Binding attribute of the <Document-
Preference> element. (In a le% to right layout, subsequent pages appear to the right of the "rst
page in the spread; in a right to le% layout, pages appear to the le% of the "rst page in the spread.)
Note: Page items do not appear as child elements of page elements, but are, instead, collected on
the spread.
Schema Example 74. Page Schema
Page_Object = element Page {
attribute Self { xsd:string },
attribute AppliedAlternateLayout { xsd:string }?,
attribute LayoutRule { LayoutRuleOptions_EnumValue }?,
attribute SnapshotBlendingMode { SnapshotBlendingModes_EnumValue }?,
attribute OptionalPage { xsd:boolean }?,
attribute GeometricBounds { list { xsd:double ,xsd:double ,xsd:double
,xsd:double } }?,
attribute ItemTransform { TransformationMatrixType_TypeDef }?,
attribute Name { xsd:string }?,
attribute AppliedTrapPreset { xsd:string }?,
attribute OverrideList { list { xsd:string * } }?,
attribute AppliedMaster { xsd:string }?,
attribute MasterPageTransform { TransformationMatrixType_TypeDef }?,
attribute TabOrder { list { xsd:string * } }?,
attribute GridStartingPoint { GridStartingPointOptions_EnumValue }?,
attribute UseMasterGrid { xsd:boolean }?,
element Properties {
element Descriptor { list_type, element ListItem {
(string_type, xsd:string ) |
(enum_type, PageNumberStyle_EnumValue ) |
(bool_type, xsd:boolean ) |
(long_type, xsd:int {minInclusive="1" maxInclusive="999999"} )
}*
}?&
element PageColor {
(InDesignUIColorType_TypeDef ) |
(enum_type, PageColorOptions_EnumValue )
}?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
MarginPreference_Object?&
Guide_Object*&
GridDataInformation_Object?
)
IDML File Format Specification
158 IDML File Reference: Spreads and Master Spreads
}
The following example shows a (simpli"ed) <Spread> element containing two pages. In a le%-to-
right layout, the "rst page in the spread is the le% hand (verso) page; the second page is the right
hand (recto).
IDML Example 41. Pages Within a Spread
<Spread Self="ub9" FlattenerOverride="Default" AllowPageShuffle="true"
ItemTransform="1 0 0 1 0 0" ShowMasterItems="true"
PageCount="3" BindingLocation="1" PageTransitionType="None"
PageTransitionDirection="NotApplicable" PageTransitionDuration="Medium">
<Page Self="ube" GeometricBounds="0 0 792 612"
ItemTransform="1 0 0 1 -612 -396" Name="2"
AppliedTrapPreset="TrapPreset/$ID/kDefaultTrapStyleName"
OverrideList="" AppliedMaster="uc0" MasterPageTransform="1 0 0 1 0 0"
TabOrder="" GridStartingPoint="TopOutside" UseMasterGrid="true">
<Properties>
<PageColor type="enumeration">UseMasterColor</PageColor>
</Properties>
<MarginPreference ColumnCount="1" ColumnGutter="12" Top="36" Bottom="36"
Left="36" Right="36" ColumnDirection="Horizontal" ColumnsPositions="0 540"/>
<GridDataInformation FontStyle="Regular" PointSize="12" CharacterAki="0"
LineAki="9" HorizontalScale="100" VerticalScale="100"
LineAlignment="LeftOrTopLineJustify" GridAlignment="AlignEmCenter"
CharacterAlignment="AlignEmCenter">
<Properties>
<AppliedFont type="string">Minion Pro</AppliedFont>
</Properties>
</GridDataInformation>
</Page>
<Page Self="uce" GeometricBounds="0 0 792 72"
ItemTransform="1 0 0 1 0 -396" Name="3"
AppliedTrapPreset="TrapPreset/$ID/kDefaultTrapStyleName"
OverrideList="" AppliedMaster="uc0" MasterPageTransform="1 0 0 1 0 0"
TabOrder="" GridStartingPoint="TopOutside" UseMasterGrid="false">
<Properties>
<PageColor type="enumeration">UseMasterColor</PageColor>
</Properties>
<MarginPreference ColumnCount="1" ColumnGutter="12" Top="0" Bottom="0"
Left="0" Right="0" ColumnDirection="Horizontal" ColumnsPositions="0 72"/>
<GridDataInformation FontStyle="Regular" PointSize="12" CharacterAki="0"
LineAki="9" HorizontalScale="100" VerticalScale="100"
LineAlignment="LeftOrTopLineJustify" GridAlignment="AlignEmCenter"
CharacterAlignment="AlignEmCenter">
<Properties>
<AppliedFont type="string">Minion Pro</AppliedFont>
</Properties>
</GridDataInformation>
</Page>
<Page Self="ud4" GeometricBounds="0 0 792 612"
ItemTransform="1 0 0 1 72 -396" Name="4"
AppliedTrapPreset="TrapPreset/$ID/kDefaultTrapStyleName" OverrideList=""
AppliedMaster="uc0" MasterPageTransform="1 0 0 1 0 0" TabOrder=""
GridStartingPoint="TopOutside" UseMasterGrid="true">
IDML File Format Specification
159 IDML File Reference: Spreads and Master Spreads
<Properties>
<PageColor type="enumeration">UseMasterColor</PageColor>
</Properties>
<MarginPreference ColumnCount="1" ColumnGutter="12" Top="36" Bottom="36"
Left="36" Right="36" ColumnDirection="Horizontal" ColumnsPositions="0 540"/>
<GridDataInformation FontStyle="Regular" PointSize="12" CharacterAki="0"
LineAki="9" HorizontalScale="100" VerticalScale="100" LineAlignment="LeftOrTop
LineJustify" GridAlignment="AlignEmCenter" CharacterAlignment="AlignEmCenter">
<Properties>
<AppliedFont type="string">Minion Pro</AppliedFont>
</Properties>
</GridDataInformation>
</Page>
</Spread>
Table 100. Page Properties Represented as Attributes
Attribute Type Req Description
AppliedAlternate
Layout
string no The alternate layout section to which the page
belongs.
Applied Trap Preset string no The name of the trapping preset applied to the
page.
Applied Master string no The master spread applied to the page.
GeometricBounds list of four
doubles
yes The bounds of the page, in the form y1, x1, y2,
x2.
Grid Starting Point Grid Starting
Point Options
_Enum Value
no The starting point for the grid. Can be Top-
Outside, Top Inside, Bottom Outside,
Bottom Inside, Center Vertical, Center-
Horizontal, or Center Completely.
ItemTransform list of six
doubles
no The transformation matrix applied to the page.
LayoutRule LayoutRuleOptions
_EnumValue
no The layout rule.
Master Page-
Transform
list of six
doubles
no The transformation matrix applied to master
page items.
Name string no The name of the page.
OptionalPage boolean no The optional page for HTML5 pagination.
Override List list of strings
as a space-
separated string
no The overridden master page items on this page,
as a series of references (using the value of the
Self attribute of the overridden page items). For
more on overriding master page items on docu-
ment pages, refer to the In Design online help.
Page Color Page Color Options_
Enum Value or list
of three doubles
no Can be Nothing (do not use the page color of
the master spread), UseMasterColor (use the
page color of the master spread), or a list of three
doubles, each in the range 0 to 255 and repre-
senting R, G, and B values.
IDML File Format Specification
160 IDML File Reference: Spreads and Master Spreads
Attribute Type Req Description
SnapshotBlending
Mode
SnapshotBlending
Modes_EnumValue
no The snapshot blending mode.
Tab Order string list of
strings as a
space-separated
string
no The order in which the focus in an exported PDF
moves to di&erent form "elds when the tab but-
ton is pressed, as a series of references (using the
value of the Self attribute of the page items).
Use Master Grid boolean no If true, use the master grid.
Table 101. Page Properties Represented as Elements
Name Type Req Description
Descriptor ListItem elements no A collection of properties used by In Copy
assignments.
10.3.7 Columns and Margins
The columns and margins of a page are de"ned by the <Margin Preference> object.
Schema Example 75. Margin Preference
MarginPreference_Object = element MarginPreference {
attribute ColumnCount { xsd:int {minInclusive="1" maxInclusive="216"} }?,
attribute ColumnGutter { xsd:double {minInclusive="0" maxInclusive="1440"} }?,
attribute Top { xsd:double }?,
attribute Bottom { xsd:double }?,
attribute Left { xsd:double }?,
attribute Right { xsd:double }?,
attribute ColumnDirection { HorizontalOrVertical_EnumValue }?,
attribute ColumnsPositions { list { xsd:double * } }?
}
IDML Example 42. Margin Preferences
<Margin Preference Column Count="1" Column Gutter="12" Top="36" Bottom="36"
Left="36" Right="36" Column Direction="Horizontal" Columns Positions="0 540"/>
10.3.8 Guides
In addition to page items, In Design spreads can contain guides. For more on using guides to align
page items and to mark areas of the page, refer to the In Design online help.
Schema Example 76. Guide
Guide_Object = element Guide {
attribute Self { xsd:string },
attribute Orientation { HorizontalOrVertical_EnumValue }?,
attribute Location { xsd:double }?,
attribute FitToPage { xsd:boolean }?,
attribute ViewThreshold { xsd:double {minInclusive="5" maxInclusive="4000"} }?,
attribute Locked { xsd:boolean }?,
attribute ItemLayer { xsd:string }?,
attribute PageIndex { xsd:short }?,
IDML File Format Specification
161 IDML File Reference: Spreads and Master Spreads
attribute GuideType { GuideTypeOptions_EnumValue }?,
attribute GuideZone { xsd:double }?,
element Properties {
element GuideColor { InDesignUIColorType_TypeDef }?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
IDML Example 43. Guide
<Guide Self="ue4" Orientation="Horizontal" Location="72" Fit To Page="true" View-
Threshold="5" Locked="false" Item Layer="ub1" Page Index="1">
<Properties>
<Guide Color type="enumeration">Cyan</Guide Color>
</Properties>
</Guide>
Table 102. Guide Properties Represented as Attributes
Name Type Req Description
Fit To Page boolean no If true, horizontal orientation guides stop at the
edges of the speci"ed page. If false, the guides
extends across the width of the spread and into
the pasteboard area.
Item Layer string no The layer that the guide is on.
Location double no The location at which to place the guide relative
to the current ruler zero point.
Locked boolean no If true, the guide is locked.
Orientation Horizontal Or-
Vertical_Enum-
Value
no The orientation of the guide. Can be
Horizontal or Vertical.
Page Index short no The index of the page containing the guide.
View Threshold double no The view magni"cation as a percentage below
which guides are no longer displayed. (Range:
5.0 to 4000.0)
GuideType GuideTypeOptions
_EnumValue
no The type of the guide.
GuideZone double no The zone of the guide.
Table 103. Guide Properties Represented as Elements
Name Type Req Description
Guide Color list of doubles
or UIColors_
EnumValue
no The color of the guide, specified either as an
array of three ListItem elements, each contain-
ing a value from 0 to 255 and representing R, G,
and B values, or as a UIColor enumeration.
IDML File Format Specification
162 IDML File Reference: Spreads and Master Spreads
10.3.9 Transparency Flattener Settings
The appearance of transparency (including the Drop Shadow, Inner Shadow, Outer Glow, Inner
Glow, Bevel and Emboss, Satin, and Feather e&ects) when you print or export an In Design
document depends on the $attener settings for the spread and/or the document (the exact
appearance of the transparent objects on the printed pages or in the exported "le depends on the
capabilities of the printer or "le format). The $attener settings of the document apply to all objects
unless the objects exist on a spread which has been assigned its own $attener settings; in that case,
the $attener settings of the spread override those of the document. In IDML, these settings are
represented by the <Flattener Preference> element.
Schema Example 77. Flattener Preference
FlattenerPreference_Object = element FlattenerPreference {
attribute LineArtAndTextResolution { xsd:double }?,
attribute GradientAndMeshResolution { xsd:double }?,
attribute ClipComplexRegions { xsd:boolean }?,
attribute ConvertAllStrokesToOutlines { xsd:boolean }?,
attribute ConvertAllTextToOutlines { xsd:boolean }?,
element Properties {
element RasterVectorBalance {
(enum_type, FlattenerLevel_EnumValue ) |
(double_type, xsd:double {minInclusive="0" maxInclusive="100"} )
}?
}
?
}
The following example shows a custom $attener setting applied to a spread.
IDML Example 44. Flattener Preference
<Spread Self="ub8" Flattener Override="Custom">
<Flattener Preference Line Art And Text Resolution="300"
Gradient And Mesh Resolution="150"
Clip Complex Regions="true" Convert All Text To Outlines="false">
Convert All Strokes To Outlines="true"
<Properties>
<Raster Vector Balance </Properties>
</Flattener Preference>
</Spread>
type="double">75</Raster Vector Balance>
Figure 29. Flattener Preference
IDML File Format Specification
163 IDML File Reference: Stories
10.4 Stories
A story, or “text $ow” is the basic text container in an In Design document; all text exists inside
stories. Stories are associated with at least one text frame or text path, and can span any number
of linked text frames or text paths in a document. Text frames and text paths are page items, and
are discussed in the section “Spreads and Master Spreads”.
In an IDML package, the XML documents representing stories are stored inside the “Stories”.
Each "le contains a single <Story> element. Story "les use the naming convention described in
“IDML Component Names.” The root element of a Story.xml "le is the <Story> element, and
each story "le stores contains a single <Story> element.
The <Story> element is very complex. The schema of <Story> element describes more than 200
simple attributes and more than 40 complex attributes that can appear in the <Properties>
element of the story. In addition, the <Story> element can contain other child elements, including
elements corresponding to inline or anchored frames, tables, notes, hyperlinks, and footnotes.
That said, most of these attributes and elements of story are optional. You do not need to
construct all of them to assemble a new story for use in an IDML package. A story can be as
simple as the following example:
IDML Example 45. Story File in an IDML Package
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<id Pkg:Story xmlns:id Pkg="http://ns.adobe.com/Adobe In Design/idml/1.0/packaging">
<Story Self="ucb">
<Paragraph Style Range>
<Character Style Range>
<Content>Hello World</Content>
</Character Style Range>
</Paragraph Style Range>
</Story>
</id Pkg:Story>
A version of the same element elsewhere in an IDML package (in designmap.xml, for example)
would be the same as the <Story> element in the example above.
The <Story> object can contain the default text formatting for the story. Individual instances of
local text formatting (i.e., formatting which was not applied by paragraph and character styles)
can also appear in the story "le. This local formatting will always appear inside a <Paragraph-
Style Range> or <Character Style Range> element see “Local Formatting vs. Styles.”
Paragraph and character style formatting is applied using references to the Self attribute of
<Paragraph Style> and <Character Style> elements. In an IDML package, these elements are
stored in the Styles.xml "le inside the Resources folder. The formatting attributes of the styles
are stored within that "le, not within the <Story> element (see “Styles”).
10.4.1 Story vs. XMLStory
The <XMLStory> element (which is in the Backing Story.xml "le in the XML folder of an IDML
package) represents unplaced XML elements (i.e., an XML element in the XML structure of the
In Design document, that has not yet been placed in the layout) can have all of the same attributes
and child elements that a <Story> element can have.
IDML File Format Specification
164 IDML File Reference: Stories
10.4.2 Story vs. Assigned Story
An <Assigned Story> element represents an In Copy "le, not a <Story> element. The <Assigned-
Story> element has an attribute called Assigned Story. The value of this attribute can contain a
reference to a <Story> element, or to a page item element such as a <Rectangle>.
10.4.3 Referring to a Story
A <Story> element is referred to by its unique ID—the value of its Self attribute. <Text Frame>
and <Text Path> elements refer to the story using the Parent Story attribute, <Link> elements
refer to the story using the Parent attribute. In addition, <Document> elements use the Instance-
List attribute to refer to an index story. Third party developers may create their own references to
stories.
10.4.4 Adding a Story
To add a new story to a IDML "le or package, you add a <Story> element. In an IDML package,
this element can be stored in an XML "le in the Stories folder. This "le can have any valid XML
"le name—it does not have to match the naming convention that In Design uses when you export
IDML. A single XML "le can contain multiple <Story> elements. When you refer to stories in
other places in the IDML "le, you use the Self attribute of the <Story> element in the "le, not the
"le name.
When you add a story, you need to make certain that:
• One of the Spread.xml "les in the IDML package contains a <Text Frame> or <Text Path>
element that contains a reference to the story. If no <Text Frame> or <Text Path> element refers
to the story, the story will not be imported, and will not appear in the layout.
• The paragraph styles, character styles, colors, and other references used in the story have
already been de"ned in "les in the Resources folder of the IDML package. If they have not
been de"ned, you’ll need to add these de"nition "les to the package.
Note: In general, following the same naming scheme and storage approach as In Design uses is
good practice, but it’s not required. Using the unique identi"er of the story in the name of the "le
makes it easier to "nd the corresponding <Story> element, and storing a single <Story> per "le
makes it easier to change text content.
10.4.5 Local Formatting vs. Styles
In In Design, you can use the typesetting controls (in the Control panel, Character panel, or on
the Type menu, for example) to apply formatting to text without using paragraph or character
styles. When you do this, you’re applying local formatting. In Design represents local formatting
using attributes and elements of the <Story>, <Paragraph Style Range>, and <Character Style-
Range> elements.
Most of the time, it’s far better to use character and paragraph styles to apply text formatting.
Using styles means that the formatting de"nitions can be changed in one place, rather than being
spread throughout the text in a "le, and applying a style is much faster than applying a series of
local formatting changes. In addition, character and paragraph styles can be included in object,
table, and cell styles.
IDML File Format Specification
165 IDML File Reference: Stories
In the following example, the "rst <Paragraph Style Range> element uses local formatting
(speci"ed as part of the <Character Style Range> element); the second applies the same
formatting using a paragraph style (speci"ed as the Applied Paragraph Style attribute). In
this example, we’ve applied only three local formatting attributes to illustrate the point, but
completely replacing the formatting applied by a paragraph style could entail the speci"cation of
more than two hundred attributes and elements. The two paragraphs have the same formatting,
but the second example is a much more efficient use of IDML. Local formatting persists inside
a given <Paragraph Style Range> element until the next <Paragraph Style Range>, and within a
<Character Style Range> until the next <Character Style Range> or <Paragraph Style Range>.
IDML Example 46. Local Formatting vs. Styles
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\k Normal Paragraph Style">
<Character Style Range Applied Character Style="Character Style\k[No character style]"
Fill Color="Color\c Red" Font Style="Italic" Point Size="24">
<Content>ABC</Content>
<br/>
</Character Style Range>
</Paragraph Style Range>
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\c Style1">
<Character Style Range Applied Character Style="Character Style\k[No character
style]">
<Content>ABC</Content>
</Character Style Range>
</Paragraph Style Range>
Figure 30. Local Formatting vs. Styles
IDML File Format Specification
166 IDML File Reference: Stories
10.4.6 Common Text Properties
Just as all text objects in the In Design scripting DOM share a large number of properties, all
text elements in an IDML package share a large set of common attributes and elements. These
attributes and properties can appear in a <Story>, <Paragraph Style Range>, or <Character-
Style Range> element inside a <Story> element, and in a <Paragraph Style> or <Character-
Style> elements.
To avoid repeating these attributes and elements in every text-related element reference in this
speci"cation, we’ll describe them in this section, and refer to these descriptions from other
sections.
Table 104. Common Text Properties Represented as Attributes
Name Type Req Description
Applied Character-
Style
string no The character style applied to the text.
Applied Conditions string (space
separated list of
conditions)
no The applied conditions.
Applied Language string no The language of the text. A reference to the Self
attribute of a language.
Applied Paragraph-
Style
string no The paragraph style applied to the text.
Auto Leading double no The percent of the type size to use for auto lead-
ing. (Range: 0 to 500).
Auto Tcy short no The number of half-width characters at or below
which the characters automatically run horizon-
tally in vertical text.
Auto Tcy Include-
Roman
boolean no If true, auto tcy includes Roman characters.
Baseline Shift double no The baseline shi% applied to the text.
Bullets Alignment List Alignment_
Enum Value
no The alignment of the bullet character. Can be
Left Align (Align le%), Center Align (Align
center), or Right Align (Align right).
Bullets And-
Numbering List Type
List Type_Enum-
Value
no List type for bullets and numbering. Can be
No List (No list), Bullet List (Bullet list), or
Numbered List (Numbered list).
Bullets Text After string no The text a%er string expression for bullets.
Bunri Kinshi boolean no If true, adds the double period (..), ellipse (...),
and double hyphen (--) to the selected kinsoku
set. Note: Valid only when a kinsoku set is in
e&ect.
Capitalization Capitalization_
Enum Value
no The capitalization scheme. Can be Normal
(Do not change the capitalization of the text),
Small Caps (Use small caps for lowercase let-
ters), All Caps (Use all uppercase letters), or
Cap To Small Cap (Use Open Type small caps).
IDML File Format Specification
167 IDML File Reference: Stories
Name Character-
Alignment
Character-
Direction
Character Rotation Cjk Grid Tracking Composer Desired Glyph-
Scaling
Desired Letter-
Spacing
Desired Word-
Spacing
Diacritic Position Digits Type Drop Cap Characters Drop Cap Lines Type Req Description
Character-
Alignment_Enum-
Value
no The alignment of small characters to the largest
character in the line. Can be Align Baseline
(Aligns small characters in a line to the large
character), Align Em Top (Aligns small char-
acters in horizontal text to the top of the em
box of large characters In vertical text, aligns
characters to the right of the em box), Align Em-
Center (Aligns small characters to the center of
the em box of large characters), Align Em Bottom
(Aligns small characters in horizontal text to
the bottom of the em box of large characters In
vertical text, aligns characters to the le% of the
em box), Align ICFTop (Aligns small characters
in horizontal text to the top of the ICF of large
characters In vertical text, aligns characters
to the right of the ICF), or Align ICFBottom
(Aligns small characters in horizontal text to the
bottom of the ICF of large characters In vertical
text, aligns characters to the le% of the ICF).
Character-
Direction_Enum-
Value
no The direction of the character . Can be Default-
Direction (Default direction), Left To Right-
Direction (Le% to right direction), or Right-
To Left Direction (Right to le% direction).
double no The rotation angle (in degrees) of individual
characters. Note: The rotation is counterclock-
wise.
boolean no If true, uses grid tracking to track non-Roman
characters in CJK grids.
string no The text composer to use to compose the text.
double no The desired width (as a percentage) of individual
characters. (Range: 50 to 200)
double no The desired letter spacing, speci"ed as a per-
centge of the built-in space between letters in the
font. (Range: -100 to 500)
double no The desired word spacing, speci"ed as a percent-
age of the font word space value. (Range: 0 to
1000)
Diacritic-
Position_Enum-
Value
no Position of diacritic al characters. Can be
Default Position (Default position), Loose-
Position (Loose position), Medium Position
(Medium position), Tight Position (Tight
position), or Opentype Position (Open Type
position).
Digits Type_Enum-
Value
no The type of digits to use. Can be Default-
Digits (Default digits), Arabic Digits (Arabic
digits), Hindi Digits (Hindi digits), or Farsi-
Digits (Farsi digits).
short no The number of characters to drop for a drop cap.
short no The number of lines to drop for a drop cap.
IDML File Format Specification
168 IDML File Reference: Stories
Name Dropcap Detail End Join Fill Color Fill Tint First Line Indent Font Style Glyph Form Goto Next X Gradient Fill Angle Gradient Fill-
Length
Gradient Fill Start Gradient Stroke-
Angle
Gradient Stroke-
Length
Gradient Stroke-
Start
Grid Align First-
Line Only
Type Req Description
int no The detailed size and positioning of the drop
cap.
Outline Join_Enum-
Value
no The stroke join type applied to the characters of
the text. Can be Miter End Join (Miter end join),
Round End Join (Rounded end join), or Bevel-
End Join (Beveled end join).
string no The swatch (color, gradient, tint, or mixed ink)
applied to the "ll of the text, as a reference to the
Self attribute of the swatch.
double no The tint (as a percentage) of the "ll color of the
Paragraph. (To specify a tint percentage, use
a number in the range of 0 to 100; to use the
inherited or overridden value, use -1.)
double no The amount to indent the "rst line.
string no The name of the font style.
Alternate Glyph-
Forms_Enum Value
no The glyph variant to substitute for standard
glyphs. Can be None (Does not use an alternate
form), Traditional Form (Uses the traditional
variant), Expert Form (Uses the expert variant),
JIS78Form (Uses the JIS78 variant), JIS83Form
(Uses the JIS83 variant), Monospaced Half-
Width Form (Uses the monospaced half-width
variant), Third Width Form (Uses the third-
width variant), Quarter Width Form (Uses the
quarter-width variant), NLCForm (Uses the NLC
variant), Proportional Width Form (Substi-
tutes proportional glyphs for half-width and
full-width glyphs), Full Width Form (Uses the
full-width variant), JIS04Form (Uses the JIS04
variant), or JIS90Form (Uses the JIS90 variant).
Goto Next X_Enum-
Value
no A break character that forces text to the next
page or column.
double no The angle of a linear gradient applied to the "ll
of the text. (Range: -180 to 180)
double no The length (for a linear gradient) or radius (for a
radial gradient) applied to the "ll of the text.
UnitPointType_
TypeDef
no The starting point (in page coordinates) of a gra-
dient applied to the "ll of the text, in the format
[x, y].
double no The angle of a linear gradient applied to the
stroke of the text. (Range: -180 to 180)
double no The length (for a linear gradient) or radius (for a
radial gradient) applied to the stroke of the text.
UnitPointType_
TypeDef
no The starting point (in page coordinates) of a
gradient applied to the stroke of the text, in the
format [x, y].
boolean no If true, aligns only the "rst line to the frame grid
or baseline grid. If false, aligns all lines to the
grid.
IDML File Format Specification
169 IDML File Reference: Stories
Name Grid Alignment Grid Gyoudori Horizontal Scale Hyphen Weight Hyphenate Across-
Columns
Hyphenate After-
First
Hyphenate Before-
Last
Hyphenate-
Capitalized Words
Hyphenate Ladder-
Limit
Hyphenate Last Word Hyphenate Words-
Longer Than
Hyphenation Hyphenation Zone Ignore Edge-
Alignment
Jidori Type Req Description
Grid Alignment_
Enum Value
no The alignment to the frame grid or baseline
grid. Can be None (Lines are not aligned to the
grid), Align Baseline (Aligns the text baseline
to the grid), Align Em Top (Aligns the top
of the em box to the grid), Align-
Em Center (Aligns the center of the em box to
the grid), Align Em Bottom (Aligns the bot-
tom of the em box to the grid), Align ICFTop
(Aligns the top of the ICF box to the grid), or Align-
ICFBottom (Aligns the bottom of the ICF box to the
grid).
short no The manual gyoudori setting.
double no The horizontal scaling applied to the text as a
percentage of its current size. (Range: 1 to 1000)
short no The relative desirability of better spacing vs.
fewer hyphens. A lower value results in greater
use of hyphens. (Range: 0 to 100)
boolean no If true, allows the last word in a text column to
be hyphenated.
short no The mininum number of letters at the beginning
of a word that can be broken by a hyphen.
short no The minimum number of letters at the end of a
word that can be broken by a hyphen.
boolean no If true, allows hyphenation of capitalized words.
short no The maximum number of hyphens that can
appear on consecutive lines. To specify unlim-
ited consecutive lines, use zero.
boolean no If true, allows hyphenation in the last word in a
paragraph. Note: Valid only when hyphenation
is true.
short no The minimum number of letters a word must
have in order to qualify for hyphenation.
boolean no If true, allows hyphenation.
double no The amount of white space allowed at the end
of a line of non-justi"ed text before hypenation
begins. Note: Valid when composer is single-line
composer.
boolean no If true, ignores optical edge alignment for the
paragraph.
short no The number of grid squares in which to arrange
the text.
IDML File Format Specification
170 IDML File Reference: Stories
Name Justification Kashidas Keep All Lines-
Together
Keep First Lines Keep Last Lines Keep Lines Together Keep Rule Above In-
Frame
Keep With Next Keep With Previous Kenten Alignment Kenten Character-
Set
Kenten Custom-
Character
Kenten Font Size Type Req Description
Justification_
Enum Value
no The paragraph alignment. Can be Left Align
(Le% aligns the text), Center Align (Center
aligns the text), Right Align (Right aligns
the text), Left Justified (Justi"es the text
and le% aligns the last line in the paragraph),
Right Justified (Justi"es the text and right
aligns the last line in the paragraph), Center-
Justified (Justi"es text text and center aligns
the last line in the paragraph), Fully Justified
(Justi"es the text, including the last line in the
paragraph), To Binding Side (Aligns text to the
binding spine of the page or spread), or Away-
From Binding Side (Aligns text to the side
opposite the binding spine of the page).
Kashidas_Enum-
Value
no Use of Kashidas for justi"cation Can be
Default Kashidas (Default kashidas), or
Kashidas Off (Kashidas o&).
boolean no If true, keeps all lines of the paragraph together.
If false, allows paragraphs to break across pages
or columns.
short no The minimum number of lines to keep together
in a paragraph before allowing a page break.
short no The minimum number of lines to keep together
in a paragraph a%er a page break.
boolean no If true, keeps a speci"ed number of lines togeth-
er when the paragraph breaks across columns or
text frames.
boolean no If true, forces the rule above the paragraph to
remain in the frame bounds. Note: Valid only
when rule above is true.
short no The minimum number of lines to keep with the
next paragraph.
boolean no If true, the "rst line in the paragraph should be
kept with the last line of previous paragraph.
Kenten Alignment_
Enum Value
no The alignment of kenten characters relative to
the parent characters. Can be Align Kenten-
Left (Aligns kenten with the le% of parent char-
acters), or Align Kenten Center (Aligns kenten
with the center of parent charactrers).
Kenten Character-
Set_Enum Value
no The character set used for the custom kenten
character. Note: Valid only when kenten kind is
custom. Can be Character Input (Character
input), Shift JIS (Shi% JIS), JIS (JIS), Kuten
(Kuten), or Unicode (Unicode).
string no The character used for kenten. Note: Valid only
when kenten kind is custom.
double no The size (in points) of kenten characters.
IDML File Format Specification
171 IDML File Reference: Stories
Name Kenten Kind Kenten Overprint-
Fill
Kenten Overprint-
Stroke
Kenten Placement Kenten Position Kenten Stroke Tint Kenten Tint Kenten Weight Kenten XScale Kenten YScale Kerning Method Kerning Value Keyboard Direction Type Req Description
Kenten Character_
Enum Value
no The style of kenten characters. Can be None
(Does not use kenten), Kenten Sesame Dot
(Uses the kenten sesame dot), Kenten White-
Sesame Dot (Uses the kenten white sesame
dot), Kenten Black Circle (Uses the kenten
black circle), Kenten White Circle (Uses the
kenten white circle), Kenten Black Triangle
(Uses the kenten black triangle), Kenten White-
Triangle (Uses the kenten white triangle),
Kenten Bullseye (Uses the kenten bullseye),
Kenten Fisheye (Uses the kenten "sheye),
Kenten Small Black Circle (Uses the kenten small
black circle), Kenten Small White Circle (Uses the
kenten small white circle), or Custom (Uses a custom
kenten style).
Adornment-
Overprint_Enum-
Value
no The method of overprinting the kenten "ll. Can
be Auto (Uses auto overprint), Overprint On
(Turns on overprint), or Overprint Off (Turns
o& overprint).
Adornment-
Overprint_Enum-
Value
no The method of overprinting the kenten stroke.
Can be Auto (Uses auto overprint), Overprint-
On (Turns on overprint), or Overprint Off
(Turns off overprint).
double no The distance between kenten characters and
their parent characters.
Ruby Kenten-
Position_Enum-
Value
no The kenten position relative to the parent char-
acter. Can be Above Right (Places kenten or
ruby to the right and above the parent charac-
ter), or Below Left (Places kenten or ruby to the
le% and below the parent character).
double no The stroke tint (as a percentage) of kenten char-
acters. (Range: 0 to 100)
double no The "ll tint (as a percentage) of kenten charac-
ters. (Range: 0 to 100)
double no The stroke weight (in points) of kenten charac-
ters.
double no The horizontal size of kenten characters as a per-
cent of the original size.
double no The vertical size of kenten charachers as a per-
cent of the original size.
string no The type of pair kerning.
double no The amount of space to add or remove between
characters, speci"ed in thousands of an em.
Character-
Direction_Enum-
Value
no The keyboard direction of the character Can be
Default Direction (Default direction), Left-
To Right Direction (Le% to right direction), or
Right To Left Direction (Right to le% direc-
tion).
IDML File Format Specification
172 IDML File Reference: Stories
Name Kinsoku Hang Type Kinsoku Type Last Line Indent Leading Aki Leading Model Left Indent Ligatures LinkResourceID Maximum Glyph-
Scaling
Maximum Letter-
Spacing
Type Req Description
Kinsoku Hang Types_
Enum Value
no The type of hanging punctuation to allow. Note:
Valid only when a kinsoku set is in e&ect. Can be
None (Disables hanging punctuation), Kinsoku-
Hang Regular (Enables hanging punctuation
and allows punctuation marks to be placed on
or outside the text frame but allows burasagari
characters to hang as little as possible Note: Dif-
fers for justi"ed and nonjusti"ed text For infor-
mation on justi"cation, see line alignment), or
Kinsoku Hang Force (Enables hanging punctua-
tion but forces hanging punctuation outside the
text frame and does not allow the punctuation to
be placed on the text frame).
Kinsoku Type_Enum-
Value
no The type of kinsoku processing for preventing
kinsoku characters from beginning or end-
ing a line. Note: Valid only when a kinsoku
set is de"ned. Can be Kinsoku Push In First
(Attempts to move characters to the previ-
ous line; if the push-in is not possible, pushes
characters to the next line), Kinsoku Push-
Out First (Attempts to move characters to the
next line; if the push-out is not possible, pushes
characters to the previous line), Kinsoku Push-
Out Only (Always moves characters to the next
line Does not attempt a push-in), or Kinsoku-
Prioritize Adjustment Amount (The kinsoku
prioritize adjustment amount).
double no The amount to indent the last line in the Para-
graph.
double no The amount of space before each character.
Leading Model_
Enum Value
no The point from which leading is measured
from line to line. Can be Leading Model Roman
(Measures the space between type baselines),
Leading Model Aki Below (Measures the space
between lines from the aki below), Leading-
Model Aki Above (Measures the space between
lines from the aki above), Leading Model-
Center (Measures the space between the char-
acter center points), or Leading Model Center-
Down (Center down leading model).
double no The width of the le% indent.
boolean no If true, replaces speci"c character combinations
(e.g., $, ") with ligature characters.
int no This attribute refers to the self attribute of the
parent story or XML story to which the child
story is linked..
double no The maximum width (as a percentage) of indi-
vidual characters. (Range: 50 to 200)
double no The maximum letter spacing, speci"ed as a per-
centge of the built-in space between letters in the
font. (Range: -100 to 500) Note: Valid only when
text is justi"ed.
IDML File Format Specification
173 IDML File Reference: Stories
Name Maximum Word-
Spacing
Minimum Glyph-
Scaling
Minimum Letter-
Spacing
Minimum Word-
Spacing
Miter Limit No Break Numbering-
Alignment
Numbering Apply-
Restart Policy
Numbering Continue Numbering-
Expression
Numbering Level Numbering Start At OTFContextual-
Alternate
OTFDiscretionary-
Ligature
OTFFigure Style OTFFraction OTFHVKana OTFHistorical OTFJustification-
Alternate
OTFLocale OTFMark Type Req Description
double no The maximum word spacing, speci"ed as a per-
centage of the font word space value. Note: Valid
only when text is justi"ed. (Range: 0 to 1000)
double no The minimum width (as a percentage) of indi-
vidual characters. (Range: 50 to 200)
double no The minimum letter spacing, speci"ed as a per-
centge of the built-in space between letters in the
font. (Range: -100 to 500) Note: Valid only when
text is justi"ed.
double no The minimum word spacing, speci"ed as a per-
centage of the font word space value. Note: Valid
only when text is justi"ed. (Range: 0 to 1000)
double no The limit of the ratio of stroke width to miter
length before a miter (pointed) join becomes a
bevel (squared-o&) join.
boolean no If true, keeps the text on the same line.
List Alignment_
Enum Value
no The alignment of the number. Can be Left-
Align (Align le%), Center Align (Align center),
or Right Align (Align right).
boolean no If true, apply the numbering restart policy.
boolean no Continue the numbering at this level.
string no The number string expression for numbering.
int no The level of the paragraph.
int no Determines starting number in a numbered list.
boolean no If true, uses contextual alternate forms in Open-
Type fonts.
boolean no If true, uses discretionary ligatures in Open Type
fonts.
OTFFigure Style_
Enum Value
no The "gure style in Open Type fonts. Can be
Tabular Lining (Use monspaced lining "g-
ures), Proportional Oldstyle (Use proportional
width oldstyle figures), Proportional Lining
(Use proportional width lining figures), Tabular-
Oldstyle (Use monospaced oldstyle figures), or
Default (Use the default figure style for the font).
boolean no If true, uses fractions in Open Type fonts.
boolean no If true, switches hiragana fonts, which have dif-
ferent glyphs for horizontal and vertical.
boolean no If true, use historical forms in Open Type fonts.
boolean no Whether to use justi"cation alternate forms in
Open Type fonts
boolean no If true, uses localized forms in Open Type fonts.
boolean no If true, uses mark positioning in Open Type
fonts.
IDML File Format Specification
174 IDML File Reference: Stories
Name OTFOrdinal OTFOverlap Swash OTFProportional-
Metrics
OTFRoman Italics OTFSlashed Zero OTFStretched-
Alternate
OTFStylistic-
Alternate
OTFStylistic Sets OTFSwash OTFTitling Overprint Fill Overprint Stroke Page Number Type Paragraph-
Direction
Paragraph Gyoudori Paragraph-
Justification
Point Size Type Req Description
boolean no If true, uses ordinals in Open Type fonts.
boolean no If true, use overlapping swash forms in Open-
Type fonts.
boolean no If true, kerns according to proportional CJK
metrics in Open Type fonts.
boolean no If true, applies italics to half-width alpha numeric
characters.
boolean no If true, use a slashed zeroes in Open Type fonts.
boolean no Whether to use stretched alternate forms in
Open Type fonts.
boolean no If true, use stylistic alternate forms in Open Type
fonts.
int no The stylistic sets to use in Open Type fonts.
boolean no If true, uses swash forms in Open Type fonts.
boolean no If true, uses titling forms in Open Type fonts.
boolean no If true, the "ll color of the characters will over-
print.
boolean no If true, the stroke of the characters will over-
print.
Page Number Type_
Enum Value
no The type of the page number marker. Can
be Auto Page Number, Next Page Number, or
Previous Page Number.
Paragraph-
Direction_Enum-
Value
no The paragraph composition direction . Can be
Left To Right Direction (Le% to Right para-
graph direction), or Right To Left Direction
(Right to Le% paragraph direction).
boolean no If true, the gyoudori mode applies to the entire
paragraph. If false, the gyoudori mode applies to
each line in the paragraph.
Paragraph-
Justification_
Enum Value
no Paragraph justi"cation Can be Default-
Justification (Default justi"cation),
Arabic Justification (Arabic justi"cation),
or Naskh Justification (Naskh justi"cation).
double no The text size.
IDML File Format Specification
175 IDML File Reference: Stories
Name Position Positional Form Rensuuji Right Indent Rotate Single Byte-
Characters
Ruby Alignment Ruby Auto Align Ruby Auto Scaling Ruby Auto Tcy Auto-
Scale
Ruby Auto Tcy Digits Ruby Auto Tcy-
Include Roman
Ruby Flag Ruby Font Size Ruby Open Type Pro Type Req Description
Position_Enum-
Value
no The text position relative to the baseline. Can
be Normal (Normal position), Superscript
(Superscripts the text), Subscript (Subscripts
the text), OTSuperscript (For Open Type fonts,
uses—if available—raised glyphs that are sized
correctly relative to the surrounding characters),
OTSubscript (For Open Type fonts, uses—if
available—lowered glyphs that are sized cor-
rectly relative to the surrounding characters),
OTNumerator (For Open Type fonts, shrinks the
text but keeps the top of the characters aligned
with the top of the main text Note: Valid only for
numeric characters), or OTDenominator (For
Open Type fonts, shrinks the text but keeps text
on the main text baseline Note: Valid only for
numeric characters).
Positional Forms_
Enum Value
no The Open Type positional form. Can be None
(None), Calculate (Calculated forms),
Initial (Initial form), Medial (Medial form),
Final (Final form), or Isolated (Isolated
form).
boolean no If true, disallows line breaks in numbers. If false,
lines can break between digits in multi-digit
numbers.
double no The width of the right indent.
boolean no If true, rotates Roman characters in vertical text.
Ruby Alignments_
Enum Value
no The ruby alignment. Can be Ruby Left (Aligns
ruby with the le%-most character in the parent
text), Ruby Center (Centers ruby relative to the
parent text), Ruby Right (Aligns ruby with the
right-most character in the parent text), Ruby-
Full Justify (Justi"es ruby across the parent
text), Ruby JIS (Ruby JIS), Ruby Equal Aki (Ruby
equal aki), or Ruby1Aki (Ruby 1 aki).
boolean no If true, auto aligns ruby.
boolean no If true, automatically scales ruby to the speci-
"ed percent of parent text size. For information
on specifying a percent, see ruby parent scaling
percent.
boolean no If true, automatically scales glyphs in auto tcy
(tate-chuu-yoko) in ruby to "t one em.
short no The number of digits included in auto tcy (tate-
chuu-yoko) in ruby.
boolean no If true, includes Roman characters in auto tcy
(tate-chuu-yoko) in ruby.
int no If true, ruby is on.
double no The size (in points) of ruby characters.
boolean no If true, uses Open Type Pro fonts for ruby.
IDML File Format Specification
176 IDML File Reference: Stories
Name Ruby Overhang Ruby Overprint Fill Ruby Overprint-
Stroke
Ruby Parent-
Overhang Amount
Ruby Parent-
Scaling Percent
Ruby Parent Spacing Ruby Position Ruby String Ruby Stroke Tint Ruby Tint Ruby Type Ruby Weight Ruby XOffset Type Req Description
boolean no If true, constrains ruby overhang to the speci-
"ed amount. For information on specifying an
amount, see ruby parent overhang amount.
Adornment-
Overprint_Enum-
Value
no The method of overprinting the ruby "ll. Can
be Auto (Uses auto overprint), Overprint On
(Turns on overprint), or Overprint Off (Turns
o& overprint).
Adornment-
Overprint_Enum-
Value
no The method of overprinting the ruby stroke. Can
be Auto (Uses auto overprint), Overprint On
(Turns on overprint), or Overprint Off (Turns
o& overprint).
Ruby Overhang_
Enum Value
no The amount by which ruby characters can over-
hang the parent text. Can be None (Does not
allow ruby overhang), Ruby Overhang One Ruby
(Ruby overhang is one ruby), Ruby Overhang-
Half Ruby (Ruby overhang is one-half ruby),
Ruby Overhang One Char (Ruby overhang is the
size of one character), Ruby Overhang Half Char
(Ruby is overhang one-half the size of one chara-
racter), or Ruby Overhang No Limit (There is no
ruby overhang size limit).
double no The amount (as a percentage) to scale the parent
text size to determine the ruby text size.
Ruby Parent-
Spacing_Enum Value
no The ruby spacing relative to the parent text. Can
be Ruby Parent No Adjustment (Does not base
ruby spacing on parent text), Ruby Parent-
Both Sides (Ruby parent both sides), Ruby-
Parent121Aki (Ruby parent 121 aki), Ruby-
Parent Equal Aki (Applies the parent text aki
to the ruby characters), or Ruby Parent Full-
Justify (Justi"es ruby characters to both edges
of the parent text).
Ruby Kenten-
Position_Enum-
Value
no The position of ruby characters relative to the
parent text. Can be Above Right (Places kenten
or ruby to the right and above the parent charac-
ter), or Below Left (Places kenten or ruby to the
le% and below the parent character).
string no The ruby string contents.
double no The stroke tint (as a percentage) of ruby charac-
ters.
double no The tint (as a percentage) of the ruby "ll color.
(Range: 0 to 100)
Ruby Types_Enum-
Value
no The ruby type. Can be Group Ruby (Provides
ruby for a group of characters), or Per-
Character Ruby (Provides ruby for each indi-
vidual character in the group).
double no The stroke weight (in points) of ruby characters.
double no The amount of horizontal space between ruby
and parent characters.
IDML File Format Specification
177 IDML File Reference: Stories
Name Ruby XScale Ruby YOffset Ruby YScale Rule Above Rule Above Gap-
Overprint
Rule Above Gap Tint Rule Above Left-
Indent
Rule Above Line-
Weight
Rule Above Offset Rule Above-
Overprint
Rule Above Right-
Indent
Rule Above Tint Rule Above Width Rule Below Rule Below Gap-
Overprint
Rule Below Gap Tint Rule Below Left-
Indent
Type Req Description
double no The horizontal size of ruby characters, speci"ed
as a percent of the original size.
double no The amount of vertical space between ruby and
parent characters.
double no The vertical size of ruby characters, speci"ed as a
percent of the original size.
boolean no If true, places a rule above the paragraph.
boolean no If true, the stroke gap of the paragraph rule
above will overprint. Note: Valid only the rule
above type is not solid.
double no The tint (as a percentage) of the stroke gap color
of the paragraph rule. (Range: 0 to 100) Note:
Valid only when the rule above type is not solid.
double no The distance to indent the le% edge of the para-
graph rule above (based on either the text width
or the column width of the "rst line in the para-
graph.
double no The line weight of the rule above
double no The amount to o&set the paragraph rule above
from the baseline of the "rst line the paragraph.
boolean no If true, the paragraph rule above will overprint.
double no The distance to indent the right edge of the
paragraph rule above (based on either the text
width or the column width of the "rst line in the
paragraph.
double no The tint (as a percentage) of the paragraph rule
above. (Range: 0 to 100)
Rule Width_Enum-
Value
no The basis (text width or column width) used to
calculate the width of the paragraph rule above.
Can be Text Width (Makes the paragraph rule
above the width of the "rst line of text in the
paragraph), or Column Width (Makes the rule
the width of the column).
boolean no If true, applies a paragraph rule below.
boolean no If true, the gap color of the rule below will over-
print.
double no The tint (as a percentage) of the stroke gap color
of the paragraph rule below. (Range: 0 to 100)
Note: Valid only when the paragraph rule below
type is not solid.
double no The distance to indent the le% edge of the para-
graph rule below (based on either the text width
or the column width of the last line in the para-
graph.
IDML File Format Specification
178 IDML File Reference: Stories
Name Rule Below Line-
Weight
Rule Below Offset Rule Below-
Overprint
Rule Below Right-
Indent
Rule Below Tint Rule Below Width Scale Affects Line-
Height
Shatai Adjust-
Rotation
Shatai Adjust Tsume Shatai Degree Angle Shatai-
Magnification
Single Word-
Justification
Skew Space After Space Before Span Column Inside-
Gutter
Span Column-
Outside Gutter
Span Column Type Span Split Column-
Count
Type Req Description
double no The line weight of the rule below
double no The amount to o&set the the paragraph rule
below from the baseline of the last line of the
paragraph.
boolean no If true, the rule below will overprint.
double no The distance to indent the right edge of the
paragraph rule below (based on either the text
width or the column width of the last line in the
paragraph.
double no The tint (as a percentage) of the paragraph rule
below. (Range: 0 to 100)
Rule Width_Enum-
Value
no The basis (text width or column width) used to
calculate the width of the paragraph rule below.
Can be Text Width (Makes the paragraph rule
above the width of the "rst line of text in the
paragraph), or Column Width (Makes the rule the
width of the column).
boolean no If true, the line changes size when characters are
scaled.
boolean no If true, applies shatai rotation.
boolean no If true, adjusts shatai tsume.
double no The shatai lens angle (in degrees).
double no The amount (as a percentage) of shatai obliquing
to apply.
Single Word-
Justification_
Enum Value
no The alignment to use for lines that contain a
single word. Can be Left Align (Le% aligns the
word), Center Align (Center aligns the word),
Right Align (Right aligns the word), or Fully-
Justified (Fully justifies the word).
double no The skew angle of the text. (Range: -85 to 85)
double no The height of the paragraph space below.
double no The height of the paragraph space above.
double no The inside gutter if the paragraph splits columns.
double no The outside gutter if the paragraph splits
columns.
Span Column Type-
Options_Enum Value
no Whether a paragraph should be a single
column, span columns or split columns.
Can be SingleColumn, SpanColumns, or
SplitColumns.
int no The number of columns a paragraph spans or
the number of split columns.
IDML File Format Specification
179 IDML File Reference: Stories
Name Start Paragraph Strike Through Gap-
Overprint
Strike Through Gap-
Tint
Strike Through-
Offset
Strike Through-
Overprint
Strike Through Tint Strike Through-
Weight
Strike Thru Stroke Alignment Stroke Color Stroke Tint Stroke Weight Tatechuyoko Tatechuyoko-
XOffset
Tatechuyoko-
YOffset
Tracking Trailing Aki Type Req Description
Start Paragraph_
Enum Value
no The location at which to start the paragraph.
Can be Anywhere (Starts in the next available
space), Next Column (Starts at the top of the next
column), Next Frame (Starts at the top of the
next text frame in the thread), Next Page (Starts
at the top of the next page), Next Odd Page
(Starts at the top of the next odd-numbered
page), or Next Even Page (Starts at the top of the
next even-numbered page).
boolean no If true, the gap color of the strikethrough stroke
will overprint. Note: Valid when strike through
type is not solid.
double no The tint (as a percentage) of the strikethrough
stroke gap color. (Range: 0 to 100) Note: Valid
when strike through type is not solid.
double no The amount by which to o&set the strikethrough
stroke from the text baseline.
boolean no If true, the strikethrough stroke will overprint.
double no The tint (as a percentage) of the strikethrough
stroke. (Range: 0 to 100)
double no The stroke weight of the strikethrough stroke.
boolean no If true, draws a strikethrough line through the
text.
Text Stroke Align_
Enum Value
no The stroke alignment applied to the text. Can
be Center Alignment (The stroke straddles the
path), or Outside Alignment (The stroke is out-
side the path, like a picture frame).
string no The swatch (color, gradient, tint, or mixed ink)
applied to the stroke of the Paragraph.
double no The tint (as a percentage) of the stroke color of
the Paragraph. (To specify a tint percentage,
use a number in the range of 0 to 100; to use the
inherited or overridden value, use -1.)
double no The stroke weight applied to the characters of
the text.
boolean no If true, makes the character horizontal in verti-
cal text.
double no The horizontal o&set for horizontal characters in
vertical text.
double no The vertical o&set for horizontal characters in
vertical text.
double no The amount by which to loosen or tighten a
block of text, speci"ed in thousands of an em.
double no The amount of space a%er each character.
IDML File Format Specification
180 IDML File Reference: Stories
Name Type Req Description
Treat Ideographic-
Space As Space
boolean no If true, ideographic spaces will not wrap to the
next line like text characters.
Tsume double no The amount of horizontal character compres-
sion.
Underline boolean no If true, underlines the text.
Underline Gap-
Overprint
boolean no If true, the gap color of the underline stroke will
overprint.
Underline Gap Tint double no The tint (as a percentage) of the gap color of the
underline stroke. (Range: 0 to 100) Note: Valid
when underline type is not solid.
Underline Offset double no The amount by which to o&set the underline
from the text baseline.
Underline-
Overprint
boolean no If true, the underline stroke color will overprint.
Underline Tint double no The underline stroke tint (as a percentage).
(Range: 0 to 100)
Underline Weight double no The stroke weight of the underline stroke.
Vertical Scale double no The vertical scaling applied to the text as a per-
centage of its current size. (Range: 1 to 1000)
Warichu boolean no If true, turns on warichu.
Warichu Alignment Warichu Alignment_
Enum Value
no The warichu alignment. Can be Auto (Auto-
matically aligns warichu characters), Left-
Align (Aligns warichu on the le% side of the text
frame), Center Align (Aligns warichu in the
center of the text frame), Right Align (Wari-
chu on the rigt side of the text frame), Fully-
Justified (Justi"es warichu lines and makes
all lines of equal length), Left Justified (Jus-
ti"es warichu lines and le% aligns the last line),
Center Justified (Justi"es warichu lines and
center aligns the last line), or Right Justified
(Justi"es warichu lines and right aligns the last
line).
Warichu Chars-
After Break
short no The minimum number of characters allowed
a%er a line break.
Warichu Chars-
Before Break
short no The minimum number of characters allowed
before a line break.
Warichu Line-
Spacing
double no The gap between lines of warichu characters.
Warichu Lines short no The number of lines of warichu within a single
normal line.
Warichu Size double no The amount (as a percentage) to scale parent text
size to determine warichu size.
XOffset Diacritic double no The X o&set for diacritic adjustment
YOffset Diacritic double no The Y o&set for diacritic adjustment
IDML File Format Specification
181 IDML File Reference: Stories
Table 105. Common Text Properties Represented as Elements
Name Type Req Description
All GREPStyles List Item no A list of the grep styles in the text.
All Line Styles List Item no A list of the line styles in the text.
All Nested Styles List Item no A list of the nested styles in the text.
Applied Font string (a
reference to a
self attribute)
or string
no The font applied to the text, speci"ed as either a
font object or the name of font family.
Applied Numbering-
List
string (a
reference to a
self attribute)
or string
no The list to be part of.
Balance Ragged-
Lines
boolean or
Balance Lines-
Style_Enum Value
no If true or set to an enumeration value, bal-
ances ragged lines in the paragraph(s) of the
Paragraph. Note: Not valid with a single-line
text composer. For information, see composer.
Can be No Balancing (Does not balance lines),
Vee Shape (Prefers shorter last lines), Fully-
Balanced (Balances lines equally), or Pyramid-
Shape (Prefers longer last lines).
Bullet Char undefined no Bullet character.
Bullets Character-
Style
string (a
reference to a
self attribute)
or string
no The character style to be used for the text a%er
string.
Bullets Font string (a
reference to a
self attribute)
or string or
Auto Enum_Enum-
Value
no The font used for bullet characters.
Bullets Font Style string or
Nothing Enum_Enum-
Value or Auto-
Enum_Enum Value
no The font style used for bullet characters.
Custom Glyph long or string no A custom glyph.
Kenten Fill Color string (a
reference to a
self attribute)
or string
no The swatch (color, gradient, tint, or mixed ink)
applied to the "ll of kenten characters.
Kenten Font string (a
reference to a
self attribute)
or string
no The font to use for kenten characters.
Kenten Font Style string or
Nothing Enum_Enum-
Value
no The font style of kenten characters.
IDML File Format Specification
182 IDML File Reference: Stories
Name Type Req Description
Kenten Stroke Color string (a
reference to a
self attribute)
or string
no The swatch (color, gradient, tint, or mixed ink)
applied to the stroke of kenten characters.
Kinsoku Set string (a
reference to a
self attribute)
or Kinsoku-
Set_Enum Value or
string
no The kinsoku set that determines legitimate line
breaks. Can return: Kinsoku Table, Kinsoku Set
enumerator or String. Can be Nothing (Does
not use a kinsoku set), Hard Kinsoku (Uses the
hard or maximum kinsoku set, which includes
all Japanese characters that should not begin or
end a line), Soft Kinsoku (Uses the so% or weak
kinsoku set, which omits from the hard kinsoku
set long vowel symbols and small hiragana and
katakana characters), Korean Kinsoku (Uses
the Korean kinsoku set), Simplified Chinese-
Kinsoku (Uses the simpli"ed Chinese kinsoku
set), or Traditional Chinese Kinsoku (Uses
the traditional Chinese kinsoku set).
Leading double or
Leading_Enum Value
no The leading applied to the text. Can return: Unit
or Leading enumerator.
IDML File Format Specification
183 IDML File Reference: Stories
Name Type Req Description
Mojikumi string (a
reference to a
self attribute)
or string or
Mojikumi Table-
Defaults_Enum-
Value
no The mojikumi table. For information, see moji-
kumi table defaults. Can be Nothing (Turns o&
mojikumi), Line End All One Half Em Enum (Uses
half-width spacing for all characters), One Em-
Indent Line End Uke One Half Em Enum (Indents
lines one space and uses line end uke one half
space), One Or One Half Em Indent Line End-
Uke One Half Em Enum (Indents lines one full or
half space and uses line end uke one half space),
One Or One Half Em Indent Line End All One Em-
Enum (Uses full-witdh spacing for all characters
except the last character in the line, which uses
either full- or half-width spacing), One Em-
Indent Line End All One Em Enum (Indents lines
one full space and uses full-width spacing for
all characters), One Em Indent Line End All No-
Float Enum (Indents lines one full space and
uses no $oat for all characters), One Em Indent-
Line End Uke No Float Enum (Indents lines one
full space and uses line end uke no $oat), One-
Or One Half Em Indent Line End Uke No Float-
Enum (Indents lines one half space or one full
space and uses line end uke no $oat), One Em-
Indent Line End All One Half Em Enum (Indents
lines one full space and uses half-width spacing
for all characters), Line End All One Em Enum
(Uses full-width spacing for all characters),
Line End Uke No Float Enum (Uses line end uke
no $oat), One Or One Half Em Indent Line-
End Period One Em Enum (Indents lines one or
one-half space and uses full-width spacing for
punctuation and for the last character in the
line), One Em Indent Line End Period One Em Enum
(Indents lines one full space and uses full-width
spacing for punctuation and for the last charac-
ter in the line), or Line End Period One Em Enum
(Uses full-width spacing for punctuation).
Numbering-
Character Style
string (a
reference to a
self attribute)
or string
no The character style to be used for the number
string.
Numbering Format Numbering Style_
Enum Value or
string
no Numbering format options. Can be Upper-
Roman (Upper roman), Lower Roman (Lower
roman), Upper Letters (Upper letters), Lower-
Letters (Lower letters), Arabic (Arabic),
Katakana Modern (Katakana (a, i, u, e, o)),
Katakana Traditional (Katakana (i, ro, ha,
ni)), Format None (Do not add characters),
Single Leading Zeros (Add single leading
zeros), Kanji (Kanji), Double Leading Zeros
(Add double leading zeros), or Triple-
Leading Zeros (Add triple leading zeros).
Numbering Restart-
Policies
undefined no Numbering restart policies.
IDML File Format Specification
184 IDML File Reference: Stories
Name Open Type Features Ruby Fill Ruby Font Ruby Font Style Ruby Stroke Rule Above Color Rule Above Gap Color Rule Above Type Rule Below Color Rule Below Gap Color Rule Below Type Strike Through-
Color
Strike Through Gap-
Color
Type Req Description
List Item no Open Type features.
string (a
reference to a
self attribute)
or string
no The swatch (color, gradient, tint, or mixed ink)
applied to the "ll of ruby characters.
string (a
reference to a
self attribute)
or string
no The font applied to ruby characters.
string or
Nothing Enum_Enum-
Value
no The font style of ruby characters.
string (a
reference to a
self attribute)
or string
no The swatch (color, gradient, tint, or mixed ink)
applied to the stroke of ruby characters.
string (a
reference to a
self attribute)
or string
no The swatch (color, gradient, tint, or mixed ink)
applied to the paragraph rule above.
string (a
reference to a
self attribute)
or string
no The swatch (color, gradient, tint, or mixed ink)
applied to the stroke gap of the paragraph rule
above. Note: Valid only when the paragraph rule
above type is not solid.
string (a
reference to a
self attribute)
or string
no The stroke type of the rule above the paragraph.
string (a
reference to a
self attribute)
or string
no The swatch (color, gradient, tint, or mixed ink)
applied to the paragraph rule below. Can return:
Swatch or String.
string (a
reference to a
self attribute)
or string
no The swatch (color, gradient, tint, or mixed ink)
applied to the stroke gap of the paragraph rule
below. Note: Valid only when the paragraph rule
below type is not solid.
string (a
reference to a
self attribute)
or string
no The stroke type of the rule below the paragraph.
string (a
reference to a
self attribute)
or string
no The swatch (color, gradient, tint, or mixed ink)
applied to the strikethrough stroke.
string (a
reference to a
self attribute)
or string
no The swatch (color, gradient, tint, or mixed ink)
applied to the gap of the strikethrough stroke.
IDML File Format Specification
185 IDML File Reference: Stories
Name Type Req Description
Strike Through Type string (a
reference to a
self attribute)
or string
no The stroke type of the strikethrough stroke. Can
return: Stroke Style or String.
Tab List List Item no A list of all of the properties of all of the para-
graph’s tab stops. Can return: Array of Arrays of
Property Name/Value Pairs.
Underline Color string (a
reference to a
self attribute)
or string
no The swatch (color, gradient, tint, or mixed ink)
applied to the underline stroke. Can return:
Swatch or String.
Underline Gap Color string (a
reference to a
self attribute)
or string
no The swatch (color, gradient, tint, or mixed ink)
applied to the gap of the underline stroke. Note:
Valid when underline type is not solid. Can
return: Swatch or String.
Underline Type string (a
reference to a
self attribute)
or string
no The stroke type of the underline stroke. Can
return: Stroke Style or String.
Attributes and Elements Related to Japanese Features
Attributes such as Ruby Font, Mojikumi, and Warichu Lines are speci"c to the Japanese feature set.
IDML recognizes these settings because In Design supports a number of di&erent platforms and
locales. For example, an IDML package create by Japanese version of In Design can be opened
without error in English version of In Design (just as a binary "le created by one language version
can be opened in another language version).
IDML File Format Specification
186 IDML File Reference: Stories
10.4.7 Story Schema
The attributes and elements of a <Story> element de"ne text content and text formatting of the
story. In Design stories can contain page items, such as text frames or graphics, notes, footnotes,
hyperlinks, and other objects. The <Story> element can contain everything that can appear in a
story in an In Design document.
Most of the attributes and elements de"ned in the schema for a story concern the text formatting
defaults and preference settings of the story. Story attributes such as Applied Paragraph Style,
Applied Character Style, and Font Style de"ne the default text formatting of the story. They can
be overridden by related attributes in text child elements that appear inside the story, such as the
<Paragraph Style Range> element.
Schema Example 78. Story Schema
Story_Object = element Story {
attribute Self { xsd:string },
attribute AppliedTOCStyle { xsd:string }?,
attribute FontStyle { xsd:string }?,
attribute PointSize { xsd:double }?,
attribute KerningMethod { xsd:string }?,
attribute Tracking { xsd:double }?,
attribute Capitalization { Capitalization_EnumValue }?,
attribute Position { Position_EnumValue }?,
attribute Underline { xsd:boolean }?,
attribute StrikeThru { xsd:boolean }?,
attribute Ligatures { xsd:boolean }?,
attribute NoBreak { xsd:boolean }?,
attribute HorizontalScale { xsd:double }?,
attribute VerticalScale { xsd:double }?,
attribute BaselineShift { xsd:double }?,
attribute Skew { xsd:double }?,
attribute FillTint { xsd:double }?,
attribute StrokeTint { xsd:double }?,
attribute StrokeWeight { xsd:double }?,
attribute OverprintStroke { xsd:boolean }?,
attribute OverprintFill { xsd:boolean }?,
attribute OTFFigureStyle { OTFFigureStyle_EnumValue }?,
attribute OTFOrdinal { xsd:boolean }?,
attribute OTFFraction { xsd:boolean }?,
attribute OTFDiscretionaryLigature { xsd:boolean }?,
attribute OTFTitling { xsd:boolean }?,
attribute OTFContextualAlternate { xsd:boolean }?,
attribute OTFSwash { xsd:boolean }?,
attribute UnderlineTint { xsd:double }?,
attribute UnderlineGapTint { xsd:double }?,
attribute UnderlineOverprint { xsd:boolean }?,
attribute UnderlineGapOverprint { xsd:boolean }?,
attribute UnderlineOffset { xsd:double }?,
attribute UnderlineWeight { xsd:double }?,
attribute StrikeThroughTint { xsd:double }?,
attribute StrikeThroughGapTint { xsd:double }?,
attribute StrikeThroughOverprint { xsd:boolean }?,
attribute StrikeThroughGapOverprint { xsd:boolean }?,
attribute StrikeThroughOffset { xsd:double }?,
IDML File Format Specification
187 IDML File Reference: Stories
attribute StrikeThroughWeight { xsd:double }?,
attribute FillColor { xsd:string }?,
attribute StrokeColor { xsd:string }?,
attribute AppliedLanguage { xsd:string }?,
attribute ParagraphKashidaWidth { xsd:double }?,
attribute FirstLineIndent { xsd:double }?,
attribute LeftIndent { xsd:double }?,
attribute RightIndent { xsd:double }?,
attribute SpaceBefore { xsd:double }?,
attribute SpaceAfter { xsd:double }?,
attribute Justification { Justification_EnumValue }?,
attribute SingleWordJustification { SingleWordJustification_EnumValue }?,
attribute AutoLeading { xsd:double }?,
attribute DropCapLines { xsd:short {minInclusive="0" maxInclusive="25"} }?,
attribute DropCapCharacters { xsd:short {minInclusive="0" maxInclusive="150"}
}?,
attribute KeepLinesTogether { xsd:boolean }?,
attribute KeepAllLinesTogether { xsd:boolean }?,
attribute KeepWithNext { xsd:short {minInclusive="0" maxInclusive="5"} }?,
attribute KeepFirstLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
attribute KeepLastLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
attribute StartParagraph { StartParagraph_EnumValue }?,
attribute Composer { xsd:string }?,
attribute MinimumWordSpacing { xsd:double }?,
attribute MaximumWordSpacing { xsd:double }?,
attribute DesiredWordSpacing { xsd:double }?,
attribute MinimumLetterSpacing { xsd:double }?,
attribute MaximumLetterSpacing { xsd:double }?,
attribute DesiredLetterSpacing { xsd:double }?,
attribute MinimumGlyphScaling { xsd:double }?,
attribute MaximumGlyphScaling { xsd:double }?,
attribute DesiredGlyphScaling { xsd:double }?,
attribute RuleAbove { xsd:boolean }?,
attribute RuleAboveOverprint { xsd:boolean }?,
attribute RuleAboveLineWeight { xsd:double }?,
attribute RuleAboveTint { xsd:double }?,
attribute RuleAboveOffset { xsd:double }?,
attribute RuleAboveLeftIndent { xsd:double }?,
attribute RuleAboveRightIndent { xsd:double }?,
attribute RuleAboveWidth { RuleWidth_EnumValue }?,
attribute RuleAboveGapTint { xsd:double }?,
attribute RuleAboveGapOverprint { xsd:boolean }?,
attribute RuleBelow { xsd:boolean }?,
attribute RuleBelowLineWeight { xsd:double }?,
attribute RuleBelowTint { xsd:double }?,
attribute RuleBelowOffset { xsd:double }?,
attribute RuleBelowLeftIndent { xsd:double }?,
attribute RuleBelowRightIndent { xsd:double }?,
attribute RuleBelowWidth { RuleWidth_EnumValue }?,
attribute RuleBelowGapTint { xsd:double }?,
attribute HyphenateCapitalizedWords { xsd:boolean }?,
attribute Hyphenation { xsd:boolean }?,
attribute HyphenateBeforeLast { xsd:short {minInclusive="1" maxInclusive="15"}
}?,
IDML File Format Specification
188 IDML File Reference: Stories
attribute HyphenateAfterFirst { xsd:short {minInclusive="1" maxInclusive="15"}
}?,
attribute HyphenateWordsLongerThan { xsd:short {minInclusive="3"
maxInclusive="25"} }?,
attribute HyphenateLadderLimit { xsd:short {minInclusive="0" maxInclusive="25"}
}?,
attribute HyphenationZone { xsd:double }?,
attribute HyphenWeight { xsd:short {minInclusive="0" maxInclusive="10"} }?,
attribute AppliedParagraphStyle { xsd:string }?,
attribute AppliedCharacterStyle { xsd:string }?,
attribute LastLineIndent { xsd:double }?,
attribute HyphenateLastWord { xsd:boolean }?,
attribute OTFSlashedZero { xsd:boolean }?,
attribute OTFHistorical { xsd:boolean }?,
attribute OTFStylisticSets { xsd:int }?,
attribute GradientFillLength { xsd:double }?,
attribute GradientFillAngle { xsd:double }?,
attribute GradientStrokeLength { xsd:double }?,
attribute GradientStrokeAngle { xsd:double }?,
attribute GradientFillStart { UnitPointType_TypeDef }?,
attribute GradientStrokeStart { UnitPointType_TypeDef }?,
attribute KeepWithPrevious { xsd:boolean }?,
attribute SpanColumnType { SpanColumnTypeOptions_EnumValue }?,
attribute SplitColumnInsideGutter { xsd:double }?,
attribute SplitColumnOutsideGutter { xsd:double }?,
attribute SpanColumnMinSpaceBefore { xsd:double }?,
attribute SpanColumnMinSpaceAfter { xsd:double }?,
attribute RuleBelowOverprint { xsd:boolean }?,
attribute RuleBelowGapOverprint { xsd:boolean }?,
attribute DropcapDetail { xsd:int }?,
attribute HyphenateAcrossColumns { xsd:boolean }?,
attribute KeepRuleAboveInFrame { xsd:boolean }?,
attribute IgnoreEdgeAlignment { xsd:boolean }?,
attribute OTFMark { xsd:boolean }?,
attribute OTFLocale { xsd:boolean }?,
attribute PositionalForm { PositionalForms_EnumValue }?,
attribute ParagraphDirection { ParagraphDirectionOptions_EnumValue }?,
attribute ParagraphJustification { ParagraphJustificationOptions_EnumValue }?,
attribute MiterLimit { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
attribute StrokeAlignment { TextStrokeAlign_EnumValue }?,
attribute EndJoin { OutlineJoin_EnumValue }?,
attribute OTFOverlapSwash { xsd:boolean }?,
attribute OTFStylisticAlternate { xsd:boolean }?,
attribute OTFJustificationAlternate { xsd:boolean }?,
attribute OTFStretchedAlternate { xsd:boolean }?,
attribute CharacterDirection { CharacterDirectionOptions_EnumValue }?,
attribute KeyboardDirection { CharacterDirectionOptions_EnumValue }?,
attribute DigitsType { DigitsTypeOptions_EnumValue }?,
attribute Kashidas { KashidasOptions_EnumValue }?,
attribute DiacriticPosition { DiacriticPositionOptions_EnumValue }?,
attribute XOffsetDiacritic { xsd:double }?,
attribute YOffsetDiacritic { xsd:double }?,
attribute ParagraphBreakType { ParagraphBreakTypes_EnumValue }?,
attribute PageNumberType { PageNumberTypes_EnumValue }?,
IDML File Format Specification
189 IDML File Reference: Stories
attribute LinkResourceId { xsd:int }?,
attribute TrackChanges { xsd:boolean }?,
attribute StoryTitle { xsd:string }?,
attribute AppliedNamedGrid { xsd:string }?,
attribute GridAlignFirstLineOnly { xsd:boolean }?,
attribute GridAlignment { GridAlignment_EnumValue }?,
attribute GridGyoudori { xsd:short }?,
attribute AutoTcy { xsd:short }?,
attribute AutoTcyIncludeRoman { xsd:boolean }?,
attribute KinsokuType { KinsokuType_EnumValue }?,
attribute KinsokuHangType { KinsokuHangTypes_EnumValue }?,
attribute BunriKinshi { xsd:boolean }?,
attribute Rensuuji { xsd:boolean }?,
attribute RotateSingleByteCharacters { xsd:boolean }?,
attribute LeadingModel { LeadingModel_EnumValue }?,
attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
attribute Tsume { xsd:double }?,
attribute LeadingAki { xsd:double }?,
attribute TrailingAki { xsd:double }?,
attribute CharacterRotation { xsd:double }?,
attribute Jidori { xsd:short }?,
attribute ShataiMagnification { xsd:double }?,
attribute ShataiDegreeAngle { xsd:double }?,
attribute ShataiAdjustRotation { xsd:boolean }?,
attribute ShataiAdjustTsume { xsd:boolean }?,
attribute Tatechuyoko { xsd:boolean }?,
attribute TatechuyokoXOffset { xsd:double }?,
attribute TatechuyokoYOffset { xsd:double }?,
attribute KentenTint { xsd:double }?,
attribute KentenStrokeTint { xsd:double }?,
attribute KentenWeight { xsd:double }?,
attribute KentenOverprintFill { AdornmentOverprint_EnumValue }?,
attribute KentenOverprintStroke { AdornmentOverprint_EnumValue }?,
attribute KentenKind { KentenCharacter_EnumValue }?,
attribute KentenPlacement { xsd:double }?,
attribute KentenAlignment { KentenAlignment_EnumValue }?,
attribute KentenPosition { RubyKentenPosition_EnumValue }?,
attribute KentenFontSize { xsd:double }?,
attribute KentenXScale { xsd:double }?,
attribute KentenYScale { xsd:double }?,
attribute KentenCustomCharacter { xsd:string }?,
attribute KentenCharacterSet { KentenCharacterSet_EnumValue }?,
attribute RubyTint { xsd:double }?,
attribute RubyWeight { xsd:double }?,
attribute RubyOverprintFill { AdornmentOverprint_EnumValue }?,
attribute RubyOverprintStroke { AdornmentOverprint_EnumValue }?,
attribute RubyStrokeTint { xsd:double }?,
attribute RubyFontSize { xsd:double }?,
attribute RubyOpenTypePro { xsd:boolean }?,
attribute RubyXScale { xsd:double }?,
attribute RubyYScale { xsd:double }?,
attribute RubyType { RubyTypes_EnumValue }?,
attribute RubyAlignment { RubyAlignments_EnumValue }?,
attribute RubyPosition { RubyKentenPosition_EnumValue }?,
IDML File Format Specification
190 IDML File Reference: Stories
attribute RubyXOffset { xsd:double }?,
attribute RubyYOffset { xsd:double }?,
attribute RubyParentSpacing { RubyParentSpacing_EnumValue }?,
attribute RubyAutoAlign { xsd:boolean }?,
attribute RubyOverhang { xsd:boolean }?,
attribute RubyAutoScaling { xsd:boolean }?,
attribute RubyParentScalingPercent { xsd:double }?,
attribute RubyParentOverhangAmount { RubyOverhang_EnumValue }?,
attribute Warichu { xsd:boolean }?,
attribute WarichuSize { xsd:double }?,
attribute WarichuLines { xsd:short }?,
attribute WarichuLineSpacing { xsd:double }?,
attribute WarichuAlignment { WarichuAlignment_EnumValue }?,
attribute WarichuCharsAfterBreak { xsd:short }?,
attribute WarichuCharsBeforeBreak { xsd:short }?,
attribute OTFProportionalMetrics { xsd:boolean }?,
attribute OTFHVKana { xsd:boolean }?,
attribute OTFRomanItalics { xsd:boolean }?,
attribute ScaleAffectsLineHeight { xsd:boolean }?,
attribute CjkGridTracking { xsd:boolean }?,
attribute GlyphForm { AlternateGlyphForms_EnumValue }?,
attribute RubyFlag { xsd:int }?,
attribute RubyString { xsd:string }?,
attribute ParagraphGyoudori { xsd:boolean }?,
attribute RubyAutoTcyDigits { xsd:short }?,
attribute RubyAutoTcyIncludeRoman { xsd:boolean }?,
attribute RubyAutoTcyAutoScale { xsd:boolean }?,
attribute TreatIdeographicSpaceAsSpace { xsd:boolean }?,
attribute AllowArbitraryHyphenation { xsd:boolean }?,
attribute BulletsAndNumberingListType { ListType_EnumValue }?,
attribute NumberingExpression { xsd:string }?,
attribute BulletsTextAfter { xsd:string }?,
attribute NumberingLevel { xsd:int }?,
attribute NumberingContinue { xsd:boolean }?,
attribute NumberingStartAt { xsd:int }?,
attribute NumberingApplyRestartPolicy { xsd:boolean }?,
attribute BulletsAlignment { ListAlignment_EnumValue }?,
attribute NumberingAlignment { ListAlignment_EnumValue }?,
element Properties {
element ExcelImportPreferences { list_type, element ListItem {
(enum_type, AlignmentStyleOptions_EnumValue ) |
(long_type, xsd:int ) |
(bool_type, xsd:boolean ) |
(enum_type, TableFormattingOptions_EnumValue ) |
(string_type, xsd:string )
}*
}?&
element WordRTFImportPreferences { list_type, element ListItem {
(bool_type, xsd:boolean ) |
(enum_type, ConvertPageBreaks_EnumValue ) |
(enum_type, ConvertTablesOptions_EnumValue ) |
(enum_type, ResolveStyleClash_EnumValue ) |
(long_type, xsd:int )
}*
IDML File Format Specification
191 IDML File Reference: Stories
}?&
element TextImportPreferences { list_type, element ListItem {
(bool_type, xsd:boolean ) |
(long_type, xsd:int ) |
(enum_type, TextImportCharacterSet_EnumValue ) |
(enum_type, ImportPlatform_EnumValue ) |
(short_type, xsd:short )
}*
}?&
element StyleMappingPreferences { list_type,
element ListItem {
list_type, element ListItem { string_type, xsd:string }*
},
element ListItem {
list_type, element ListItem { string_type, xsd:string }*
}
}?&
element AppliedFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element Leading {
(unit_type, xsd:double ) |
(enum_type, Leading_EnumValue )
}?&
element UnderlineColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element UnderlineGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element UnderlineType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element StrikeThroughColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element StrikeThroughGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element StrikeThroughType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element BalanceRaggedLines {
(bool_type, xsd:boolean ) |
(enum_type, BalanceLinesStyle_EnumValue )
}?&
element RuleAboveColor {
IDML File Format Specification
192 IDML File Reference: Stories
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleAboveGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleAboveType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleBelowColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleBelowGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleBelowType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element SpanSplitColumnCount {
(short_type, xsd:short {minInclusive="1" maxInclusive="40"} ) |
(enum_type, SpanColumnCountOptions_EnumValue )
}?&
element AllLineStyles { list_type, element ListItem {
record_type,
(
element AppliedCharacterStyle { object_type, xsd:string }&
element LineCount { long_type, xsd:int }&
element RepeatLast { long_type, xsd:int })
}*
}?&
element AllGREPStyles { list_type, element ListItem {
record_type,
(
element AppliedCharacterStyle { object_type, xsd:string }&
element GrepExpression { string_type, xsd:string })
}*
}?&
element AllNestedStyles { list_type, element ListItem {
record_type,
(
element AppliedCharacterStyle { object_type, xsd:string }&
element Delimiter {
(string_type, xsd:string ) |
(enum_type, NestedStyleDelimiters_EnumValue )
}&
element Repetition { long_type, xsd:int }&
element Inclusive { bool_type, xsd:boolean })
}*
}?&
IDML File Format Specification
193 IDML File Reference: Stories
element TabList { list_type, element ListItem {
record_type,
(
element Alignment { enum_type, TabStopAlignment_EnumValue }&
element AlignmentCharacter { string_type, xsd:string }&
element Leader { string_type, xsd:string }&
element Position { unit_type, xsd:double })
}*
}?&
element OpenTypeFeatures { list_type, element ListItem {
list_type,
element ListItem {
(string_type, xsd:string ) |
(long_type, xsd:int )
element ListItem {
(string_type, xsd:string ) |
(long_type, xsd:int )
},
}
}*
}?&
element KinsokuSet {
(object_type, xsd:string ) |
(enum_type, KinsokuSet_EnumValue ) |
(string_type, xsd:string )
}?&
element Mojikumi {
(object_type, xsd:string ) |
(string_type, xsd:string ) |
(enum_type, MojikumiTableDefaults_EnumValue )
}?&
element KentenFillColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element KentenStrokeColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element KentenFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element KentenFontStyle {
(string_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue )
}?&
element RubyFill {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RubyStroke {
(object_type, xsd:string ) |
(string_type, xsd:string )
IDML File Format Specification
194 IDML File Reference: Stories
}?&
element RubyFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RubyFontStyle {
(string_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue )
}?&
element BulletChar {
attribute BulletCharacterType { BulletCharacterType_EnumValue },
attribute BulletCharacterValue { xsd:int }
}?&
element BulletsFont {
(object_type, xsd:string ) |
(string_type, xsd:string ) |
(enum_type, AutoEnum_EnumValue )
}?&
element BulletsFontStyle {
(string_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue ) |
(enum_type, AutoEnum_EnumValue )
}?&
element BulletsCharacterStyle {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element NumberingCharacterStyle {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element AppliedNumberingList {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element NumberingFormat {
(enum_type, NumberingStyle_EnumValue ) |
(string_type, xsd:string )
}?&
element NumberingRestartPolicies {
attribute RestartPolicy { RestartPolicy_EnumValue },
attribute LowerLevel { xsd:int },
attribute UpperLevel { xsd:int }
}?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
StoryPreference_Object?,
GridDataInformation_Object?,
(MetadataPacketPreference_Object?&
InCopyExportOption_Object?),
IDML File Format Specification
195 IDML File Reference: Stories
(GaijiOwnedItemObject_Object*&
Footnote_Object*&
TextVariableInstance_Object*&
ParagraphStyleRange_Object*&
CharacterStyleRange_Object*&
XMLElement_Object*&
Table_Object*&
ParaStyleMapping_Object*&
CharStyleMapping_Object*&
TableStyleMapping_Object*&
CellStyleMapping_Object*&
Link_Object*&
Note_Object*&
Change_Object*&
Button_Object*&
HiddenText_Object*&
element Content {text}*&
element Br {empty}*)
)
}
Most of the properties of a story that are expressed as attributes can be found in the listing of
common text element attributes (see “Common Text Properties”).
Table 106. Story Properties Represented as Attributes
Name Type Req Description
Applied Named Grid string no The named grid in use.
Applied TOCStyle string no The applied TOC style.
Story Title string no Title for this story
Track Changes boolean no If true, track changes is turned on.
Most of the properties of a story that are expressed as elements can be found in the listing of
common text properties elements (see “Common Text Properties”). Stories can also contain a
number of elements that are unique to the <Story> element. These elements are described in the
following table.
Table 107. Story Properties Represented as Elements
Name Type Req Description
Excel Import-
Preferences
List Item no A series of ListItem elements de"ning the
properties of the Excel import preferences.
InDesign exports these properties to maintain
round-trip accuracy of the data in the IDML
document; there is no need to include them in
IDML documents you create yourself.
IDML File Format Specification
196 IDML File Reference: Stories
Name Type Req Description
Style Mapping-
Preferences
List Item no A series of ListItem elements de"ning the
properties of the style mapping import prefer-
ences. InDesign exports these properties to
maintain round-trip accuracy of the data in the
IDML document; there is no need to include
them in IDML documents you create yourself.
Text Import-
Preferences
List Item no A series of ListItem elements de"ning the
properties of the text import preferences. InDe-
sign exports these properties to maintain round-
trip accuracy of the data in the IDML document;
there is no need to include them in IDML docu-
ments you create yourself.
Word RTFImport-
Preferences
List Item no A series of ListItem elements de"ning the
properties of the Word/RTF import preferences.
InDesign exports these properties to maintain
round-trip accuracy of the data in the IDML
document; there is no need to include them in
IDML documents you create yourself.
10.4.8 Text Child Elements
Text child elements represent unique objects within the story, such as ranges of text, inline or
anchored objects (groups or frames), notes, tables, and hyperlinks. These fall into two categories
based on their representation in the IDML format: inline elements or text range elements.
Some inline text child elements may contain text content themselves—a note, for example, will
contain further <Paragraph Style Range> and <Character Style Range> elements, which, in turn,
can also contain anchored or inline items. An anchored text frame will contain a reference to
another <Story> element, which, in turn, can contain <Paragraph Style Range> and <Character-
Style Range> elements and text child elements of its own.
Text Range Elements
Text range elements are the XML elements that de"ne a range of text in a story. In general, a text
range element contains a continuous “run” of text formatting. These objects are further broken
up into <Paragraph Style Range> elements, which contain ranges of continuous paragraph
formatting. <Paragraph Style Range> elements contain <Character Style Range> elements,
which de"ne a continuous range of character formatting. All of the text in a <Story> element is
contained inside <Content> elements within <Character Style Range> elements.
Schema Example 79. Paragraph Style Range
ParagraphStyleRange_Object = element ParagraphStyleRange {
attribute KerningValue { xsd:double }?,
attribute FontStyle { xsd:string }?,
attribute PointSize { xsd:double }?,
attribute KerningMethod { xsd:string }?,
attribute Tracking { xsd:double }?,
attribute Capitalization { Capitalization_EnumValue }?,
attribute Position { Position_EnumValue }?,
attribute Underline { xsd:boolean }?,
IDML File Format Specification
197 IDML File Reference: Stories
attribute StrikeThru { xsd:boolean }?,
attribute Ligatures { xsd:boolean }?,
attribute NoBreak { xsd:boolean }?,
attribute HorizontalScale { xsd:double }?,
attribute VerticalScale { xsd:double }?,
attribute BaselineShift { xsd:double }?,
attribute Skew { xsd:double }?,
attribute FillTint { xsd:double }?,
attribute StrokeTint { xsd:double }?,
attribute StrokeWeight { xsd:double }?,
attribute OverprintStroke { xsd:boolean }?,
attribute OverprintFill { xsd:boolean }?,
attribute OTFFigureStyle { OTFFigureStyle_EnumValue }?,
attribute OTFOrdinal { xsd:boolean }?,
attribute OTFFraction { xsd:boolean }?,
attribute OTFDiscretionaryLigature { xsd:boolean }?,
attribute OTFTitling { xsd:boolean }?,
attribute OTFContextualAlternate { xsd:boolean }?,
attribute OTFSwash { xsd:boolean }?,
attribute UnderlineTint { xsd:double }?,
attribute UnderlineGapTint { xsd:double }?,
attribute UnderlineOverprint { xsd:boolean }?,
attribute UnderlineGapOverprint { xsd:boolean }?,
attribute UnderlineOffset { xsd:double }?,
attribute UnderlineWeight { xsd:double }?,
attribute StrikeThroughTint { xsd:double }?,
attribute StrikeThroughGapTint { xsd:double }?,
attribute StrikeThroughOverprint { xsd:boolean }?,
attribute StrikeThroughGapOverprint { xsd:boolean }?,
attribute StrikeThroughOffset { xsd:double }?,
attribute StrikeThroughWeight { xsd:double }?,
attribute FillColor { xsd:string }?,
attribute StrokeColor { xsd:string }?,
attribute AppliedLanguage { xsd:string }?,
attribute ParagraphKashidaWidth { xsd:double }?,
attribute FirstLineIndent { xsd:double }?,
attribute LeftIndent { xsd:double }?,
attribute RightIndent { xsd:double }?,
attribute SpaceBefore { xsd:double }?,
attribute SpaceAfter { xsd:double }?,
attribute Justification { Justification_EnumValue }?,
attribute SingleWordJustification { SingleWordJustification_EnumValue }?,
attribute AutoLeading { xsd:double }?,
attribute DropCapLines { xsd:short {minInclusive="0" maxInclusive="25"} }?,
attribute DropCapCharacters { xsd:short {minInclusive="0" maxInclusive="150"}
}?,
attribute KeepLinesTogether { xsd:boolean }?,
attribute KeepAllLinesTogether { xsd:boolean }?,
attribute KeepWithNext { xsd:short {minInclusive="0" maxInclusive="5"} }?,
attribute KeepFirstLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
attribute KeepLastLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
attribute StartParagraph { StartParagraph_EnumValue }?,
attribute Composer { xsd:string }?,
attribute MinimumWordSpacing { xsd:double }?,
IDML File Format Specification
198 IDML File Reference: Stories
attribute MaximumWordSpacing { xsd:double }?,
attribute DesiredWordSpacing { xsd:double }?,
attribute MinimumLetterSpacing { xsd:double }?,
attribute MaximumLetterSpacing { xsd:double }?,
attribute DesiredLetterSpacing { xsd:double }?,
attribute MinimumGlyphScaling { xsd:double }?,
attribute MaximumGlyphScaling { xsd:double }?,
attribute DesiredGlyphScaling { xsd:double }?,
attribute RuleAbove { xsd:boolean }?,
attribute RuleAboveOverprint { xsd:boolean }?,
attribute RuleAboveLineWeight { xsd:double }?,
attribute RuleAboveTint { xsd:double }?,
attribute RuleAboveOffset { xsd:double }?,
attribute RuleAboveLeftIndent { xsd:double }?,
attribute RuleAboveRightIndent { xsd:double }?,
attribute RuleAboveWidth { RuleWidth_EnumValue }?,
attribute RuleAboveGapTint { xsd:double }?,
attribute RuleAboveGapOverprint { xsd:boolean }?,
attribute RuleBelow { xsd:boolean }?,
attribute RuleBelowLineWeight { xsd:double }?,
attribute RuleBelowTint { xsd:double }?,
attribute RuleBelowOffset { xsd:double }?,
attribute RuleBelowLeftIndent { xsd:double }?,
attribute RuleBelowRightIndent { xsd:double }?,
attribute RuleBelowWidth { RuleWidth_EnumValue }?,
attribute RuleBelowGapTint { xsd:double }?,
attribute HyphenateCapitalizedWords { xsd:boolean }?,
attribute Hyphenation { xsd:boolean }?,
attribute HyphenateBeforeLast { xsd:short {minInclusive="1" maxInclusive="15"}
attribute HyphenateWordsLongerThan { xsd:short {minInclusive="3"
maxInclusive="25"} }?,
attribute HyphenateLadderLimit { xsd:short {minInclusive="0" maxInclusive="25"}
}?,
}?,
}?,
attribute HyphenateAfterFirst { xsd:short {minInclusive="1" maxInclusive="15"}
attribute HyphenationZone { xsd:double }?,
attribute HyphenWeight { xsd:short {minInclusive="0" maxInclusive="10"} }?,
attribute AppliedParagraphStyle { xsd:string }?,
attribute AppliedCharacterStyle { xsd:string }?,
attribute LastLineIndent { xsd:double }?,
attribute HyphenateLastWord { xsd:boolean }?,
attribute OTFSlashedZero { xsd:boolean }?,
attribute OTFHistorical { xsd:boolean }?,
attribute OTFStylisticSets { xsd:int }?,
attribute GradientFillLength { xsd:double }?,
attribute GradientFillAngle { xsd:double }?,
attribute GradientStrokeLength { xsd:double }?,
attribute GradientStrokeAngle { xsd:double }?,
attribute GradientFillStart { UnitPointType_TypeDef }?,
attribute GradientStrokeStart { UnitPointType_TypeDef }?,
attribute KeepWithPrevious { xsd:boolean }?,
attribute SpanColumnType { SpanColumnTypeOptions_EnumValue }?,
attribute SplitColumnInsideGutter { xsd:double }?,
IDML File Format Specification
199 IDML File Reference: Stories
attribute SplitColumnOutsideGutter { xsd:double }?,
attribute SpanColumnMinSpaceBefore { xsd:double }?,
attribute SpanColumnMinSpaceAfter { xsd:double }?,
attribute RuleBelowOverprint { xsd:boolean }?,
attribute RuleBelowGapOverprint { xsd:boolean }?,
attribute DropcapDetail { xsd:int }?,
attribute HyphenateAcrossColumns { xsd:boolean }?,
attribute KeepRuleAboveInFrame { xsd:boolean }?,
attribute IgnoreEdgeAlignment { xsd:boolean }?,
attribute OTFMark { xsd:boolean }?,
attribute OTFLocale { xsd:boolean }?,
attribute PositionalForm { PositionalForms_EnumValue }?,
attribute ParagraphDirection { ParagraphDirectionOptions_EnumValue }?,
attribute ParagraphJustification { ParagraphJustificationOptions_EnumValue }?,
attribute MiterLimit { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
attribute StrokeAlignment { TextStrokeAlign_EnumValue }?,
attribute EndJoin { OutlineJoin_EnumValue }?,
attribute OTFOverlapSwash { xsd:boolean }?,
attribute OTFStylisticAlternate { xsd:boolean }?,
attribute OTFJustificationAlternate { xsd:boolean }?,
attribute OTFStretchedAlternate { xsd:boolean }?,
attribute CharacterDirection { CharacterDirectionOptions_EnumValue }?,
attribute KeyboardDirection { CharacterDirectionOptions_EnumValue }?,
attribute DigitsType { DigitsTypeOptions_EnumValue }?,
attribute Kashidas { KashidasOptions_EnumValue }?,
attribute DiacriticPosition { DiacriticPositionOptions_EnumValue }?,
attribute XOffsetDiacritic { xsd:double }?,
attribute YOffsetDiacritic { xsd:double }?,
attribute ParagraphBreakType { ParagraphBreakTypes_EnumValue }?,
attribute PageNumberType { PageNumberTypes_EnumValue }?,
attribute AppliedConditions { list { xsd:string * } }?,
attribute GridAlignFirstLineOnly { xsd:boolean }?,
attribute GridAlignment { GridAlignment_EnumValue }?,
attribute GridGyoudori { xsd:short }?,
attribute AutoTcy { xsd:short }?,
attribute AutoTcyIncludeRoman { xsd:boolean }?,
attribute KinsokuType { KinsokuType_EnumValue }?,
attribute KinsokuHangType { KinsokuHangTypes_EnumValue }?,
attribute BunriKinshi { xsd:boolean }?,
attribute Rensuuji { xsd:boolean }?,
attribute RotateSingleByteCharacters { xsd:boolean }?,
attribute LeadingModel { LeadingModel_EnumValue }?,
attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
attribute Tsume { xsd:double }?,
attribute LeadingAki { xsd:double }?,
attribute TrailingAki { xsd:double }?,
attribute CharacterRotation { xsd:double }?,
attribute Jidori { xsd:short }?,
attribute ShataiMagnification { xsd:double }?,
attribute ShataiDegreeAngle { xsd:double }?,
attribute ShataiAdjustRotation { xsd:boolean }?,
attribute ShataiAdjustTsume { xsd:boolean }?,
attribute Tatechuyoko { xsd:boolean }?,
attribute TatechuyokoXOffset { xsd:double }?,
IDML File Format Specification
200 IDML File Reference: Stories
attribute TatechuyokoYOffset { xsd:double }?,
attribute KentenTint { xsd:double }?,
attribute KentenStrokeTint { xsd:double }?,
attribute KentenWeight { xsd:double }?,
attribute KentenOverprintFill { AdornmentOverprint_EnumValue }?,
attribute KentenOverprintStroke { AdornmentOverprint_EnumValue }?,
attribute KentenKind { KentenCharacter_EnumValue }?,
attribute KentenPlacement { xsd:double }?,
attribute KentenAlignment { KentenAlignment_EnumValue }?,
attribute KentenPosition { RubyKentenPosition_EnumValue }?,
attribute KentenFontSize { xsd:double }?,
attribute KentenXScale { xsd:double }?,
attribute KentenYScale { xsd:double }?,
attribute KentenCustomCharacter { xsd:string }?,
attribute KentenCharacterSet { KentenCharacterSet_EnumValue }?,
attribute RubyTint { xsd:double }?,
attribute RubyWeight { xsd:double }?,
attribute RubyOverprintFill { AdornmentOverprint_EnumValue }?,
attribute RubyOverprintStroke { AdornmentOverprint_EnumValue }?,
attribute RubyStrokeTint { xsd:double }?,
attribute RubyFontSize { xsd:double }?,
attribute RubyOpenTypePro { xsd:boolean }?,
attribute RubyXScale { xsd:double }?,
attribute RubyYScale { xsd:double }?,
attribute RubyType { RubyTypes_EnumValue }?,
attribute RubyAlignment { RubyAlignments_EnumValue }?,
attribute RubyPosition { RubyKentenPosition_EnumValue }?,
attribute RubyXOffset { xsd:double }?,
attribute RubyYOffset { xsd:double }?,
attribute RubyParentSpacing { RubyParentSpacing_EnumValue }?,
attribute RubyAutoAlign { xsd:boolean }?,
attribute RubyOverhang { xsd:boolean }?,
attribute RubyAutoScaling { xsd:boolean }?,
attribute RubyParentScalingPercent { xsd:double }?,
attribute RubyParentOverhangAmount { RubyOverhang_EnumValue }?,
attribute Warichu { xsd:boolean }?,
attribute WarichuSize { xsd:double }?,
attribute WarichuLines { xsd:short }?,
attribute WarichuLineSpacing { xsd:double }?,
attribute WarichuAlignment { WarichuAlignment_EnumValue }?,
attribute WarichuCharsAfterBreak { xsd:short }?,
attribute WarichuCharsBeforeBreak { xsd:short }?,
attribute OTFProportionalMetrics { xsd:boolean }?,
attribute OTFHVKana { xsd:boolean }?,
attribute OTFRomanItalics { xsd:boolean }?,
attribute ScaleAffectsLineHeight { xsd:boolean }?,
attribute CjkGridTracking { xsd:boolean }?,
attribute GlyphForm { AlternateGlyphForms_EnumValue }?,
attribute RubyFlag { xsd:int }?,
attribute RubyString { xsd:string }?,
attribute ParagraphGyoudori { xsd:boolean }?,
attribute RubyAutoTcyDigits { xsd:short }?,
attribute RubyAutoTcyIncludeRoman { xsd:boolean }?,
attribute RubyAutoTcyAutoScale { xsd:boolean }?,
IDML File Format Specification
201 IDML File Reference: Stories
attribute TreatIdeographicSpaceAsSpace { xsd:boolean }?,
attribute AllowArbitraryHyphenation { xsd:boolean }?,
attribute BulletsAndNumberingListType { ListType_EnumValue }?,
attribute NumberingExpression { xsd:string }?,
attribute BulletsTextAfter { xsd:string }?,
attribute NumberingLevel { xsd:int }?,
attribute NumberingContinue { xsd:boolean }?,
attribute NumberingStartAt { xsd:int }?,
attribute NumberingApplyRestartPolicy { xsd:boolean }?,
attribute BulletsAlignment { ListAlignment_EnumValue }?,
attribute NumberingAlignment { ListAlignment_EnumValue }?,
element Properties {
element AppliedFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element Leading {
(unit_type, xsd:double ) |
(enum_type, Leading_EnumValue )
}?&
element UnderlineColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element UnderlineGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element UnderlineType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element StrikeThroughColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element StrikeThroughGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element StrikeThroughType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element CustomGlyph {
(long_type, xsd:int ) |
(string_type, xsd:string )
}?&
element BalanceRaggedLines {
(bool_type, xsd:boolean ) |
(enum_type, BalanceLinesStyle_EnumValue )
}?&
element RuleAboveColor {
(object_type, xsd:string ) |
IDML File Format Specification
202 IDML File Reference: Stories
(string_type, xsd:string )
}?&
element RuleAboveGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleAboveType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleBelowColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleBelowGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleBelowType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element SpanSplitColumnCount {
(short_type, xsd:short {minInclusive="1" maxInclusive="40"} ) |
(enum_type, SpanColumnCountOptions_EnumValue )
}?&
element AllLineStyles { list_type, element ListItem {
record_type,
(
element AppliedCharacterStyle { object_type, xsd:string }&
element LineCount { long_type, xsd:int }&
element RepeatLast { long_type, xsd:int })
}*
}?&
element AllGREPStyles { list_type, element ListItem {
record_type,
(
element AppliedCharacterStyle { object_type, xsd:string }&
element GrepExpression { string_type, xsd:string })
}*
}?&
element AllNestedStyles { list_type, element ListItem {
record_type,
(
element AppliedCharacterStyle { object_type, xsd:string }&
element Delimiter {
(string_type, xsd:string ) |
(enum_type, NestedStyleDelimiters_EnumValue )
}&
element Repetition { long_type, xsd:int }&
element Inclusive { bool_type, xsd:boolean })
}*
}?&
element TabList { list_type, element ListItem {
IDML File Format Specification
203 IDML File Reference: Stories
record_type,
(
element Alignment { enum_type, TabStopAlignment_EnumValue }&
element AlignmentCharacter { string_type, xsd:string }&
element Leader { string_type, xsd:string }&
element Position { unit_type, xsd:double })
}*
}?&
element OpenTypeFeatures { list_type, element ListItem {
list_type,
element ListItem {
(string_type, xsd:string ) |
(long_type, xsd:int )
element ListItem {
(string_type, xsd:string ) |
(long_type, xsd:int )
},
}
}*
}?&
element KinsokuSet {
(object_type, xsd:string ) |
(enum_type, KinsokuSet_EnumValue ) |
(string_type, xsd:string )
}?&
element Mojikumi {
(object_type, xsd:string ) |
(string_type, xsd:string ) |
(enum_type, MojikumiTableDefaults_EnumValue )
}?&
element KentenFillColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element KentenStrokeColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element KentenFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element KentenFontStyle {
(string_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue )
}?&
element RubyFill {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RubyStroke {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
IDML File Format Specification
204 IDML File Reference: Stories
element RubyFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RubyFontStyle {
(string_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue )
}?&
element BulletChar {
attribute BulletCharacterType { BulletCharacterType_EnumValue },
attribute BulletCharacterValue { xsd:int }
}?&
element BulletsFont {
(object_type, xsd:string ) |
(string_type, xsd:string ) |
(enum_type, AutoEnum_EnumValue )
}?&
element BulletsFontStyle {
(string_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue ) |
(enum_type, AutoEnum_EnumValue )
}?&
element BulletsCharacterStyle {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element NumberingCharacterStyle {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element AppliedNumberingList {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element NumberingFormat {
(enum_type, NumberingStyle_EnumValue ) |
(string_type, xsd:string )
}?&
element NumberingRestartPolicies {
attribute RestartPolicy { RestartPolicy_EnumValue },
attribute LowerLevel { xsd:int },
attribute UpperLevel { xsd:int }
}?
(
}
?
,
Footnote_Object*&
GaijiOwnedItemObject_Object*&
Note_Object*&
Table_Object*&
TextVariableInstance_Object*&
HyperlinkTextDestination_Object*&
Change_Object*&
IDML File Format Specification
205 IDML File Reference: Stories
HiddenText_Object*&
XMLElement_Object*&
XMLComment_Object*&
XMLInstruction_Object*&
DTD_Object*&
Oval_Object*&
Rectangle_Object*&
GraphicLine_Object*&
Polygon_Object*&
Group_Object*&
TextFrame_Object*&
Button_Object*&
FormField_Object*&
MultiStateObject_Object*&
EPSText_Object*&
CharacterStyleRange_Object*&
HyperlinkTextSource_Object*&
PageReference_Object*&
ParagraphDestination_Object*&
CrossReferenceSource_Object*&
element Content {text}*&
element Br {empty}*
)
}
Paragraph Style Range Attributes
The properties of a <Paragraph Style Range> that are expressed as attributes can be found in the
listing of common text element attributes (see “Common Text Properties”).
Paragraph Style Range Elements
The properties of a <Paragraph Style Range> that are expressed as elements can be found in the
listing of common text elements (see “Common Text Properties”).
Character Style Range
Inside a <Paragraph Style Range> element, you’ll "nd one or more <Character Style Range>
elements. <Character Style Range> elements represent a continuous run of text formatting.
Schema Example 80. Character Style Range
CharacterStyleRange_Object = element CharacterStyleRange {
attribute KerningValue { xsd:double }?,
attribute FontStyle { xsd:string }?,
attribute PointSize { xsd:double }?,
attribute KerningMethod { xsd:string }?,
attribute Tracking { xsd:double }?,
attribute Capitalization { Capitalization_EnumValue }?,
attribute Position { Position_EnumValue }?,
attribute Underline { xsd:boolean }?,
attribute StrikeThru { xsd:boolean }?,
IDML File Format Specification
206 IDML File Reference: Stories
attribute Ligatures { xsd:boolean }?,
attribute NoBreak { xsd:boolean }?,
attribute HorizontalScale { xsd:double }?,
attribute VerticalScale { xsd:double }?,
attribute BaselineShift { xsd:double }?,
attribute Skew { xsd:double }?,
attribute FillTint { xsd:double }?,
attribute StrokeTint { xsd:double }?,
attribute StrokeWeight { xsd:double }?,
attribute OverprintStroke { xsd:boolean }?,
attribute OverprintFill { xsd:boolean }?,
attribute OTFFigureStyle { OTFFigureStyle_EnumValue }?,
attribute OTFOrdinal { xsd:boolean }?,
attribute OTFFraction { xsd:boolean }?,
attribute OTFDiscretionaryLigature { xsd:boolean }?,
attribute OTFTitling { xsd:boolean }?,
attribute OTFContextualAlternate { xsd:boolean }?,
attribute OTFSwash { xsd:boolean }?,
attribute UnderlineTint { xsd:double }?,
attribute UnderlineGapTint { xsd:double }?,
attribute UnderlineOverprint { xsd:boolean }?,
attribute UnderlineGapOverprint { xsd:boolean }?,
attribute UnderlineOffset { xsd:double }?,
attribute UnderlineWeight { xsd:double }?,
attribute StrikeThroughTint { xsd:double }?,
attribute StrikeThroughGapTint { xsd:double }?,
attribute StrikeThroughOverprint { xsd:boolean }?,
attribute StrikeThroughGapOverprint { xsd:boolean }?,
attribute StrikeThroughOffset { xsd:double }?,
attribute StrikeThroughWeight { xsd:double }?,
attribute FillColor { xsd:string }?,
attribute StrokeColor { xsd:string }?,
attribute AppliedLanguage { xsd:string }?,
attribute ParagraphKashidaWidth { xsd:double }?,
attribute FirstLineIndent { xsd:double }?,
attribute LeftIndent { xsd:double }?,
attribute RightIndent { xsd:double }?,
attribute SpaceBefore { xsd:double }?,
attribute SpaceAfter { xsd:double }?,
attribute Justification { Justification_EnumValue }?,
attribute SingleWordJustification { SingleWordJustification_EnumValue }?,
attribute AutoLeading { xsd:double }?,
attribute DropCapLines { xsd:short {minInclusive="0" maxInclusive="25"} }?,
attribute DropCapCharacters { xsd:short {minInclusive="0" maxInclusive="150"}
}?,
attribute KeepLinesTogether { xsd:boolean }?,
attribute KeepAllLinesTogether { xsd:boolean }?,
attribute KeepWithNext { xsd:short {minInclusive="0" maxInclusive="5"} }?,
attribute KeepFirstLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
attribute KeepLastLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
attribute StartParagraph { StartParagraph_EnumValue }?,
attribute Composer { xsd:string }?,
attribute MinimumWordSpacing { xsd:double }?,
attribute MaximumWordSpacing { xsd:double }?,
IDML File Format Specification
207 IDML File Reference: Stories
attribute DesiredWordSpacing { xsd:double }?,
attribute MinimumLetterSpacing { xsd:double }?,
attribute MaximumLetterSpacing { xsd:double }?,
attribute DesiredLetterSpacing { xsd:double }?,
attribute MinimumGlyphScaling { xsd:double }?,
attribute MaximumGlyphScaling { xsd:double }?,
attribute DesiredGlyphScaling { xsd:double }?,
attribute RuleAbove { xsd:boolean }?,
attribute RuleAboveOverprint { xsd:boolean }?,
attribute RuleAboveLineWeight { xsd:double }?,
attribute RuleAboveTint { xsd:double }?,
attribute RuleAboveOffset { xsd:double }?,
attribute RuleAboveLeftIndent { xsd:double }?,
attribute RuleAboveRightIndent { xsd:double }?,
attribute RuleAboveWidth { RuleWidth_EnumValue }?,
attribute RuleAboveGapTint { xsd:double }?,
attribute RuleAboveGapOverprint { xsd:boolean }?,
attribute RuleBelow { xsd:boolean }?,
attribute RuleBelowLineWeight { xsd:double }?,
attribute RuleBelowTint { xsd:double }?,
attribute RuleBelowOffset { xsd:double }?,
attribute RuleBelowLeftIndent { xsd:double }?,
attribute RuleBelowRightIndent { xsd:double }?,
attribute RuleBelowWidth { RuleWidth_EnumValue }?,
attribute RuleBelowGapTint { xsd:double }?,
attribute HyphenateCapitalizedWords { xsd:boolean }?,
attribute Hyphenation { xsd:boolean }?,
attribute HyphenateBeforeLast { xsd:short {minInclusive="1" maxInclusive="15"}
attribute HyphenateWordsLongerThan { xsd:short {minInclusive="3"
maxInclusive="25"} }?,
attribute HyphenateLadderLimit { xsd:short {minInclusive="0" maxInclusive="25"}
}?,
}?,
}?,
attribute HyphenateAfterFirst { xsd:short {minInclusive="1" maxInclusive="15"}
attribute HyphenationZone { xsd:double }?,
attribute HyphenWeight { xsd:short {minInclusive="0" maxInclusive="10"} }?,
attribute AppliedParagraphStyle { xsd:string }?,
attribute AppliedCharacterStyle { xsd:string }?,
attribute LastLineIndent { xsd:double }?,
attribute HyphenateLastWord { xsd:boolean }?,
attribute OTFSlashedZero { xsd:boolean }?,
attribute OTFHistorical { xsd:boolean }?,
attribute OTFStylisticSets { xsd:int }?,
attribute GradientFillLength { xsd:double }?,
attribute GradientFillAngle { xsd:double }?,
attribute GradientStrokeLength { xsd:double }?,
attribute GradientStrokeAngle { xsd:double }?,
attribute GradientFillStart { UnitPointType_TypeDef }?,
attribute GradientStrokeStart { UnitPointType_TypeDef }?,
attribute KeepWithPrevious { xsd:boolean }?,
attribute SpanColumnType { SpanColumnTypeOptions_EnumValue }?,
attribute SplitColumnInsideGutter { xsd:double }?,
attribute SplitColumnOutsideGutter { xsd:double }?,
IDML File Format Specification
208 IDML File Reference: Stories
attribute SpanColumnMinSpaceBefore { xsd:double }?,
attribute SpanColumnMinSpaceAfter { xsd:double }?,
attribute RuleBelowOverprint { xsd:boolean }?,
attribute RuleBelowGapOverprint { xsd:boolean }?,
attribute DropcapDetail { xsd:int }?,
attribute HyphenateAcrossColumns { xsd:boolean }?,
attribute KeepRuleAboveInFrame { xsd:boolean }?,
attribute IgnoreEdgeAlignment { xsd:boolean }?,
attribute OTFMark { xsd:boolean }?,
attribute OTFLocale { xsd:boolean }?,
attribute PositionalForm { PositionalForms_EnumValue }?,
attribute ParagraphDirection { ParagraphDirectionOptions_EnumValue }?,
attribute ParagraphJustification { ParagraphJustificationOptions_EnumValue }?,
attribute MiterLimit { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
attribute StrokeAlignment { TextStrokeAlign_EnumValue }?,
attribute EndJoin { OutlineJoin_EnumValue }?,
attribute OTFOverlapSwash { xsd:boolean }?,
attribute OTFStylisticAlternate { xsd:boolean }?,
attribute OTFJustificationAlternate { xsd:boolean }?,
attribute OTFStretchedAlternate { xsd:boolean }?,
attribute CharacterDirection { CharacterDirectionOptions_EnumValue }?,
attribute KeyboardDirection { CharacterDirectionOptions_EnumValue }?,
attribute DigitsType { DigitsTypeOptions_EnumValue }?,
attribute Kashidas { KashidasOptions_EnumValue }?,
attribute DiacriticPosition { DiacriticPositionOptions_EnumValue }?,
attribute XOffsetDiacritic { xsd:double }?,
attribute YOffsetDiacritic { xsd:double }?,
attribute ParagraphBreakType { ParagraphBreakTypes_EnumValue }?,
attribute PageNumberType { PageNumberTypes_EnumValue }?,
attribute AppliedConditions { list { xsd:string * } }?,
attribute GridAlignFirstLineOnly { xsd:boolean }?,
attribute GridAlignment { GridAlignment_EnumValue }?,
attribute GridGyoudori { xsd:short }?,
attribute AutoTcy { xsd:short }?,
attribute AutoTcyIncludeRoman { xsd:boolean }?,
attribute KinsokuType { KinsokuType_EnumValue }?,
attribute KinsokuHangType { KinsokuHangTypes_EnumValue }?,
attribute BunriKinshi { xsd:boolean }?,
attribute Rensuuji { xsd:boolean }?,
attribute RotateSingleByteCharacters { xsd:boolean }?,
attribute LeadingModel { LeadingModel_EnumValue }?,
attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
attribute Tsume { xsd:double }?,
attribute LeadingAki { xsd:double }?,
attribute TrailingAki { xsd:double }?,
attribute CharacterRotation { xsd:double }?,
attribute Jidori { xsd:short }?,
attribute ShataiMagnification { xsd:double }?,
attribute ShataiDegreeAngle { xsd:double }?,
attribute ShataiAdjustRotation { xsd:boolean }?,
attribute ShataiAdjustTsume { xsd:boolean }?,
attribute Tatechuyoko { xsd:boolean }?,
attribute TatechuyokoXOffset { xsd:double }?,
attribute TatechuyokoYOffset { xsd:double }?,
IDML File Format Specification
209 IDML File Reference: Stories
attribute KentenTint { xsd:double }?,
attribute KentenStrokeTint { xsd:double }?,
attribute KentenWeight { xsd:double }?,
attribute KentenOverprintFill { AdornmentOverprint_EnumValue }?,
attribute KentenOverprintStroke { AdornmentOverprint_EnumValue }?,
attribute KentenKind { KentenCharacter_EnumValue }?,
attribute KentenPlacement { xsd:double }?,
attribute KentenAlignment { KentenAlignment_EnumValue }?,
attribute KentenPosition { RubyKentenPosition_EnumValue }?,
attribute KentenFontSize { xsd:double }?,
attribute KentenXScale { xsd:double }?,
attribute KentenYScale { xsd:double }?,
attribute KentenCustomCharacter { xsd:string }?,
attribute KentenCharacterSet { KentenCharacterSet_EnumValue }?,
attribute RubyTint { xsd:double }?,
attribute RubyWeight { xsd:double }?,
attribute RubyOverprintFill { AdornmentOverprint_EnumValue }?,
attribute RubyOverprintStroke { AdornmentOverprint_EnumValue }?,
attribute RubyStrokeTint { xsd:double }?,
attribute RubyFontSize { xsd:double }?,
attribute RubyOpenTypePro { xsd:boolean }?,
attribute RubyXScale { xsd:double }?,
attribute RubyYScale { xsd:double }?,
attribute RubyType { RubyTypes_EnumValue }?,
attribute RubyAlignment { RubyAlignments_EnumValue }?,
attribute RubyPosition { RubyKentenPosition_EnumValue }?,
attribute RubyXOffset { xsd:double }?,
attribute RubyYOffset { xsd:double }?,
attribute RubyParentSpacing { RubyParentSpacing_EnumValue }?,
attribute RubyAutoAlign { xsd:boolean }?,
attribute RubyOverhang { xsd:boolean }?,
attribute RubyAutoScaling { xsd:boolean }?,
attribute RubyParentScalingPercent { xsd:double }?,
attribute RubyParentOverhangAmount { RubyOverhang_EnumValue }?,
attribute Warichu { xsd:boolean }?,
attribute WarichuSize { xsd:double }?,
attribute WarichuLines { xsd:short }?,
attribute WarichuLineSpacing { xsd:double }?,
attribute WarichuAlignment { WarichuAlignment_EnumValue }?,
attribute WarichuCharsAfterBreak { xsd:short }?,
attribute WarichuCharsBeforeBreak { xsd:short }?,
attribute OTFProportionalMetrics { xsd:boolean }?,
attribute OTFHVKana { xsd:boolean }?,
attribute OTFRomanItalics { xsd:boolean }?,
attribute ScaleAffectsLineHeight { xsd:boolean }?,
attribute CjkGridTracking { xsd:boolean }?,
attribute GlyphForm { AlternateGlyphForms_EnumValue }?,
attribute RubyFlag { xsd:int }?,
attribute RubyString { xsd:string }?,
attribute ParagraphGyoudori { xsd:boolean }?,
attribute RubyAutoTcyDigits { xsd:short }?,
attribute RubyAutoTcyIncludeRoman { xsd:boolean }?,
attribute RubyAutoTcyAutoScale { xsd:boolean }?,
attribute TreatIdeographicSpaceAsSpace { xsd:boolean }?,
IDML File Format Specification
210 IDML File Reference: Stories
attribute AllowArbitraryHyphenation { xsd:boolean }?,
attribute BulletsAndNumberingListType { ListType_EnumValue }?,
attribute NumberingExpression { xsd:string }?,
attribute BulletsTextAfter { xsd:string }?,
attribute NumberingLevel { xsd:int }?,
attribute NumberingContinue { xsd:boolean }?,
attribute NumberingStartAt { xsd:int }?,
attribute NumberingApplyRestartPolicy { xsd:boolean }?,
attribute BulletsAlignment { ListAlignment_EnumValue }?,
attribute NumberingAlignment { ListAlignment_EnumValue }?,
element Properties {
element AppliedFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element Leading {
(unit_type, xsd:double ) |
(enum_type, Leading_EnumValue )
}?&
element UnderlineColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element UnderlineGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element UnderlineType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element StrikeThroughColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element StrikeThroughGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element StrikeThroughType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element CustomGlyph {
(long_type, xsd:int ) |
(string_type, xsd:string )
}?&
element BalanceRaggedLines {
(bool_type, xsd:boolean ) |
(enum_type, BalanceLinesStyle_EnumValue )
}?&
element RuleAboveColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
IDML File Format Specification
211 IDML File Reference: Stories
}?&
element RuleAboveGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleAboveType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleBelowColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleBelowGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleBelowType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element SpanSplitColumnCount {
(short_type, xsd:short {minInclusive="1" maxInclusive="40"} ) |
(enum_type, SpanColumnCountOptions_EnumValue )
}?&
element AllLineStyles { list_type, element ListItem {
record_type,
(
element AppliedCharacterStyle { object_type, xsd:string }&
element LineCount { long_type, xsd:int }&
element RepeatLast { long_type, xsd:int })
}*
}?&
element AllGREPStyles { list_type, element ListItem {
record_type,
(
element AppliedCharacterStyle { object_type, xsd:string }&
element GrepExpression { string_type, xsd:string })
}*
}?&
element AllNestedStyles { list_type, element ListItem {
record_type,
(
element AppliedCharacterStyle { object_type, xsd:string }&
element Delimiter {
(string_type, xsd:string ) |
(enum_type, NestedStyleDelimiters_EnumValue )
}&
element Repetition { long_type, xsd:int }&
element Inclusive { bool_type, xsd:boolean })
}*
}?&
element TabList { list_type, element ListItem {
record_type,
IDML File Format Specification
212 IDML File Reference: Stories
(
element Alignment { enum_type, TabStopAlignment_EnumValue }&
element AlignmentCharacter { string_type, xsd:string }&
element Leader { string_type, xsd:string }&
element Position { unit_type, xsd:double })
}*
}?&
element OpenTypeFeatures { list_type, element ListItem {
list_type,
element ListItem {
(string_type, xsd:string ) |
(long_type, xsd:int )
element ListItem {
(string_type, xsd:string ) |
(long_type, xsd:int )
},
}
}*
}?&
element KinsokuSet {
(object_type, xsd:string ) |
(enum_type, KinsokuSet_EnumValue ) |
(string_type, xsd:string )
}?&
element Mojikumi {
(object_type, xsd:string ) |
(string_type, xsd:string ) |
(enum_type, MojikumiTableDefaults_EnumValue )
}?&
element KentenFillColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element KentenStrokeColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element KentenFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element KentenFontStyle {
(string_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue )
}?&
element RubyFill {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RubyStroke {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RubyFont {
IDML File Format Specification
213 IDML File Reference: Stories
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RubyFontStyle {
(string_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue )
}?&
element BulletChar {
attribute BulletCharacterType { BulletCharacterType_EnumValue },
attribute BulletCharacterValue { xsd:int }
}?&
element BulletsFont {
(object_type, xsd:string ) |
(string_type, xsd:string ) |
(enum_type, AutoEnum_EnumValue )
}?&
element BulletsFontStyle {
(string_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue ) |
(enum_type, AutoEnum_EnumValue )
}?&
element BulletsCharacterStyle {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element NumberingCharacterStyle {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element AppliedNumberingList {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element NumberingFormat {
(enum_type, NumberingStyle_EnumValue ) |
(string_type, xsd:string )
}?&
element NumberingRestartPolicies {
attribute RestartPolicy { RestartPolicy_EnumValue },
attribute LowerLevel { xsd:int },
attribute UpperLevel { xsd:int }
}?
(
}
?
,
Footnote_Object*&
GaijiOwnedItemObject_Object*&
Note_Object*&
Table_Object*&
TextVariableInstance_Object*&
HyperlinkTextDestination_Object*&
Change_Object*&
HiddenText_Object*&
IDML File Format Specification
214 IDML File Reference: Stories
XMLElement_Object*&
XMLComment_Object*&
XMLInstruction_Object*&
DTD_Object*&
Oval_Object*&
Rectangle_Object*&
GraphicLine_Object*&
Polygon_Object*&
Group_Object*&
TextFrame_Object*&
Button_Object*&
FormField_Object*&
MultiStateObject_Object*&
EPSText_Object*&
PageReference_Object*&
HyperlinkTextSource_Object*&
ParagraphDestination_Object*&
CrossReferenceSource_Object*&
element Content {text}*&
element Br {empty}*
)
}
Character Style Range Attributes
The properties of a <Character Style Range> that are expressed as attributes can be found in the
listing of common text element attributes (see “Common Text Properties”).
Character Style Range Elements
Most of the properties of a <Character Style Range> that are expressed as elements can be found
in the listing of common text elements (see “Common Text Properties”). A <Character Style-
Range> can also contain an element that is unique. This element is described in the following
table.
Table 108. Character Style Range Elements
Name Type Req Description
Content string yes The content of the <Character Style Range>.
Can be a string of text, or a reference to an inline
element.
In the following example, the story contains three characters, “A,” “B”, and “C.” The middle
character has slightly di&erent formatting than the surrounding characters (it’s been formatted
using the font style “Italic”), and so occupies a di&erent character style range. The story has only
one <Paragraph Style Range>, and three <Character Style Range> elements.
IDML Example 47. Paragraph Style Range and Character Style Range
<Story Self="ucb" Applied TOCStyle="n" Track Changes="false"
Story Title="$ID/" Applied Named Grid="n">
<Story Preference Self="ucb Story Preference1" Optical Margin Alignment="false"
IDML File Format Specification
215 IDML File Reference: Stories
Optical Margin Size="12" Frame Type="Text Frame Type" Story Orientation="Horizontal"
Story Direction="Left To Right Direction"/>
<Paragraph Style Range Applied Paragraph Style=
"Paragraph Style\k Normal Paragraph Style">
<Character Style Range Applied Character Style=
"Character Style\k[No character style]">
<Content>A</Content>
</Character Style Range>
<Character Style Range Applied Character Style=
"Character Style\k[No character style]" Font Style="Italic">
<Content>B</Content>
</Character Style Range>
<Character Style Range Applied Character Style=
"Character Style\k[No character style]">
<Content>C</Content>
</Character Style Range>
</Paragraph Style Range>
</Story>
Figure 31. Minimal Story with Multiple Character Formats
Multiple paragraphs can appear in a single <Paragraph Style Range>. The following example
shows how the text in the single <Character Style Range> in a <Paragraph Style Range> is broken
into separate <Content> elements using the <br/> element. An empty <br/> element represents a
return character; optional attributes attached to the element can specify other break characters.
We’ve omitted the minimal <Story> element in this example.
IDML Example 48. Paragraph Breaks in a Character Style Range
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\Normal Paragraph Style">
<Character Style Range Applied Character Style="Character Style\[No character style]">
<Content>ABC</Content>
<br/>
<Content>DEF</Content>
<br/>
<Content>GHI</Content>
</Character Style Range>
</Paragraph Style Range>
IDML File Format Specification
216 IDML File Reference: Stories
Figure 32. Breaking <Content> elements with <br/>
The following example demonstrates the use of special “break” characters in a <Character Range>
element. We’ve inserted a column break a%er the third example paragraph (“GHI”), which forces
the fourth paragraph (“JKL”) to the next column or text frame. The break character is applied as
an attribute of the <Character Style Range> element. The <Content> element of that <Character-
Style Range> element contains only a <br/> element.
The meaning of the <br/> element is de"ned by the Go To Next X attribute of the <Character Style-
Range> element. This attribute can be Anywhere (the default, which can be omitted), Next Column,
Next Frame, Next Page, Next Odd Page, or Next Even Page.
IDML Example 49. Paragraph Style Range Elements and Column Breaks
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\Normal Paragraph Style">
<Character Style Range Applied Character Style="Character Style\[No character style]">
<Content>ABC</Content>
<br/>
<Content>DEF</Content>
<br/>
<Content>GHI</Content>
</Character Style Range>
<Character Style Range Applied Character Style="Character Style\[No character style]"
Goto Next X="Next Column">
<br/>
</Character Style Range>
<Character Style Range Applied Character Style="Character Style\[No character style]">
<Content>JKL</Content>
</Character Style Range>
</Paragraph Style Range>
Figure 33. Column Break
IDML File Format Specification
217 IDML File Reference: Stories
Note: In general, it is better to use paragraph style properties (the Start Paragraph attribute of
the <Paragraph Style> element) to force paragraphs to new columns or pages instead of using
break characters.
The following example shows an example of multiple <Paragraph Style Range> elements. In this
example, the second paragraph (“DEF”) has di&erent formatting from the "rst (“ABC”) and third
(“GHI”) paragraphs—it has a paragraph style named “Heading” applied to it.
IDML Example 50. Multiple Paragraph Style Range Elements
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\Normal Paragraph Style">
<Character Style Range Applied Character Style=
"Character Style\[No character style]">
<Content>ABC</Content>
<br/>
</Character Style Range>
</Paragraph Style Range>
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\Heading">
<Character Style Range Applied Character Style="Character Style\[No character style]">
<Content>DEF</Content>
<br/>
</Character Style Range>
</Paragraph Style Range>
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\Normal Paragraph Style">
<Character Style Range Applied Character Style="Character Style\[No character style]">
<Content>GHI</Content>
</Character Style Range>
</Paragraph Style Range>
Figure 34. Minimal Story with Multiple <Paragraph Style Range> Elements
IDML Example 51. Multi-Column (“Straddle”) Paragraphs
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/$ID/
NormalParagraphStyle" SpaceAfter="12" SpanColumnType="SpanColumns">
<Properties>
<SpanSplitColumnCount type="short">2</SpanSplitColumnCount>
</Properties>
<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character
style]" FontStyle="Bold Condensed" PointSize="20">
<Properties>
<Leading type="unit">24</Leading>
IDML File Format Specification
218 IDML File Reference: Stories
<AppliedFont type="string">Myriad Pro</AppliedFont>
</Properties>
<Content>Multi-Column Headline</Content>
<Br/>
</CharacterStyleRange>
</ParagraphStyleRange>
<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/$ID/
NormalParagraphStyle">
<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character
style]">
<Properties>
<Leading type="unit">12</Leading>
</Properties>
<Content>Ris curenat, quament. Besuam inatus nimum imorterra tam inum sid
senimum med C. Scivis a re, noverraverce iae elinterei ca pre hil consupicae dica;
noc, seniamdit. As cres ac ta invo, Palis rei si propost quit publicauro visses
cur us, senaritimmor quam deesilis addum se nulem hiculi prae, caelicae ta, nos
consum nem auconvo, molis hos co poensuludem et di poeris satquam mo</Content>
</CharacterStyleRange>
</ParagraphStyleRange>
Figure 35. Multi-Column Paragraph
10.4.9 XML Elements in Text
All XML text elements that have been placed in an In Design layout appear as text ranges in the
<Story> element they are associated with. Only unplaced XML elements (i.e., XML elements that
have not been associated with a page item or story) appear in the Backing Story.xml "le in the
XML folder in the IDML package.
The text in <XMLElement> elements is contained by <Paragraph Style Range> elements and
<Character Style Range> elements inside the <XMLElement> elements. For more on the
<XMLElement> element, refer to the“XML.”
IDML Example 52. XML Element
<Story Self="ud8">
<XMLElement Self="di2i3" Markup Tag="XMLTag\c Story" XMLContent="ud8">
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\cheading 1">
IDML File Format Specification
219 IDML File Reference: Stories
<Character Style Range Applied Character Style=
"Character Style\k[No character style]"/>
</Paragraph Style Range>
<XMLElement Self="di2i3i6" Markup Tag="XMLTag\cheading_1">
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\cheading 1">
<Character Style Range Applied Character Style=
"Character Style\k[No character style]">
<Content>Heading 1</Content>
<br/>
</Character Style Range>
</Paragraph Style Range>
</XMLElement>
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\cpara 1">
<Character Style Range Applied Character Style=
"Character Style\k[No character style]"/>
</Paragraph Style Range>
<XMLElement Self="di2i3i5" Markup Tag="XMLTag\cpara_1">
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\cpara 1">
<Character Style Range Applied Character Style=
"Character Style\k[No character style]">
<Content>This is the first paragraph in the article.</Content>
<br/>
</Character Style Range>
</Paragraph Style Range>
</XMLElement>
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\cbody text">
<Character Style Range Applied Character Style=
"Character Style\k[No character style]"/>
</Paragraph Style Range>
<XMLElement Self="di2i3i4" Markup Tag="XMLTag\cbody_text">
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\cbody text">
<Character Style Range Applied Character Style=
"Character Style\k[No character style]">
<Content>This is the second paragraph in the article.</Content>
<br/>
</Character Style Range>
</Paragraph Style Range>
</XMLElement>
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\cheading 2">
<Character Style Range Applied Character Style=
"Character Style\k[No character style]"/>
</Paragraph Style Range>
<XMLElement Self="di2i3i3" Markup Tag="XMLTag\cheading_2">
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\cheading 2">
<Character Style Range Applied Character Style=
"Character Style\k[No character style]">
<Content>Heading 2</Content>
<br/>
</Character Style Range>
</Paragraph Style Range>
</XMLElement>
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\cpara 1">
<Character Style Range Applied Character Style=
"Character Style\k[No character style]"/>
IDML File Format Specification
220 IDML File Reference: Stories
</Paragraph Style Range>
<XMLElement Self="di2i3i2" Markup Tag="XMLTag\cpara_1">
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\cpara 1">
<Character Style Range Applied Character Style=
"Character Style\k[No character style]">
<Content>This is the first paragraph following the subhead.</Content>
<br/>
</Character Style Range>
</Paragraph Style Range>
</XMLElement>
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\cbody text">
<Character Style Range Applied Character Style=
"Character Style\k[No character style]">
<XMLElement Self="di2i3i1" Markup Tag="XMLTag\cbody_text">
<Content>This is the second paragraph following the subhead.</Content>
<br/>
</XMLElement>
</Character Style Range>
</Paragraph Style Range>
</XMLElement>
</Story
Figure 36. XML Elements in Text
10.4.10 Rules for Breaking Text Range Elements
In a complex In Design layout, situations can arise in which the logical boundaries for creating
text range elements overlap. What happens when an <XMLElement> element overlaps a
<Character Style Range> element? Or when a <Character Style Range> element apppears in the
middle of a <Hyperlink Text Source> element?
In Design relies on a hierarchy of rules for deciding where to break text style ranges as it exports
IDML. The following list shows the order in which In Design will break text style range elements,
from strongest (never break) to weakest.
1. <XML>
2. <Hyperlink>
3. <Changed Text>
IDML File Format Specification
221 IDML File Reference: Stories
4. <Paragraph Style Range>
5. <Character Style Range>
6. <Content>
6.4.1 Inline Elements
In Design stories can contain page items, such as rectangles containing imported graphics or text
frames containing text. Tables, footnotes and form "elds are other examples of inline objects.
These inline (or anchored) element are represented as text child elements of a <Character Style-
Range> element, and appear as siblings of the <Content> element. The following sections discuss
the di&erent types of inline elements that can appear as text child elements of a <Character-
Style Range> element.
Tables
In Design tables contain rows, columns, and cells, and each cell can contain text, imported
graphics, or another table. In IDML, the <Table> element contains <Row>, <Column>, and <Cell>
elements, which can, in turn, contain other elements. For more on In Design tables, refer to the
online help.
Schema Example 81. Table
Table_Object = element Table {
attribute Self { xsd:string },
attribute HeaderRowCount { xsd:int {minInclusive="0" maxInclusive="25"} }?,
attribute FooterRowCount { xsd:int {minInclusive="0" maxInclusive="25"} }?,
attribute TopBorderStrokeWeight { xsd:double }?,
attribute TopBorderStrokeType { xsd:string }?,
attribute TopBorderStrokeColor { xsd:string }?,
attribute TopBorderStrokeTint { xsd:double }?,
attribute TopBorderStrokeOverprint { xsd:boolean }?,
attribute TopBorderStrokeGapColor { xsd:string }?,
attribute TopBorderStrokeGapTint { xsd:double }?,
attribute TopBorderStrokeGapOverprint { xsd:boolean }?,
attribute LeftBorderStrokeWeight { xsd:double }?,
attribute LeftBorderStrokeType { xsd:string }?,
attribute LeftBorderStrokeColor { xsd:string }?,
attribute LeftBorderStrokeTint { xsd:double }?,
attribute LeftBorderStrokeOverprint { xsd:boolean }?,
attribute LeftBorderStrokeGapColor { xsd:string }?,
attribute LeftBorderStrokeGapTint { xsd:double }?,
attribute LeftBorderStrokeGapOverprint { xsd:boolean }?,
attribute BottomBorderStrokeWeight { xsd:double }?,
attribute BottomBorderStrokeType { xsd:string }?,
attribute BottomBorderStrokeColor { xsd:string }?,
attribute BottomBorderStrokeTint { xsd:double }?,
attribute BottomBorderStrokeOverprint { xsd:boolean }?,
attribute BottomBorderStrokeGapColor { xsd:string }?,
attribute BottomBorderStrokeGapTint { xsd:double }?,
attribute BottomBorderStrokeGapOverprint { xsd:boolean }?,
attribute RightBorderStrokeWeight { xsd:double }?,
attribute RightBorderStrokeType { xsd:string }?,
IDML File Format Specification
222 IDML File Reference: Stories
attribute RightBorderStrokeColor { xsd:string }?,
attribute RightBorderStrokeTint { xsd:double }?,
attribute RightBorderStrokeOverprint { xsd:boolean }?,
attribute RightBorderStrokeGapColor { xsd:string }?,
attribute RightBorderStrokeGapTint { xsd:double }?,
attribute RightBorderStrokeGapOverprint { xsd:boolean }?,
attribute SpaceBefore { xsd:double }?,
attribute SpaceAfter { xsd:double }?,
attribute SkipFirstAlternatingStrokeRows { xsd:int }?,
attribute SkipLastAlternatingStrokeRows { xsd:int }?,
attribute StartRowStrokeCount { xsd:int }?,
attribute StartRowStrokeColor { xsd:string }?,
attribute StartRowStrokeWeight { xsd:double }?,
attribute StartRowStrokeType { xsd:string }?,
attribute StartRowStrokeTint { xsd:double }?,
attribute StartRowStrokeGapOverprint { xsd:boolean }?,
attribute StartRowStrokeGapColor { xsd:string }?,
attribute StartRowStrokeGapTint { xsd:double }?,
attribute StartRowStrokeOverprint { xsd:boolean }?,
attribute EndRowStrokeCount { xsd:int }?,
attribute EndRowStrokeColor { xsd:string }?,
attribute EndRowStrokeWeight { xsd:double }?,
attribute EndRowStrokeType { xsd:string }?,
attribute EndRowStrokeTint { xsd:double }?,
attribute EndRowStrokeOverprint { xsd:boolean }?,
attribute EndRowStrokeGapColor { xsd:string }?,
attribute EndRowStrokeGapTint { xsd:double }?,
attribute EndRowStrokeGapOverprint { xsd:boolean }?,
attribute SkipFirstAlternatingStrokeColumns { xsd:int }?,
attribute SkipLastAlternatingStrokeColumns { xsd:int }?,
attribute StartColumnStrokeCount { xsd:int }?,
attribute StartColumnStrokeColor { xsd:string }?,
attribute StartColumnStrokeWeight { xsd:double }?,
attribute StartColumnStrokeType { xsd:string }?,
attribute StartColumnStrokeTint { xsd:double }?,
attribute StartColumnStrokeOverprint { xsd:boolean }?,
attribute StartColumnStrokeGapColor { xsd:string }?,
attribute StartColumnStrokeGapTint { xsd:double }?,
attribute StartColumnStrokeGapOverprint { xsd:boolean }?,
attribute EndColumnStrokeCount { xsd:int }?,
attribute EndColumnStrokeColor { xsd:string }?,
attribute EndColumnStrokeWeight { xsd:double }?,
attribute EndColumnLineStyle { xsd:string }?,
attribute EndColumnStrokeTint { xsd:double }?,
attribute EndColumnStrokeOverprint { xsd:boolean }?,
attribute EndColumnStrokeGapColor { xsd:string }?,
attribute EndColumnStrokeGapTint { xsd:double }?,
attribute EndColumnStrokeGapOverprint { xsd:boolean }?,
attribute ColumnFillsPriority { xsd:boolean }?,
attribute SkipFirstAlternatingFillRows { xsd:int }?,
attribute SkipLastAlternatingFillRows { xsd:int }?,
attribute StartRowFillColor { xsd:string }?,
attribute StartRowFillCount { xsd:int }?,
attribute StartRowFillTint { xsd:double }?,
IDML File Format Specification
223 IDML File Reference: Stories
attribute StartRowFillOverprint { xsd:boolean }?,
attribute EndRowFillCount { xsd:int }?,
attribute EndRowFillColor { xsd:string }?,
attribute EndRowFillTint { xsd:double }?,
attribute EndRowFillOverprint { xsd:boolean }?,
attribute SkipFirstAlternatingFillColumns { xsd:int }?,
attribute SkipLastAlternatingFillColumns { xsd:int }?,
attribute StartColumnFillCount { xsd:int }?,
attribute StartColumnFillColor { xsd:string }?,
attribute StartColumnFillTint { xsd:double }?,
attribute StartColumnFillOverprint { xsd:boolean }?,
attribute EndColumnFillCount { xsd:int }?,
attribute EndColumnFillColor { xsd:string }?,
attribute EndColumnFillTint { xsd:double }?,
attribute EndColumnFillOverprint { xsd:boolean }?,
attribute BreakHeaders { HeaderFooterBreakTypes_EnumValue }?,
attribute BreakFooters { HeaderFooterBreakTypes_EnumValue }?,
attribute SkipFirstHeader { xsd:boolean }?,
attribute SkipLastFooter { xsd:boolean }?,
attribute StrokeOrder { StrokeOrderTypes_EnumValue }?,
attribute TopInset { xsd:double }?,
attribute LeftInset { xsd:double }?,
attribute BottomInset { xsd:double }?,
attribute RightInset { xsd:double }?,
attribute FillColor { xsd:string }?,
attribute FillTint { xsd:double }?,
attribute OverprintFill { xsd:boolean }?,
attribute TopLeftDiagonalLine { xsd:boolean }?,
attribute TopRightDiagonalLine { xsd:boolean }?,
attribute DiagonalLineInFront { xsd:boolean }?,
attribute DiagonalLineStrokeWeight { xsd:double }?,
attribute DiagonalLineStrokeType { xsd:string }?,
attribute DiagonalLineStrokeColor { xsd:string }?,
attribute DiagonalLineStrokeTint { xsd:double }?,
attribute DiagonalLineStrokeOverprint { xsd:boolean }?,
attribute DiagonalLineStrokeGapColor { xsd:string }?,
attribute DiagonalLineStrokeGapTint { xsd:double }?,
attribute DiagonalLineStrokeGapOverprint { xsd:boolean }?,
attribute ClipContentToCell { xsd:boolean }?,
attribute FirstBaselineOffset { FirstBaseline_EnumValue }?,
attribute VerticalJustification { VerticalJustification_EnumValue }?,
attribute ParagraphSpacingLimit { xsd:double }?,
attribute MinimumFirstBaselineOffset { xsd:double {minInclusive="0"
maxInclusive="8640"} }?,
attribute RotationAngle { xsd:double }?,
attribute WritingDirection { xsd:boolean }?,
attribute MinimumHeight { xsd:double }?,
attribute MaximumHeight { xsd:double }?,
attribute KeepWithNextRow { xsd:boolean }?,
attribute StartRow { StartParagraph_EnumValue }?,
attribute AutoGrow { xsd:boolean }?,
attribute DefaultRowStrokeWeight { xsd:double }?,
attribute DefaultRowStrokeType { xsd:string }?,
attribute DefaultRowStrokeColor { xsd:string }?,
IDML File Format Specification
224 IDML File Reference: Stories
(
)
}
attribute DefaultRowStrokeTint { xsd:double }?,
attribute DefaultRowStrokeOverprint { xsd:boolean }?,
attribute DefaultRowStrokeGapColor { xsd:string }?,
attribute DefaultRowStrokeGapTint { xsd:double }?,
attribute DefaultRowStrokeGapOverprint { xsd:boolean }?,
attribute DefaultColumnStrokeWeight { xsd:double }?,
attribute DefaultColumnStrokeType { xsd:string }?,
attribute DefaultColumnStrokeColor { xsd:string }?,
attribute DefaultColumnStrokeTint { xsd:double }?,
attribute DefaultColumnStrokeOverprint { xsd:boolean }?,
attribute DefaultColumnStrokeGapColor { xsd:string }?,
attribute DefaultColumnStrokeGapTint { xsd:double }?,
attribute DefaultColumnStrokeGapOverprint { xsd:boolean }?,
attribute BodyRowCount { xsd:int {minInclusive="1" maxInclusive="10000"} }?,
attribute ColumnCount { xsd:int {minInclusive="1" maxInclusive="200"} }?,
attribute SingleRowHeight { xsd:double }?,
attribute SingleColumnWidth { xsd:double }?,
attribute AppliedTableStyle { xsd:string }?,
attribute TableDirection { TableDirectionOptions_EnumValue }?,
attribute DisplayCollapsed { xsd:boolean }?,
attribute DisplayOrder { DisplayOrderOptions_EnumValue }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
Cell_Object*&
Row_Object*&
Column_Object*
Table 109. Table Properties Represented as Attributes
Name Type Req Description
Applied Table Style string no The table style applied to the table.
Auto Grow boolean no If true, increase the height of a cell to "t the con-
tent of the cell.
Body Row Count int no The number of body rows.
Bottom Border-
Stroke Color
string no The color, speci"ed as a swatch (color, gradient,
tint, or mixed ink), of the bottom border stroke.
Bottom Border-
Stroke Gap Color
string no The gap color, speci"ed as a swatch (color, gradi-
ent, tint, or mixed ink), of the bottom border
stroke. Note: Valid only when bottom border
stroke type is not solid.
Bottom Border-
Stroke Gap-
Overprint
boolean no If true, the gap of the bottom border stroke will
overprint. Note: Valid only when bottom border
stroke type is not solid.
IDML File Format Specification
225 IDML File Reference: Stories
Name Bottom Border-
Stroke Gap Tint
Bottom Border-
Stroke Overprint
Bottom Border-
Stroke Tint
Bottom Border-
Stroke Type
Bottom Border-
Stroke Weight
Break Footers Break Headers Column Count Column Fills-
Priority
Default Column-
Stroke Color
Default Column-
Stroke Gap Color
Default Column-
Stroke Gap-
Overprint
Default Column-
Stroke Gap Tint
Default Column-
Stroke Overprint
Default Column-
Stroke Tint
Default Column-
Stroke Type
Default Column-
Stroke Weight
Default Row Stroke-
Color
Type Req Description
double no The tint (as a percentage) of the gap color of the
bottom border stroke. (Range: 0 to 100) Note:
Valid only when bottom border stroke type is
not solid.
boolean no If true, the bottom border stroke will overprint.
double no The tint (as a percentage) of the bottom border
stroke. (Range: 0 to 100)
string no The stroke type of the bottom border.
double no The stroke weight of the bottom border stroke.
Header Footer-
Break Types_Enum-
Value
no The footer placement. Can be In All Text-
Columns (Places headers or footers in each text
column), Once Per Text Frame (Repeats headers
or footers in each text frame), or Once Per Page
(Places one instance of headers or footers per
page).
Header Footer-
Break Types_Enum-
Value
no The header placement. Can be In All Text-
Columns (Places headers or footers in each text
column), Once Per Text Frame (Repeats headers
or footers in each text frame), or Once Per Page
(Places one instance of headers or footers per
page).
int no The number of columns.
boolean no If true, hides alternating row "lls. If false, hides
alternating column "lls.
string no The default stroke color for cells in new col-
umns.
string no The default stroke gap color for cells in new col-
umns.
boolean no The default stroke gap overprint setting for cells
in new columns.
double no The default stroke gap tint for cells in new col-
umns.
boolean no The default stroke overprint setting for cells in
new columns.
double no The default stroke tint for cells in new columns.
string no The default stroke type for cells in new columns.
double no The default stroke weight for cells in new col-
umns.
string no The default stroke color for cells in new rows.
IDML File Format Specification
226 IDML File Reference: Stories
Name Default Row Stroke-
Gap Color
Default Row Stroke-
Gap Overprint
Default Row Stroke-
Gap Tint
Default Row Stroke-
Overprint
Default Row Stroke-
Tint
Default Row Stroke-
Type
Default Row Stroke-
Weight
Display Collapsed Display Order End Column Fill-
Color
End Column Fill-
Count
End Column Fill-
Overprint
End Column Fill Tint End Column Line-
Style
End Column Stroke-
Color
End Column Stroke-
Count
End Column Stroke-
Gap Color
Type Req Description
string no The default stroke gap color for cells in new
rows.
boolean no The default stroke gap overprint setting for cells
in new rows.
double no The default stroke gap tint for cells in new rows.
boolean no The default stroke overprint setting for cells in
new rows.
double no The default stroke tint for cells in new rows.
string no The default stroke type for cells in new rows.
double no The default stroke weight for cells in new col-
umns.
boolean no If true, then the table will show collapsed in
story and galley views.
Display Order-
Options_Enum Value
no Speci"es the order the table cells will display in
when viewing in story and galley views. Can be
Order By Rows (Order by rows), or Order By-
Columns (Order by columns).
string no The "ll color, speci"ed as a swatch (color, gra-
dient, tint, or mixed ink), of columns in the
second alternating "ll group. Note: Valid when
alternating "lls are de"ned for table columns.
int no The number of columns in the second alternat-
ing "lls group. Note: Valid when alternating "lls
are de"ned for table columns.
boolean no If true, the columns in the second alternating
"lls group will overprint. Note: Valid when
alternating "lls are de"ned for table columns.
double no The tint (as a percentage) of the columns in the
second alternating "lls group. (Range: 0 to 100)
Note: Valid when alternating "lls are de"ned for
table columns.
string no The stroke type of columns in the second alter-
nating strokes group.
string no The stroke color, speci"ed as a swatch (color,
gradient, tint, or mixed ink), of column borders
in the second alternating column strokes group.
Note: Valid when end column stroke count is 1
or greater.
int no The number of columns in the second alternat-
ing column strokes group.
string no The stroke gap color, speci"ed as a swatch (color,
gradient, tint, or mixed ink), of column borders
in the second alternating column strokes group.
Note: Valid when end column stroke count is 1
or greater.
IDML File Format Specification
227 IDML File Reference: Stories
Name End Column Stroke-
Gap Overprint
End Column Stroke-
Gap Tint
End Column Stroke-
Overprint
End Column Stroke-
Tint
End Column Stroke-
Weight
End Row Fill Color End Row Fill Count End Row Fill-
Overprint
End Row Fill Tint End Row Stroke Color End Row Stroke Count End Row Stroke Gap-
Color
End Row Stroke Gap-
Overprint
Type Req Description
boolean no If true, the gap of the column border stroke in
the second alternating column strokes group
will overprint. Note: Valid when end column
stroke count is 1 or greater.
double no The tint (as a percentage) of the gap color of col-
umn borders in the second alternating column
strokes group. (Range: 0 to 100) Note: Valid
when end column stroke count is 1 or greater.
boolean no If true, the column borders in the second alter-
nating column strokes group will overprint.
Note: Valid when end column stroke count is 1
or greater.
double no The tint (as a percentage) of column borders in
the second alternating column strokes group.
(Range: 0 to 100) Note: Valid when end column
stroke count is 1 or greater.
double no The stroke weight of column borders in the
second alternating column strokes group. Note:
Valid when end column stroke count is 1 or
greater.
string no The "ll color, speci"ed as a swatch (color, gradi-
ent, tint, or mixed ink), of rows in the second
alternating "lls group. Note: Valid when alter-
nating "lls are de"ned for table rows.
int no The number of rows in the second alternating
"lls group. Note: Valid when alternating "lls are
de"ned for table rows.
boolean no If true, the rows in the second alternating "lls
group will overprint. Note: Valid when alternat-
ing "lls are de"ned for table rows.
double no The tint (as a percentage) of the rows in the
second alternating "lls group. (Range: 0 to 100)
Note: Valid when alternating "lls are de"ned for
table rows.
string no The stroke color, speci"ed as a swatch (color,
gradient, tint, or mixed ink), of row borders in
the second alternating row strokes group. Note:
Valid when end row stroke count is 1 or greater.
int no The number of rows in the second alternating
row strokes group.
string no The gap color, speci"ed as a swatch (color, gradi-
ent, tint, or mixed ink), of row borders in the
second alternating rows group. Note: Valid when
end row stroke count is 1 or greater.
boolean no If true, the gap of the row borders in the second
alternating rows group will overprint. Note:
Valid when end row stroke count is 1 or greater.
IDML File Format Specification
228 IDML File Reference: Stories
Name End Row Stroke Gap-
Tint
End Row Stroke-
Overprint
End Row Stroke Tint End Row Stroke Type End Row Stroke-
Weight
Footer Row Count Header Row Count Keep With Next Row Left Border Stroke-
Color
Left Border Stroke-
Gap Color
Left Border Stroke-
Gap Overprint
Left Border Stroke-
Gap Tint
Left Border Stroke-
Overprint
Left Border Stroke-
Tint
Left Border Stroke-
Type
Left Border Stroke-
Weight
Maximum Height Minimum Height Right Border-
Stroke Color
Type Req Description
double no The tint (as a percentage) of the gap color of rows
in the second alternating strokes group. (Range:
0 to 100) Note: Valid when end row stroke count
is 1 or greater and end row stroke type is not
solid.
boolean no If true, the rows in the second alternating rows
group will overprint. Note: Valid when end row
stroke count is 1 or greater.
double no The tint (as a percentage) of the row borders in
the second alternating strokes group. (Range: 0
to 100) Note: Valid when end row stroke count is
1 or greater.
string no The stroke type of rows in the second alternating
strokes group.
double no The stroke weight of row borders in the second
alternating row strokes group. Note: Valid when
end row stroke count is 1 or greater.
int no The number of footer rows.
int no The number of header rows.
boolean no If true, keep the row with the next row.
string no The color, speci"ed as a swatch (color, gradient,
tint, or mixed ink), of the le% border stroke.
string no The gap color, speci"ed as a swatch (color, gradi-
ent, tint, or mixed ink), of the le% border stroke.
Note: Valid only when le% border stroke type is
not solid.
boolean no If true, the gap of the le% border stroke will
overprint. Note: Valid only when le% border
stroke type is not solid.
double no The tint (as a percentage) of the gap color of the
le% border stroke. (Range: 0 to 100) Note: Valid
only when le% border stroke type is not solid.
boolean no If true, the le% border stroke will overprint.
double no The tint (as a percentage) of the le% border
stroke. (Range: 0 to 100)
string no The stroke type of the le% border.
double no The stroke weight of the le% border stroke.
double no The maximum height of the cell.
double no The minimum height of the cell.
string no The color, speci"ed as a swatch (color, gradient,
tint, or mixed ink), of the right border stroke.
IDML File Format Specification
229 IDML File Reference: Stories
Name Right Border-
Stroke Gap Color
Right Border-
Stroke Gap-
Overprint
Right Border-
Stroke Gap Tint
Right Border-
Stroke Overprint
Right Border-
Stroke Tint
Right Border-
Stroke Type
Right Border-
Stroke Weight
Single Column Width Single Row Height Skip First-
Alternating Fill-
Columns
Skip First-
Alternating Fill-
Rows
Skip First-
Alternating-
Stroke Columns
Skip First-
Alternating-
Stroke Rows
Skip First Header Skip Last-
Alternating Fill-
Columns
Skip Last-
Alternating Fill-
Rows
Type Req Description
string no The gap color, speci"ed as a swatch (color, gra-
dient, tint, or mixed ink), of the right border
stroke. Note: Valid only when right border
stroke type is not solid.
boolean no If true, the gap color of the right border stroke
will overprint. Note: Valid only when right bor-
der stroke type is not solid.
double no The tint (as a percentage) of the gap color of the
right border stroke. (Range: 0 to 100) Note: Valid
only when right border stroke type is not solid.
boolean no If true, the right border stroke will overprint.
double no The tint (as a percentage) of the right border
stroke. (Range: 0 to 100)
string no The stroke type of the right border.
double no The stroke weight of the right border stroke.
double no The width of a column.
double no The height of a row.
int no The number of columns on the le% side of the
table to skip before applying the column "ll col-
or. Note: Valid when alternating "lls are de"ned
for table columns.
int no The number of body rows at the beginning of the
table to skip before applying the row "ll color.
Note: Valid when alternating "lls are de"ned for
table rows.
int no The number of columns on the le% of the table
in which to skip border stroke formatting. Note:
Valid when start column stroke count is 1 or
greater and/or end column stroke count is 1 or
greater.
int no The number of body rows at the beginning of
the table in which to skip border stroke format-
ting. Note: Valid when start row stroke count is
1 or greater and/or end row stroke count is 1 or
greater.
boolean no If true, skips the "rst occurrence of header rows.
int no The number columns on the right side of the
table in which to not apply the column "ll color.
Note: Valid when alternating "lls are de"ned for
table columns.
int no The number of body rows at the end of the table
in which to not apply the row "ll color. Note:
Valid when alternating "lls are de"ned for table
rows.
IDML File Format Specification
230 IDML File Reference: Stories
Name Skip Last-
Alternating-
Stroke Columns
Skip Last-
Alternating-
Stroke Rows
Skip Last Footer Space After Space Before Start Column Fill-
Color
Start Column Fill-
Count
Start Column Fill-
Overprint
Start Column Fill-
Tint
Start Column-
Stroke Color
Start Column-
Stroke Count
Start Column-
Stroke Gap Color
Start Column-
Stroke Gap-
Overprint
Start Column-
Stroke Gap Tint
Start Column-
Stroke Overprint
Type Req Description
int no The number of columns on the right side of the
table in which to skip border stroke formatting.
Note: Valid when start column stroke count is 1
or greater and/or end column stroke count is 1
or greater.
int no The number of body rows at the end of the table
in which to skip border stroke formatting. Note:
Valid when start row stroke count is 1 or greater
and/or end row stroke count is 1 or greater.
boolean no If true, skips the last occurrence of footer rows.
double no The space below the table.
double no The space above the table.
string no The "ll color, speci"ed as a swatch (color, gradi-
ent, tint, or mixed ink), of columns in the "rst
alternating "lls group. Note: Valid when alter-
nating "lls are de"ned for table columns.
int no The number of columns in the "rst alternating
"lls group. Note: Valid when alternating "lls are
de"ned for table columns.
boolean no If true, the columns in the "rst alternating "lls
group will overprint. Note: Valid when alternat-
ing "lls are de"ned for table columns.
double no The tint (as a percentage) of the columns in the
"rst alternating "lls group. (Range: 0 to 100)
Note: Valid when alternating "lls are de"ned for
table columns.
string no The stroke color, speci"ed as a swatch (color,
gradient, tint, or mixed ink), of column borders
in the "rst alternating column strokes group.
int no The number of columns in the "rst alternating
column strokes group.
string no The stroke gap color, speci"ed as a swatch (color,
gradient, tint, or mixed ink), of column borders
in the "rst alternating column strokes group.
Note: Valid when start column stroke count is 1
or greater.
boolean no If true, the gap of the column borders in the "rst
alternating column strokes group will overprint.
Note: Valid when start column stroke count is 1
or greater.
double no The tint (as a percentage) of the gap color of
column borders in the "rst alternating column
strokes group. (Range: 0 to 100) Note: Valid
when start column stroke count is 1 or greater.
boolean no If true, the column borders in the "rst alternat-
ing column strokes group will overprint. Note:
Valid when start column stroke count is 1 or
greater.
IDML File Format Specification
231 IDML File Reference: Stories
Name Start Column-
Stroke Tint
Start Column-
Stroke Type
Start Column-
Stroke Weight
Start Row Start Row Fill Color Start Row Fill Count Start Row Fill-
Overprint
Start Row Fill Tint Start Row Stroke-
Color
Start Row Stroke-
Count
Start Row Stroke-
Gap Color
Start Row Stroke-
Gap Overprint
Start Row Stroke-
Gap Tint
Type Req Description
double no The tint (as a percentage) of column borders
in the "rst alternating column strokes group.
(Range: 0 to 100) Note: Valid when start column
stroke count is 1 or greater.
string no The stroke type of columns in the "rst alternat-
ing strokes group.
double no The stroke weight of column borders in the "rst
alternating column strokes group. Note: Valid
when start column stroke count is 1 or greater.
Start Paragraph_
Enum Value
no Can be Anywhere (Starts in the next available
space), Next Column (Starts at the top of the next
column), Next Frame (Starts at the top of the
next text frame in the thread), Next Page (Starts
at the top of the next page), Next Odd Page
(Starts at the top of the next odd-numbered
page), or Next Even Page (Starts at the top of the
next even-numbered page).
string no The "ll color, speci"ed as a swatch (color, gradi-
ent, tint, or mixed ink), of rows in the "rst alter-
nating "lls group. Note: Valid when alternating
"lls are de"ned for table rows.
int no The number of rows in the "rst alternating "lls
group. Note: Valid when alternating "lls are
de"ned for table rows.
boolean no If true, the rows in the "rst alternating "lls
group will overprint. Note: Valid when alternat-
ing "lls are de"ned for table rows.
double no The tint (as a percentage) of the rows in the "rst
alternating "lls group. (Range: 0 to 100) Note:
Valid when alternating "lls are de"ned for table
rows.
string no The color, speci"ed as a swatch (color, gradient,
tint, or mixed ink), of row borders in the "rst
alternating row strokes group. Note: Valid when
start row stroke count is 1 or greater.
int no The number of rows in the "rst alternating row
strokes group.
string no The stroke gap color of row borders in the "rst
alternating row strokes group, speci"ed as a
swatch (color, gradient, tint, or mixed ink). Note:
Valid when start row stroke count is 1 or greater.
boolean no If true, the gap color of the row border stroke in
the "rst alternating row strokes group will over-
print. Note: Valid when start row stroke count is
1 or greater.
double no The tint (as a percentage) of the gap color of
row borders in the "rst alternating rows group.
(Range: 0 to 100) Note: Valid when start row
stroke count is 1 or greater.
IDML File Format Specification
232 IDML File Reference: Stories
Name Start Row Stroke-
Overprint
Start Row Stroke-
Tint
Start Row Stroke-
Type
Start Row Stroke-
Weight
Stroke Order Table Direction Top Border Stroke-
Color
Top Border Stroke-
Gap Color
Top Border Stroke-
Gap Overprint
Top Border Stroke-
Gap Tint
Top Border Stroke-
Overprint
Top Border Stroke-
Tint
Top Border Stroke-
Type
Type Req Description
boolean no If true, the row borders in the "rst alternating
row strokes group will overprint. Note: Valid
when start row stroke count is 1 or greater.
double no The tint (as a percentage) of the borders in the
"rst alternating row strokes group. (Range: 0 to
100) Note: Valid when start row stroke count is
1 or greater.
string no The stroke type of rows in the "rst alternating
strokes group.
double no The stroke weight of row borders in the "rst
alternating row strokes group. Note: Valid when
start row stroke count is 1 or greater.
Stroke Order Types_
Enum Value
no The order in which to display row and column
strokes at corners. Can be Row On Top (Places row
strokes in front of column strokes), Column-
On Top (Places column strokes in front of row
strokes), Best Joins (Places row strokes in
front of column strokes when row and col-
umn strokes are di&erent colors; joins striped
strokes and connects crossing points), or
Indesign2Compatibility (Places row strokes
in front when row and column strokes are dif-
ferent colors; joins striped strokes only at points
where strokes cross in a T-shape).
Table Direction_
Enum Value
no The direction of the the table. Can be Left To-
Right Direction (Set le% to right table direc-
tion), or Right To Left Direction (Set right to
le% table direction).
string no The color, speci"ed as a swatch (color, gradi-
ent, tint, or mixed ink), of the table’s top border
stroke.
string no The gap color, speci"ed as a swatch (color, gradi-
ent, tint, or mixed ink), of the table’s top border
stroke. Note: Valid only when top border stroke
type is not solid.
boolean no If true, the gap of the top border stroke will
overprint. Note: Valid only when top border
stroke type is not solid.
double no The tint (as a percentage) of the gap color of the
table’s top border stroke. (Range: 0 to 100) Note:
Valid only when top border stroke type is not
solid.
boolean no If true, the top border strokes will overprint.
double no The tint (as a percentage) of the table’s top bor-
der stroke. (Range: 0 to 100)
string no The stroke type of the top border.
IDML File Format Specification
233 IDML File Reference: Stories
Name Type Req Description
Top Border Stroke-
Weight
double no The stroke weight of the table’s top border
stroke.
A simple table (one row, three columns) would appear as follows (again, we’ve omitted the details
of the <Story> element for clarity). Note that the <Cell> elements contain <Paragraph Style-
Range> and <Character Style Range> elements that follow the same pattern as they do in the body
of the <Story> element.
IDML Example 53. Table
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\Normal Paragraph Style">
<Character Style Range Applied Character Style=
"Character Style\[No character style]">
<Table Self="uddie2" Story Offset="ucb Insertion Point0" Header Row Count="0"
Footer Row Count="0" Body Row Count="1" Column Count="3"
Applied Table Style="Table Style\[Basic Table]"
Table Direction="Left To Right Direction">
<Row Self="uddie2Row0" Name="0" Single Row Height="16.3203125"/>
<Column Self="uddie2Column0" Name="0" Single Column Width="180"/>
<Column Self="uddie2Column1" Name="1" Single Column Width="180"/>
<Column Self="uddie2Column2" Name="2" Single Column Width="180"/>
<Cell Self="uddie2i0" Name="0:0" Row Span="1" Column Span="1"
Applied Cell Style="Cell Style\[None]" Applied Cell Style Priority="0">
<Paragraph Style Range Applied Paragraph Style=
"Paragraph Style\Normal Paragraph Style">
<Character Style Range Applied Character Style=
"Character Style\[No character style]">
<Content>ABC</Content>
</Character Style Range>
</Paragraph Style Range>
</Cell>
<Cell Self="uddie2i1" Name="1:0" Row Span="1" Column Span="1"
Applied Cell Style="Cell Style\[None]" Applied Cell Style Priority="0">
<Paragraph Style Range Applied Paragraph Style=
"Paragraph Style\Normal Paragraph Style">
<Character Style Range Applied Character Style=
"Character Style\[No character style]">
<Content>DEF</Content>
</Character Style Range>
</Paragraph Style Range>
</Cell>
<Cell Self="uddie2i2" Name="2:0" Row Span="1" Column Span="1"
Applied Cell Style="Cell Style\[None]" Applied Cell Style Priority="0">
<Paragraph Style Range Applied Paragraph Style=
"Paragraph Style\Normal Paragraph Style">
<Character Style Range Applied Character Style=
"Character Style\[No character style]">
<Content>GHI</Content>
</Character Style Range>
</Paragraph Style Range>
</Cell>
</Table>
</Character Style Range>
IDML File Format Specification
234 IDML File Reference: Stories
</Paragraph Style Range>
Figure 37. Simple Table
Cell
Schema Example 82. Cell
Cell_Object = element Cell {
attribute Self { xsd:string },
attribute Name { xsd:string },
attribute RowSpan { xsd:int }?,
attribute ColumnSpan { xsd:int }?,
attribute TopInset { xsd:double }?,
attribute LeftInset { xsd:double }?,
attribute BottomInset { xsd:double }?,
attribute RightInset { xsd:double }?,
attribute FillColor { xsd:string }?,
attribute FillTint { xsd:double }?,
attribute OverprintFill { xsd:boolean }?,
attribute TopLeftDiagonalLine { xsd:boolean }?,
attribute TopRightDiagonalLine { xsd:boolean }?,
attribute DiagonalLineInFront { xsd:boolean }?,
attribute DiagonalLineStrokeWeight { xsd:double }?,
attribute DiagonalLineStrokeType { xsd:string }?,
attribute DiagonalLineStrokeColor { xsd:string }?,
attribute DiagonalLineStrokeTint { xsd:double }?,
attribute DiagonalLineStrokeOverprint { xsd:boolean }?,
attribute DiagonalLineStrokeGapColor { xsd:string }?,
attribute DiagonalLineStrokeGapTint { xsd:double }?,
attribute DiagonalLineStrokeGapOverprint { xsd:boolean }?,
attribute ClipContentToCell { xsd:boolean }?,
attribute FirstBaselineOffset { FirstBaseline_EnumValue }?,
attribute VerticalJustification { VerticalJustification_EnumValue }?,
attribute ParagraphSpacingLimit { xsd:double }?,
attribute MinimumFirstBaselineOffset { xsd:double {minInclusive="0"
maxInclusive="8640"} }?,
attribute RotationAngle { xsd:double }?,
attribute LeftEdgeStrokeWeight { xsd:double }?,
attribute LeftEdgeStrokeType { xsd:string }?,
attribute LeftEdgeStrokeColor { xsd:string }?,
attribute LeftEdgeStrokeTint { xsd:double }?,
attribute LeftEdgeStrokeOverprint { xsd:boolean }?,
attribute LeftEdgeStrokeGapColor { xsd:string }?,
attribute LeftEdgeStrokeGapTint { xsd:double }?,
attribute LeftEdgeStrokeGapOverprint { xsd:boolean }?,
attribute TopEdgeStrokeWeight { xsd:double }?,
attribute TopEdgeStrokeType { xsd:string }?,
attribute TopEdgeStrokeColor { xsd:string }?,
IDML File Format Specification
235 IDML File Reference: Stories
attribute TopEdgeStrokeTint { xsd:double }?,
attribute TopEdgeStrokeOverprint { xsd:boolean }?,
attribute TopEdgeStrokeGapColor { xsd:string }?,
attribute TopEdgeStrokeGapTint { xsd:double }?,
attribute TopEdgeStrokeGapOverprint { xsd:boolean }?,
attribute RightEdgeStrokeWeight { xsd:double }?,
attribute RightEdgeStrokeType { xsd:string }?,
attribute RightEdgeStrokeColor { xsd:string }?,
attribute RightEdgeStrokeTint { xsd:double }?,
attribute RightEdgeStrokeOverprint { xsd:boolean }?,
attribute RightEdgeStrokeGapColor { xsd:string }?,
attribute RightEdgeStrokeGapTint { xsd:double }?,
attribute RightEdgeStrokeGapOverprint { xsd:boolean }?,
attribute BottomEdgeStrokeWeight { xsd:double }?,
attribute BottomEdgeStrokeType { xsd:string }?,
attribute BottomEdgeStrokeColor { xsd:string }?,
attribute BottomEdgeStrokeTint { xsd:double }?,
attribute BottomEdgeStrokeOverprint { xsd:boolean }?,
attribute BottomEdgeStrokeGapColor { xsd:string }?,
attribute BottomEdgeStrokeGapTint { xsd:double }?,
attribute BottomEdgeStrokeGapOverprint { xsd:boolean }?,
attribute InnerRowStrokeWeight { xsd:double }?,
attribute InnerRowStrokeType { xsd:string }?,
attribute InnerRowStrokeColor { xsd:string }?,
attribute InnerRowStrokeTint { xsd:double }?,
attribute InnerRowStrokeOverprint { xsd:boolean }?,
attribute InnerRowStrokeGapColor { xsd:string }?,
attribute InnerRowStrokeGapTint { xsd:double }?,
attribute InnerRowStrokeGapOverprint { xsd:boolean }?,
attribute InnerColumnStrokeWeight { xsd:double }?,
attribute InnerColumnStrokeType { xsd:string }?,
attribute InnerColumnStrokeColor { xsd:string }?,
attribute InnerColumnStrokeTint { xsd:double }?,
attribute InnerColumnStrokeOverprint { xsd:boolean }?,
attribute InnerColumnStrokeGapColor { xsd:string }?,
attribute InnerColumnStrokeGapTint { xsd:double }?,
attribute InnerColumnStrokeGapOverprint { xsd:boolean }?,
attribute TopEdgeStrokePriority { xsd:int }?,
attribute LeftEdgeStrokePriority { xsd:int }?,
attribute BottomEdgeStrokePriority { xsd:int }?,
attribute RightEdgeStrokePriority { xsd:int }?,
attribute AppliedCellStyle { xsd:string }?,
attribute WritingDirection { xsd:boolean }?,
attribute AppliedCellStylePriority { xsd:int }?,
element Properties {
element AllCellGradientAttrList { list_type, element ListItem {
(double_type, xsd:double ) |
(list_type,
element ListItem { unit_type, xsd:double },
element ListItem { unit_type, xsd:double })
}*
}?&
element Label { list_type, element ListItem {
list_type,
IDML File Format Specification
236 IDML File Reference: Stories
element ListItem { string_type, xsd:string },
element ListItem { string_type, xsd:string }
}*
}?
(
}
?
,
GaijiOwnedItemObject_Object*&
TextVariableInstance_Object*&
Table_Object*&
ParagraphStyleRange_Object*&
CharacterStyleRange_Object*&
Change_Object*&
Note_Object*&
Button_Object*&
HiddenText_Object*
)
}
Table 110. Cell Properties Represented as Attributes
Name Type Req Description
Applied Cell Style string no The cell style applied to the cell.
Applied Cell Style-
Priority
int no
Bottom Edge Stroke-
Color
string no The swatch (color, gradient, tint, or mixed ink)
applied to the bottom edge border stroke.
Bottom Edge Stroke-
Gap Color
string no The swatch (color, gradient, tint, or mixed ink)
applied to the gap of the bottom edge border
stroke. Note: Not valid when bottom edge stroke
type is solid.
Bottom Edge Stroke-
Gap Overprint
boolean no If true, the gap color of the bottom edge border
stroke will overprint. Note: Not valid when bot-
tom edge stroke type is solid.
Bottom Edge Stroke-
Gap Tint
double no The tint (as a percentage) of the bottom edge
border stroke gap color. (Range: 0 to 100) Note:
Not valid when bottom edge stroke type is solid.
Bottom Edge Stroke-
Overprint
boolean no If true, the bottom edge border stroke will over-
print.
Bottom Edge Stroke-
Priority
int no The priority of a stroke determines the order
in which it will be drawn, relative to the other
strokes on the cell. Higher values equal higher
priority.
Bottom Edge Stroke-
Tint
double no The tint (as a percentage) of the bottom edge
border stroke.
Bottom Edge Stroke-
Type
string no The stroke type of the bottom edge.
Bottom Edge Stroke-
Weight
double no The stroke weight of the bottom edge border
stroke.
IDML File Format Specification
237 IDML File Reference: Stories
Name Bottom Inset Clip Content To Cell Column Span Diagonal Line In-
Front
Diagonal Line-
Stroke Color
Diagonal Line-
Stroke Gap Color
Diagonal Line-
Stroke Gap-
Overprint
Diagonal Line-
Stroke Gap Tint
Diagonal Line-
Stroke Overprint
Diagonal Line-
Stroke Tint
Diagonal Line-
Stroke Type
Diagonal Line-
Stroke Weight
Fill Color Fill Tint First Baseline-
Offset
Inner Column-
Stroke Color
Type Req Description
double no The bottom inset of the cell.
boolean no If true, clips the cell’s content to width and
height of the cell.
int no The number of columns that the cell spans.
boolean no If true, draws the diagonal line in front of cell
contents.
string no The diagonal line color, speci"ed as a swatch.
string no The swatch (color, gradient, tint, or mixed ink)
applied to the gap of the diagonal line stroke.
Note: Not valid when diagonal line stroke type
is solid.
boolean no If true, the stroke gap of the diagonal line will
overprint. Note: Not valid when diagonal line
stroke type is solid.
double no The tint (as a percentage) of the diagonal line
stroke gap color. Note: Not valid when diagonal
line stroke type is solid.
boolean no If true, the diagonal line stroke will overprint.
double no The diagonal line tint (as a percentage). (Range:
0 to 100)
string no The stroke type of the diagonal line(s).
double no The diagonal line stroke weight.
string no The swatch (color, gradient, tint, or mixed ink)
applied to the "ll of the cell.
double no The tint (as a percentage) of the "ll of the cell.
First Baseline_
Enum Value
no The distance between the baseline of the text
and the top inset of the cell. Can be Ascent-
Offset (The tallest character in the font falls
below the top inset of the object), Cap Height
(The tops of upper case letters touch the top
inset of the object), Leading Offset (The text
leading value de"nes the distance between
the baseline of the text and the top inset of the
object), Embox Height (The text em box height
is the distance between the baseline of the text
and the top inset of the object), XHeight (The
tops of lower case letters touch the top inset of
the object), or Fixed Height (Uses the value
speci"ed for minimum "rst baseline o&set as the
distance between the baseline of the text and the
top inset of the object).
string no The color, speci"ed as a swatch, of the inner col-
umn border stroke.
IDML File Format Specification
238 IDML File Reference: Stories
Name Inner Column-
Stroke Gap Color
Inner Column-
Stroke Gap-
Overprint
Inner Column-
Stroke Gap Tint
Inner Column-
Stroke Overprint
Inner Column-
Stroke Tint
Inner Column-
Stroke Type
Inner Column-
Stroke Weight
Inner Row Stroke-
Color
Inner Row Stroke-
Gap Color
Inner Row Stroke-
Gap Overprint
Inner Row Stroke-
Gap Tint
Inner Row Stroke-
Overprint
Inner Row Stroke-
Tint
Inner Row Stroke-
Type
Inner Row Stroke-
Weight
Left Edge Stroke-
Color
Left Edge Stroke-
Gap Color
Type Req Description
string no The swatch (color, gradient, tint, or mixed ink)
applied to the gap of the inner column border
stroke. Note: Not valid when inner column
stroke type is solid.
boolean no If true, the gap color of the inner column bor-
der stroke will overprint. Note: Not valid when
inner column stroke type is solid.
double no The tint (as a percentage) of the inner column
border stroke gap color. (Range: 0 to 100) Note:
Not valid when inner column stroke type is
solid.
boolean no If true, the inner column border stroke will
overprint.
double no The tint (as a percentage) of the inner column
border stroke. (Range: 0 to 100)
string no The stroke type of the inner column.
double no The stroke weight of the inner column border
stroke.
string no The color, speci"ed as a swatch, of the inner row
border stroke.
string no The swatch (color, gradient, tint, or mixed
ink) applied to the gap of the inner row border
stroke. Note: Not valid when inner row stroke
type is solid.
boolean no If true, the gap color of the inner row border
stroke will overprint. Note: Not valid when
inner row stroke type is solid.
double no The tint (as a percentage) of the inner row border
stroke. (Range: 0 to 100) Note: Not valid when
inner row stroke type is solid.
boolean no If true, the inner row border stroke will over-
print.
double no The tint (as a percentage) of the inner row border
stroke. (Range: 0 to 100)
string no The stroke type of the inner row.
double no The stroke weight of the inner row border
strokes.
string no The swatch (color, gradient, tint, or mixed ink)
applied to the le% edge border stroke.
string no The swatch (color, gradient, tint, or mixed ink)
applied to the gap of the le% edge border stroke.
Note: Not valid when le% edge stroke type is
solid.
IDML File Format Specification
239 IDML File Reference: Stories
Name Left Edge Stroke-
Gap Overprint
Left Edge Stroke-
Gap Tint
Left Edge Stroke-
Overprint
Left Edge Stroke-
Priority
Left Edge Stroke-
Tint
Left Edge Stroke-
Type
Left Edge Stroke-
Weight
Left Inset Minimum First-
Baseline Offset
Overprint Fill Paragraph Spacing-
Limit
Right Edge Stroke-
Color
Right Edge Stroke-
Gap Color
Right Edge Stroke-
Gap Overprint
Right Edge Stroke-
Gap Tint
Right Edge Stroke-
Overprint
Right Edge Stroke-
Priority
Right Edge Stroke-
Tint
Right Edge Stroke-
Type
Type Req Description
boolean no If true, the gap color of the le% edge border
stroke will overprint. Note: Not valid when le%
edge stroke type is solid.
double no The tint (as a percentage) of the le% edge border
stroke gap color. (Range: 0 to 100) Note: Not
valid when le% edge stroke type is solid.
boolean no If true, the le% edge border stroke will overprint.
int no The priority of a stroke determines the order
in which it will be drawn, relative to the other
strokes on the cell. Higher values equal higher
priority.
double no The tint (as a percentage) of the le% edge border
stroke. (Range: 0 to 100)
string no The stroke type of the le% edge.
double no The stroke weight of the le% edge border stroke.
double no The le% inset of the cell.
double no The space between the baseline of the text and
the top inset of the frame or cell.
boolean no If true, the "ll of the cell will overprint.
double no The maximum space that can be added between
paragraphs in a cell. Note: Valid only when ver-
tical justi"cation is justi"ed.
string no The color, speci"ed as a swatch, of the right edge
border stroke.
string no The swatch (color, gradient, tint, or mixed ink)
applied to the gap of the right edge border
stroke. Note: Not valid when right edge stroke
type is solid.
boolean no If true, the gap color of the right edge border
stroke will overprint. Note: Not valid when right
edge stroke type is solid.
double no The tint (as a percentage) of the right edge bor-
der stroke gap color. (Range: 0 to 100) Note: Not
valid when right edge stroke type is solid.
boolean no If true, the right edge border stroke will over-
print.
int no The priority of a stroke determines the order
in which it will be drawn, relative to the other
strokes on the cell. Higher values equal higher
priority.
double no The tint (as a percentage) of the right edge bor-
der stroke. (Range: 0 to 100)
string no The stroke type of the right edge.
IDML File Format Specification
240 IDML File Reference: Stories
Name Right Edge Stroke-
Weight
Right Inset Rotation Angle Row Span Top Edge Stroke-
Color
Top Edge Stroke Gap-
Color
Top Edge Stroke Gap-
Overprint
Top Edge Stroke Gap-
Tint
Top Edge Stroke-
Overprint
Top Edge Stroke-
Priority
Top Edge Stroke Tint Top Edge Stroke Type Top Edge Stroke-
Weight
Top Inset Top Left Diagonal-
Line
Top Right Diagonal-
Line
Vertical-
Justification
Writing Direction Type Req Description
double no The stroke weight of the right edge border
stroke.
double no The right inset of the cell.
double no The rotation angle (in degrees) of the cell, speci-
"ed as one of the following values: 0, 90, 180, or
270.
int no The number of rows that the cell spans.
string no The swatch (color, gradient, tint, or mixed ink)
applied to the top edge border stroke.
string no The swatch (color, gradient, tint, or mixed ink)
applied to the gap of the top edge border stroke.
Note: Not valid when top edge stroke type is
solid.
boolean no If true, the gap color of the top edge border
stroke will overprint. Note: Not valid when top
edge stroke type is solid.
double no The tint (as a percentage) of the top edge border
stroke gap color. (Range: 0 to 100) Note: Not
valid when top edge stroke type is solid.
boolean no If true, the top edge border stroke will overprint.
int no The priority of a stroke determines the order
in which it will be drawn, relative to the other
strokes on the cell. Higher values equal higher
priority.
double no The tint (as a percentage) of the top edge border
stroke. (Range: 0 to 100)
string no The stroke type of the top edge.
double no The stroke weight of the top edge border stroke.
double no The top inset of the cell.
boolean no If true, draws a diagonal line starting from the
top le%.
boolean no If true, draws a diagonal line starting from the
top right.
Vertical-
Justification_
Enum Value
no The vertical alignment of cell. Can be Top-
Align (Text is aligned at the top of the object),
Center Align (Text is center aligned vertically
in the object), Bottom Align (Text is aligned
at the bottom of the object), or Justify Align
(Lines of text are evenly distributed vertically
between the top and bottom of the object).
boolean no The direction of the text in the cell.
IDML File Format Specification
241 IDML File Reference: Stories
Table 111. Cell Properties Represented as Elements
All Cell Gradient-
Attr List
List Item or
double
no
Column
Schema Example 83. Column
Column_Object = element Column {
attribute Self { xsd:string },
attribute Name { xsd:string },
attribute TopInset { xsd:double }?,
attribute LeftInset { xsd:double }?,
attribute BottomInset { xsd:double }?,
attribute RightInset { xsd:double }?,
attribute FillColor { xsd:string }?,
attribute FillTint { xsd:double }?,
attribute OverprintFill { xsd:boolean }?,
attribute TopLeftDiagonalLine { xsd:boolean }?,
attribute TopRightDiagonalLine { xsd:boolean }?,
attribute DiagonalLineInFront { xsd:boolean }?,
attribute DiagonalLineStrokeWeight { xsd:double }?,
attribute DiagonalLineStrokeType { xsd:string }?,
attribute DiagonalLineStrokeColor { xsd:string }?,
attribute DiagonalLineStrokeTint { xsd:double }?,
attribute DiagonalLineStrokeOverprint { xsd:boolean }?,
attribute DiagonalLineStrokeGapColor { xsd:string }?,
attribute DiagonalLineStrokeGapTint { xsd:double }?,
attribute DiagonalLineStrokeGapOverprint { xsd:boolean }?,
attribute ClipContentToCell { xsd:boolean }?,
attribute FirstBaselineOffset { FirstBaseline_EnumValue }?,
attribute VerticalJustification { VerticalJustification_EnumValue }?,
attribute ParagraphSpacingLimit { xsd:double }?,
attribute MinimumFirstBaselineOffset { xsd:double {minInclusive="0"
maxInclusive="8640"} }?,
attribute RotationAngle { xsd:double }?,
attribute WritingDirection { xsd:boolean }?,
attribute SingleColumnWidth { xsd:double }?
}
Table 112. Column Properties Represented as Attributes
Name Type Req Description
Bottom Inset double no The bottom inset of the cell.
Clip Content To Cell boolean no If true, clips the cell’s content to width and
height of the cell.
Diagonal Line In-
Front
boolean no If true, draws the diagonal line in front of cell
contents.
Diagonal Line-
Stroke Color
string no The diagonal line color, speci"ed as a swatch.
IDML File Format Specification
242 IDML File Reference: Stories
Name Diagonal Line-
Stroke Gap Color
Diagonal Line-
Stroke Gap-
Overprint
Diagonal Line-
Stroke Gap Tint
Diagonal Line-
Stroke Overprint
Diagonal Line-
Stroke Tint
Diagonal Line-
Stroke Type
Diagonal Line-
Stroke Weight
Fill Color Fill Tint First Baseline-
Offset
Left Inset Minimum First-
Baseline Offset
Name Overprint Fill Paragraph Spacing-
Limit
Right Inset Type Req Description
string no The swatch (color, gradient, tint, or mixed ink)
applied to the gap of the diagonal line stroke.
Note: Not valid when diagonal line stroke type
is solid.
boolean no If true, the stroke gap of the diagonal line will
overprint. Note: Not valid when diagonal line
stroke type is solid.
double no The tint (as a percentage) of the diagonal line
stroke gap color. Note: Not valid when diagonal
line stroke type is solid.
boolean no If true, the diagonal line stroke will overprint.
double no The diagonal line tint (as a percentage). (Range:
0 to 100)
string no The stroke type of the diagonal line(s).
double no The diagonal line stroke weight.
string no The swatch (color, gradient, tint, or mixed ink)
applied to the "ll of the Column.
double no The tint (as a percentage) of the "ll of the Col-
umn.
First Baseline_
Enum Value
no The distance between the baseline of the text
and the top inset of the cell. Can be Ascent-
Offset (The tallest character in the font falls
below the top inset of the object), Cap Height
(The tops of upper case letters touch the top
inset of the object), Leading Offset (The text
leading value de"nes the distance between
the baseline of the text and the top inset of the
object), Embox Height (The text em box height
is the distance between the baseline of the text
and the top inset of the object), XHeight (The
tops of lower case letters touch the top inset of
the object), or Fixed Height (Uses the value
speci"ed for minimum "rst baseline o&set as the
distance between the baseline of the text and the
top inset of the object).
double no The le% inset of the cell.
double no The space between the baseline of the text and
the top inset of the frame or cell.
string yes The name of the column.
boolean no If true, the "ll of the Column will overprint.
double no The maximum space that can be added between
paragraphs in a cell. Note: Valid only when ver-
tical justi"cation is justi"ed.
double no The right inset of the cell.
IDML File Format Specification
243 IDML File Reference: Stories
Name Type Req Description
Rotation Angle double no The rotation angle (in degrees) of the cell, speci-
"ed as one of the following values: 0, 90, 180, or
270.
Single Column Width double no The width of a single column.
Top Inset double no The top inset of the cell.
Top Left Diagonal-
Line
boolean no If true, draws a diagonal line starting from the
top le%.
Top Right Diagonal-
Line
boolean no If true, draws a diagonal line starting from the
top right.
Vertical-
Justification
Vertical-
Justification_
Enum Value
no The vertical alignment of cell. Can be Top-
Align (Text is aligned at the top of the object),
Center Align (Text is center aligned vertically
in the object), Bottom Align (Text is aligned
at the bottom of the object), or Justify Align
(Lines of text are evenly distributed vertically
between the top and bottom of the object).
Writing Direction boolean no The direction of the text in the cell.
Row
Schema Example 84. Row
Row_Object = element Row {
attribute Self { xsd:string },
attribute Name { xsd:string },
attribute TopInset { xsd:double }?,
attribute LeftInset { xsd:double }?,
attribute BottomInset { xsd:double }?,
attribute RightInset { xsd:double }?,
attribute FillColor { xsd:string }?,
attribute FillTint { xsd:double }?,
attribute OverprintFill { xsd:boolean }?,
attribute TopLeftDiagonalLine { xsd:boolean }?,
attribute TopRightDiagonalLine { xsd:boolean }?,
attribute DiagonalLineInFront { xsd:boolean }?,
attribute DiagonalLineStrokeWeight { xsd:double }?,
attribute DiagonalLineStrokeType { xsd:string }?,
attribute DiagonalLineStrokeColor { xsd:string }?,
attribute DiagonalLineStrokeTint { xsd:double }?,
attribute DiagonalLineStrokeOverprint { xsd:boolean }?,
attribute DiagonalLineStrokeGapColor { xsd:string }?,
attribute DiagonalLineStrokeGapTint { xsd:double }?,
attribute DiagonalLineStrokeGapOverprint { xsd:boolean }?,
attribute ClipContentToCell { xsd:boolean }?,
attribute FirstBaselineOffset { FirstBaseline_EnumValue }?,
attribute VerticalJustification { VerticalJustification_EnumValue }?,
attribute ParagraphSpacingLimit { xsd:double }?,
attribute MinimumFirstBaselineOffset { xsd:double {minInclusive="0"
maxInclusive="8640"} }?,
attribute RotationAngle { xsd:double }?,
attribute MinimumHeight { xsd:double }?,
IDML File Format Specification
244 IDML File Reference: Stories
attribute MaximumHeight { xsd:double }?,
attribute KeepWithNextRow { xsd:boolean }?,
attribute StartRow { StartParagraph_EnumValue }?,
attribute AutoGrow { xsd:boolean }?,
attribute WritingDirection { xsd:boolean }?,
attribute SingleRowHeight { xsd:double }?
}
Table 113. Row Properties Represented as Attributes
Name Type Req Description
Auto Grow boolean no If true, the height of the cell or the cells in the
Row can increase or decrease automatically to
"t cell content. Note: Allows cells to grow or
shrink to the maximum or minimum height, if
speci"ed.
Bottom Inset double no The bottom inset of the cell.
Clip Content To Cell boolean no If true, clips the cell’s content to width and
height of the cell.
Diagonal Line In-
Front
boolean no If true, draws the diagonal line in front of cell
contents.
Diagonal Line-
Stroke Color
string no The diagonal line color, speci"ed as a swatch.
Diagonal Line-
Stroke Gap Color
string no The swatch (color, gradient, tint, or mixed ink)
applied to the gap of the diagonal line stroke.
Note: Not valid when diagonal line stroke type
is solid.
Diagonal Line-
Stroke Gap-
Overprint
boolean no If true, the stroke gap of the diagonal line will
overprint. Note: Not valid when diagonal line
stroke type is solid.
Diagonal Line-
Stroke Gap Tint
double no The tint (as a percentage) of the diagonal line
stroke gap color. Note: Not valid when diagonal
line stroke type is solid.
Diagonal Line-
Stroke Overprint
boolean no If true, the diagonal line stroke will overprint.
Diagonal Line-
Stroke Tint
double no The diagonal line tint (as a percentage). (Range:
0 to 100)
Diagonal Line-
Stroke Type
string no The stroke type of the diagonal line(s).
Diagonal Line-
Stroke Weight
double no The diagonal line stroke weight.
Fill Color string no The swatch (color, gradient, tint, or mixed ink)
applied to the "ll of the Row.
Fill Tint double no The tint (as a percentage) of the "ll of the Row.
IDML File Format Specification
245 IDML File Reference: Stories
Name First Baseline-
Offset
Keep With Next Row Left Inset Maximum Height Minimum First-
Baseline Offset
Minimum Height Name Overprint Fill Paragraph Spacing-
Limit
Right Inset Rotation Angle Single Row Height Type Req Description
First Baseline_
Enum Value
no The distance between the baseline of the text
and the top inset of the cell. Can be Ascent-
Offset (The tallest character in the font falls
below the top inset of the object), Cap Height
(The tops of upper case letters touch the top
inset of the object), Leading Offset (The text
leading value de"nes the distance between
the baseline of the text and the top inset of the
object), Embox Height (The text em box height
is the distance between the baseline of the text
and the top inset of the object), XHeight (The
tops of lower case letters touch the top inset of
the object), or Fixed Height (Uses the value
speci"ed for minimum "rst baseline o&set as the
distance between the baseline of the text and the
top inset of the object).
boolean no If true, keeps the row with the next row when
the table is split across text frames or pages.
double no The le% inset of the cell.
double no The maximum height to which the row or the
column’s rows may grow. Note: The maximum
height cannot be exceeded even when auto grow
is set to true. Also, the maximum height can
a&ect redistribution. For information, see redis-
tribute.
double no The space between the baseline of the text and
the top inset of the frame or cell.
double no The minimum height that the cell or the Row’s
cells are allowed to be. Note: When auto grow
is true, cells can automatically grow larger than
this amount when content is added. Also, the
minimum height can a&ect redistribution. For
information, see redistribute.
string yes The name of the row.
boolean no If true, the "ll of the Row will overprint.
double no The maximum space that can be added between
paragraphs in a cell. Note: Valid only when ver-
tical justi"cation is justi"ed.
double no The right inset of the cell.
double no The rotation angle (in degrees) of the cell, speci-
"ed as one of the following values: 0, 90, 180, or
270.
double no The maximum height of a single row.
IDML File Format Specification
246 IDML File Reference: Stories
Name Type Req Description
Start Row Start Paragraph_
Enum Value
no Indicates where to start the row. Can be
Anywhere (Starts in the next available space),
Next Column (Starts at the top of the next col-
umn), Next Frame (Starts at the top of the next
text frame in the thread), Next Page (Starts at
the top of the next page), Next Odd Page (Starts
at the top of the next odd-numbered page), or
Next Even Page (Starts at the top of the next
even-numbered page).
Top Inset double no The top inset of the cell.
Top Left Diagonal-
Line
boolean no If true, draws a diagonal line starting from the
top le%.
Top Right Diagonal-
Line
boolean no If true, draws a diagonal line starting from the
top right.
Vertical-
Justification
Vertical-
Justification_
Enum Value
no The vertical alignment of cell. Can be Top-
Align (Text is aligned at the top of the object),
Center Align (Text is center aligned vertically
in the object), Bottom Align (Text is aligned
at the bottom of the object), or Justify Align
(Lines of text are evenly distributed vertically
between the top and bottom of the object).
Writing Direction boolean no The direction of the text in the cell.
Footnotes
Footnotes are another example of an element that can appear in a <Character Style Range>
element.
Schema Example 85. Footnote
Footnote_Object = element Footnote {
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
Table_Object*&
GaijiOwnedItemObject_Object*&
TextVariableInstance_Object*&
ParagraphStyleRange_Object*&
CharacterStyleRange_Object*&
HiddenText_Object*
)
}
The following example shows a very simple example footnote (again, we’ve omitted the <Story>
element for clarity):
IDML Example 54. Footnote
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\k Normal Paragraph Style">
IDML File Format Specification
247 IDML File Reference: Stories
<Character Style Range Applied Character Style=
"Character Style\k[No character style]">
<Content>This is body text.</Content>
</Character Style Range>
<Character Style Range Applied Character Style=
"Character Style\k[No character style]" Position="Superscript">
<Footnote>
<Paragraph Style Range Applied Paragraph Style=
"Paragraph Style\k Normal Paragraph Style">
<Character Style Range Applied Character Style=
"Character Style\k[No character style]">
<Content><?ACE 4?> This is footnote text.</Content>
</Character Style Range>
</Paragraph Style Range>
</Footnote>
</Character Style Range>
</Paragraph Style Range>
Figure 38. Footnote
Notes
In Design stories can contain non-printing notes. Notes in IDML are supported just like the other
inline objects—they appear as child elements of a <Character Style Range> object:
Schema Example 86.
Note_Object = element Note {
attribute Collapsed { xsd:boolean }?,
attribute CreationDate { xsd:dateTime }?,
attribute ModificationDate { xsd:dateTime }?,
attribute UserName { xsd:string }?,
attribute AppliedDocumentUser { xsd:string }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
Footnote_Object*&
GaijiOwnedItemObject_Object*&
TextVariableInstance_Object*&
Table_Object*&
IDML File Format Specification
248 IDML File Reference: Stories
ParagraphStyleRange_Object*&
CharacterStyleRange_Object*&
HiddenText_Object*
)
}
IDML Example 55. Note
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\k Normal Paragraph Style">
<Character Style Range Applied Character Style=
"Character Style\k[No character style]">
<Content>This is an example paragraph. At the end of the second sentence,we’ve
inserted a note.</Content>
<Note Collapsed="false" Creation Date="2008-02-24T23:12:55"
Modification Date="2008-02-24T23:16:44" User Name="Unknown User Name"
Applied Document User="d Document User1">
<Paragraph Style Range Applied Paragraph Style=
"Paragraph Style\k[No paragraph style]">
<Character Style Range Applied Character Style=
"Character Style\k[No character style]">
<Content>This is a note.</Content>
</Character Style Range>
</Paragraph Style Range>
</Note>
<br/>
<Content>This is a paragraph following the note.</Content>
</Character Style Range>
</Paragraph Style Range>
Figure 39. Note
Anchored Frames
In Design documents o%en feature page items that have been embedded in text. These frames
move with the text as the composition and layout of the text changes. These embedded frames
are referred to as anchored frames. Anchored frames are also sometimes called inline frames—in
IDML, an inline frame is a special case of an anchored frame.
IDML File Format Specification
249 IDML File Reference: Stories
The content of the inline text frame itself does not appear in the <Story> containing the frame, as
shown in the following example. Instead, the Parent Story attribute inside the anchored <Text-
Frame> element includes a reference to another <Story> element in the same IDML package (in
this example inside the, Story_u109.xml "le). The <Story> element in that "le contains the text
elements that appear in the inline text frame.
The position of the anchored frame on the page is determined by the composition of the text
surrounding the frame and preceding it in its parent <Story> element, and by the contents
of the <Anchored Object Setting> element associated with the inline frame. The frame may
“$oat” on the page, or may be positioned at points on the page determined by the contents of its
<Anchored Object Setting>. You can change the shape and size of an anchored frame (in its inner
coordinates) using its <Path Geometry> element, but you cannot transform the frame to a speci"c
location in spread coordinates using the ItemTransform attribute of the frame (as you can when
the frame is an independent page item).
For more on positioning anchored objects in text, refer to the In Design online help.
Schema Example 87. Anchored Object Settings
AnchoredObjectSetting_Object = element AnchoredObjectSetting {
attribute AnchoredPosition { AnchorPosition_EnumValue }?,
attribute SpineRelative { xsd:boolean }?,
attribute LockPosition { xsd:boolean }?,
attribute PinPosition { xsd:boolean }?,
attribute AnchorPoint { AnchorPoint_EnumValue }?,
attribute HorizontalAlignment { HorizontalAlignment_EnumValue }?,
attribute HorizontalReferencePoint { AnchoredRelativeTo_EnumValue }?,
attribute VerticalAlignment { VerticalAlignment_EnumValue }?,
attribute VerticalReferencePoint { VerticallyRelativeTo_EnumValue }?,
attribute AnchorXoffset { xsd:double }?,
attribute AnchorYoffset { xsd:double }?,
attribute AnchorSpaceAbove { xsd:double }?
}
Table 114. Anchored Object Setting Properties Represented as Attributes
Name Type Req Description
Anchor Point Anchor Point_Enum-
Value
no The point in the anchored object to posi-
tion. Can be Top Left Anchor, Top Center-
Anchor, Top Right Anchor, Left Center-
Anchor, Center Anchor, Right Center Anchor,
Bottom Left Anchor, Bottom Center Anchor,
or Bottom Right Anchor.
Anchor Space Above double no The space above an anchored object. Valid only
when Anchored Position is Above Line.
Anchor Xoffset double no The horizontal (x) o&set of the anchored object.
Anchor Yoffset double no The vertical (y) o&set of the anchored object.
Anchored Position Anchor Position_
Enum Value
no The position of the anchored object relative to
the anchor. Can be Inline Position, Above-
Line, or Anchored.
IDML File Format Specification
250 IDML File Reference: Stories
Name Type Req Description
Horizontal-
Alignment
Horizontal-
Alignment_Enum-
Value
no When Anchored Position is Above Line,
the position of the anchored object
is relative to the text area. Can be
Right Align, Left Align, Center Align,
or Text Align. Not valid when anchored
position is Inline Position. Can be
Horizontal-
Reference Point
Anchored Relative-
To_Enum Value
no The horizontal reference point on the page. Valid
only when Anchored Position is Anchored-
Position.
Lock Position boolean no If true, prevents manual positioning of the
anchored object.
Pin Position boolean no If true, pins the position of the anchored object
within the text frame top and bottom.
Spine Relative boolean no If true, the position of the anchored object is rel-
ative to the binding spine of the page or spread.
Vertical Alignment Vertical-
Alignment_Enum-
Value
no The vertical alignment of the anchored object
reference point with the vertical reference point
on the page. Can be Top Align, Bottom Align,
or Center Align. Valid only when Anchored-
Position is Anchored Position.
Vertical-
Reference Point
Vertically-
Relative To_Enum-
Value
no The vertical reference point on the page. Valid
only when Anchored Position is Anchored-
Position.
IDML Example 56. Anchored Text Frame
<Paragraph Style Range Space After="12">
<Character Style Range>
<Content>This is an example paragraph. We’ve inserted an inline text frame in
the second paragraph.</Content>
<br/>
</Character Style Range>
</Paragraph Style Range>
<Paragraph Style Range Space After="12" Justification="Center Align">
<Character Style Range Applied Character Style=
"Character Style\k[No character style]">
<Text Frame Self="u106" Parent Story="u109" Item Transform= "1 0 0 1 0 0">
<Properties>
<Path Geometry>
<GeometryPathType Path Open="false">
<Path Point Array>
<Path Point Type Anchor="97.2685546875 -225.5"
Left Direction="97.2685546875 -225.5"
Right Direction="97.2685546875 -225.5"/>
<Path Point Type Anchor="97.2685546875 -202"
Left Direction="97.2685546875 -202"
Right Direction="97.2685546875 -202"/>
<Path Point Type Anchor="183.5 -202" Left Direction="183.5 -202"
Right Direction="183.5 -202"/>
<Path Point Type Anchor="183.5 -225.5" Left Direction="183.5 -225.5"
Right Direction="183.5 -225.5"/>
</Path Point Array>
IDML File Format Specification
251 IDML File Reference: Stories
</GeometryPathType>
</Path Geometry>
</Properties>
<Anchored Object Setting Self="u106Anchored Object Setting1"
Anchored Position="Inline Position" Spine Relative="false"
Lock Position="false" Pin Position="true" Anchor Point="Bottom Right Anchor"
Horizontal Alignment="Left Align" Horizontal Reference Point=
"Text Frame" Vertical Alignment="Top Align"
Vertical Reference Point="Line Baseline" Anchor Xoffset="0"
Anchor Yoffset="0" Anchor Space Above="0"/>
</Text Frame>
<br/>
</Character Style Range>
</Paragraph Style Range>
<Paragraph Style Rangr Space After="12">
<Character Style Range Applied Character Style=
"Character Style\k[No character style]">
<Content>This is a paragraph following the inline text frame.</Content>
</Character Style Range>
</Paragraph Style Range>
Figure 40. Anchored Text Frame
Anchored Graphics
Another type of anchored frame is a frame containing a graphic. These frames follow the same
rules as anchored text frames, as discussed in the previous section.
IDML Example 57. Anchored Graphic
<Story Self="uce">
<Paragraph Style Range Space After="12">
<Character Style Range>
<Content>This is an example paragraph. We've ve inserted an anchored frame
containing a graphic in the second paragraph.</Content>
<Br/>
</Character Style Range>
</Paragraph Style Range>
<Paragraph Style Range Justification="Center Align">
<Character Style Range>
<Rectangle Self="uec" Item Transform="1 0 0 1 0 0">
IDML File Format Specification
252 IDML File Reference: Stories
<Properties>
<Path Geometry>
<GeometryPathType Path Open="false">
<Path Point Array>
<Path Point Type Anchor="-72 -78.72" Left Direction="-72 -78.72"
Right Direction="-72 -78.72"/>
<Path Point Type Anchor="-72 78.72" Left Direction="-72 78.72"
Right Direction="-72 78.72"/>
<Path Point Type Anchor="72 78.72" Left Direction="72 78.72"
Right Direction="72 78.72"/>
<Path Point Type Anchor="72 -78.72" Left Direction="72 -78.72"
Right Direction="72 -78.72"/>
</Path Point Array>
</GeometryPathType>
</Path Geometry>
</Properties>
<Image Self="ue6" Space="$ID/#Links_RGB" Actual Ppi="300 300"
Effective Ppi="300 300" Image Rendering Intent="Use Color Settings"
Local Display Setting="Default" Image Type Name="$ID/JPEG"
Item Transform="1 0 0 1 0 0">
<Properties>
<Profile type="string">$ID/Embedded</Profile>
<Graphic Bounds Left="0" Top="0" Right="144" Bottom="157.44"/>
</Properties>
<Link Self="ueb" Asset URL="$ID/" Asset ID="$ID/"
Link Resource URI="file://ruri/documents/IDML/assets/pumpkin.jpg"
Link Resource Format="$ID/JPEG" Stored State="Normal" Link Class ID="35906"
Link Client ID="257" Link Resource Modified="false"
Link Object Modified="false" Show In UI="true" Can Embed="true"
Can Unembed="true" Can Package="true" Import Policy="No Auto Import"
Export Policy="No Auto Export"
Link Import Stamp="file 128385019586602016 396019"
Link Import Modification Time="2007-11-02T11:32:38"
Link Import Time="2008-06-14T15:12:33"/>
</Image>
</Rectangle>
<Br/>
</Character Style Range>
</Paragraph Style Range>
<Paragraph Style Range>
<Character Style Range>
<Content>This is a paragraph following the anchored frame.</Content>
</Character Style Range>
</Paragraph Style Range>
</Story>
The graphic iteself is not embedded in the <Story> element. Instead, the <Link> element stored in
the <Image> element refers to a graphic "le on disk.
IDML File Format Specification
253 IDML File Reference: Stories
Figure 41. Inline Graphic
Hyperlink Text Sources
Hyperlink text sources di&er from other inline elements as they appear as child elements of a
<Character Style Range>, and contain a <Content> element. Other inline elements appear as
siblings of the <Content> element of the <Character Style Range>.
Schema Example 88. Hyperlink Text Source
HyperlinkTextSource_Object = element HyperlinkTextSource {
attribute Self { xsd:string },
attribute Name { xsd:string }?,
attribute Hidden { xsd:boolean }?,
attribute AppliedCharacterStyle { xsd:string }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
GaijiOwnedItemObject_Object*&
Note_Object*&
Table_Object*&
TextVariableInstance_Object*&
Footnote_Object*&
HyperlinkTextDestination_Object*&
Change_Object*&
HiddenText_Object*&
XMLElement_Object*&
XMLInstruction_Object*&
XMLComment_Object*&
ParagraphStyleRange_Object*&
CharacterStyleRange_Object*&
element Content {text}*&
IDML File Format Specification
254 IDML File Reference: Stories
element Br {empty}*
)
}
Table 115. Hyperlink Text Source Properties Represented as Attributes
Name Type Req Description
Applied Character-
Style
string no Character style of the hyperlink text source.
Hidden boolean no If true, the Hyperlink Text Source is hidden.
Name string no The name of the Hyperlink Text Source.
IDML Example 58. Hyperlink Text Source
<Paragraph Style Range Applied Paragraph Style="Paragraph Style\k Normal Paragraph Style"
Space After="12">
<Character Style Range>
<Content>This is an example paragraph. We’ve inserted a URL hyperlink in the
second paragraph.</Content>
<br/>
</Character Style Range>
<Character Style Range>
<Hyperlink Text Source Self="u12b" Name="Hyperlink_1" Hidden="false">
<Content>http://www.adobe.com</Content>
</Hyperlink Text Source>
</Character Style Range>
</Paragraph Style Range>
Figure 42. Hyperlink
HyperlinkTextDestination
A hyperlink text destinations is one of the possible “targets” of a hyperlink.
Schema Example 89. HyperlinkTextDestination
HyperlinkTextDestination_Object = element HyperlinkTextDestination {
attribute Self { xsd:string },
IDML File Format Specification
255 IDML File Reference: Stories
attribute Name { xsd:string },
attribute Hidden { xsd:boolean }?,
attribute DestinationUniqueKey { xsd:int }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Table 116. Hyperlink Text Destination Properties Represented as Attributes
Name Type Req Description
Destination-
Unique Key
int no A unique identi"er for the hyperlink text
destination.
Hidden boolean no If true, the hyperlink text destination is hidden.
Name string yes The name of the hyperlink text destination.
The name must be unique within the IDML
document.
IDML Example 59. HyperlinkTextDestination
<Story Self="uc8">
<ParagraphStyleRange AppliedParagraphStyle=
"ParagraphStyle/$ID/NormalParagraphStyle">
<CharacterStyleRange AppliedCharacterStyle=
"CharacterStyle/$ID/[No character style]">
<Content>This is a </Content>
<HyperlinkTextDestination Self="ue5"
Name="hyperlink text destination" Hidden="false" DestinationUniqueKey="1"/>
<HyperlinkTextSource Self="u104" Name="Hyperlink 1"
Hidden="false" AppliedCharacterStyle="n">
<Content>hyperlink text destination</Content>
</HyperlinkTextSource>
<Content>.</Content>
<Br/>
</CharacterStyleRange>
</ParagraphStyleRange>
</Story>
Figure 43. HyperlinkTextDestination
IDML File Format Specification
256 IDML File Reference: Stories
Cross Reference Sources
A <CrossReferenceSource> is the source for a cross reference hyperlink.
Schema Example 90. CrossReferenceSource
CrossReferenceSource_Object = element CrossReferenceSource {
attribute Self { xsd:string },
attribute AppliedFormat { xsd:string },
attribute Name { xsd:string }?,
attribute Hidden { xsd:boolean }?,
attribute AppliedCharacterStyle { xsd:string }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
(
}
?
,
GaijiOwnedItemObject_Object*&
TextVariableInstance_Object*&
HyperlinkTextDestination_Object*&
Change_Object*&
HiddenText_Object*&
XMLElement_Object*&
XMLInstruction_Object1*&
XMLComment_Object*&
ParagraphStyleRange_Object*&
CharacterStyleRange_Object*
)
}
Table 117. CrossReferenceSource Properties Represented as Attributes
Name Type Req Description
Applied Character-
Style
string no Character style of the cross reference source.
Applied Format string yes String specifying the format for the cross refer-
ence. This attribute corresponds to the de"ni-
tions found in the Cross Reference Formats
dialog box in InDesign. You can enter any text,
use built-in format tags, use InDesign metacha-
racters, or freely mix the three. The built-in
format tags are shown in the following table.
The metacharacters are shown in the second
table below. For more on using applied formats
in cross references, refer to the InDesign docu-
mentation.
Hidden boolean no If true, the cross reference source is hidden.
Name string no The name of the cross reference source.
IDML File Format Specification
257 IDML File Reference: Stories
Table 118. AppliedFormat Tags
Tag Description
<pageNum/> The number of the page containing the cross reference source.
<paraNum/> The number of the paragraph containing the cross reference source (if the para-
graph is a numbered paragraph).
<paraText/> The text of the paragraph, excluding the return character.
<fullPara/> The text of the paragraph, including the return character.
<full Para
delim="" include-
Delim="false"/>
The text from the beginning of the paragraph to the speci"ed delimiter. If you do
not enter a delimiter character and change the Delim value to true, this tag will
include the full text of the paragraph, including the return character.
<txtAnchrName/> The name of the text anchor.
<chapNum/> The number of the chapter.
<fileName/> The name of the "le.
<cs name=""></cs> The name of the character style applied to the cross reference source.
Table 119. Metacharacters
Tag Description Tag Description
^_ Em dash ^s Fixed width non-breaking space
^
- En dash ^~ Non-breaking hypehn
^m Em space ^{ Double le% quotation mark
^n En space ^} Double right quotation mark
^| Hair space ^[ Single le% quotation mark
^% Sixth space ^] Single right quotation mark
^&lt; Thin space (^<) ^8 Bullet character
^4 Quarter space ^7 Paragraph symbol
^3 Third space ^6 Section symbol
^. Punctucation space ^t Tab character
^/ Figure space ^n Forced line break character
^f Flush space ^h End nested style character
^S Non-breaking space ^j Non-joiner character
IDML Example 60. CrossReferenceSource
<CrossReferenceSource Self="u464" AppliedFormat="ud8" Name="Hyperlink 1"
Hidden="false" AppliedCharacterStyle="n">
<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Hyperlink">
<Content>See “Text Variable” on page </Content>
</CharacterStyleRange>
<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Hyperlink"
PageNumberType="TextVariable">
<TextVariableInstance Self="u482" Name="&lt;?AID 001b?&gt;TV XRefPageNumber"
ResultText="1" AssociatedTextVariable="dTextVariablen&lt;?AID 001b?&gt;TV
XRefPageNumber"/>
</CharacterStyleRange>
IDML File Format Specification
258 IDML File Reference: Stories
<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/Hyperlink">
<Content> for an example.</Content>
</CharacterStyleRange>
</CrossReferenceSource>
IDML File Format Specification
259 IDML File Reference: Fonts
6.1 Fonts
The fonts and composite fonts used in a document are de"ned in the Fonts.xml "le inside the
Resources folder in an IDML package. Even an empty In Design document contains references to
default fonts and composite fonts.
Note: In Design documents do not support font embedding, and fonts are not embedded in
IDML. A font used within a document is represented by a simple reference to one of the fonts
de"ned in the <Fonts> element. If fonts referred to in the IDML package are not installed on the
system when you try to import an IDML package in In Design, missing font warnings will appear.
There are two main elements stored in Fonts.xml: <Font Family> and <Composite Font>.
6.1.1 Font and Font Family
A font family is a group of similar fonts. For example, the fonts “Arial Regular”, “Arial Bold”, and
“Arial Italic” all belong to the same font family. A <Font Family> element groups together <Font>
elements, and each <Font> element de"nes a speci"c font.
<Font Family> and <Font> elements both contain an ID attribute. This attribute can be used as a
reference throughout the IDML package.
Schema Example 91. Font Family
FontFamily_Object = element FontFamily {
attribute Self { xsd:string },
attribute Name { xsd:string }?,
(
Font_Object*
)
}
Schema Example 92. Font
Font_Object = element Font {
attribute Self { xsd:string },
attribute FontFamily { xsd:string }?,
attribute Name { xsd:string }?,
attribute PostScriptName { xsd:string }?,
attribute Status { FontStatus_EnumValue }?,
attribute FontStyleName { xsd:string }?,
attribute FontType { FontTypes_EnumValue }?,
attribute WritingScript { xsd:int }?,
attribute FullName { xsd:string }?,
attribute FullNameNative { xsd:string }?,
attribute FontStyleNameNative { xsd:string }?,
attribute PlatformName { xsd:string }?,
attribute Version { xsd:string }?
}
The following example shows a <Font> de"nition for the “Myriad Pro Bold” font. Note: other
fonts belonging to the “Myriad Pro” font family have been omitted from this example.
IDML File Format Specification
260 IDML File Reference: Fonts
IDML Example 61. Font
<Font Family Self="di77" Name="Myriad Pro">
<Font Self="di77Fontn Myriad Pro Bold" Font Family="Myriad Pro"
Name="Myriad Pro Bold" Post Script Name="$ID/Myriad Pro-Bold" Status="Installed"
Font Style Name="Bold" Font Type="Open Type CFF" Writing Script="0"
Full Name="Myriad Pro Bold" Full Name Native="Myriad Pro Bold"
Font Style Name Native="Bold" Platform Name="$ID/"
Version="Version 2.007;PS 002.000;Core 1.0.38;makeotf.lib1.7.9032"/>
</Font Family>
Table 120. Font Properties Represented as Attributes
Name Type Req Description
Font Family string yes A reference to the font family that contains this
font, using the unique I D (Self attribute) of the
<Font Family> element.
Font Style Name string yes The name of the font style.
Font Style Name-
Native
string yes The native name of the font style.
Font Type Font Types_Enum-
Value
yes The type of font. Can be Type1, True Type,
CID, ATC, Bitmap, OCF, Open Type CFF,
Open Type CID, Open Type TT, or Unknown.
Full Name string yes The full font name.
Full Name Native string yes The full native name of the font.
Name string yes The name of the Font.
Platform Name string yes The platform font name.
Post Script Name string yes The Post Script name of the font.
Status Font Status_Enum-
Value
yes The status of the font. Can be Installed,
Not Available, Fauxed, Substituted, or
Unknown.
Version string yes The font version.
Writing Script int yes The writing script: “0” for Roman, “1” for Japa-
nese, “2” for Traditional Chinese.
Referring to a Font
Elements in an IDML package can refer to fonts using either the Self attribute or Name attribute
of the <Font> element. There are many elements in the package that refer to fonts, including:
<Character Style>, <Character Style Range>, <Paragraph Style>, and <Paragraph Style Range>.
Many elements use a combination of an <Applied Font> property to specify the font family, and a
<Font Style> attribute to specify the font style.
The example below shows a <Character Style Range> with a reference to the font “Arial Italic”.
The references here are by name:
IDML Example 62. Referring to a Font
<Character Style Range Applied Character Style="Character Style\k[No character style]"
IDML File Format Specification
261 IDML File Reference: Fonts
Font Style="Italic">
<Properties>
<Applied Font type="string">Arial</Applied Font>
</Properties>
<Content>This is some text formatted using Arial Italic.</Content>
</Character Style Range>
6.1.2 Composite Font
Composite fonts are part of the feature set of the Japanese version of In Design, but can exist in
any In Design document. Even if you are not using composite fonts, you still need to be aware of
them, and you should expect to encounter them in IDML documents.
A composite font is made up of multiple, separate fonts. For example, the default composite font,
“[No composite font]”, consists of the following <Composite Font Entry> elements: Kanji, Kana,
Punctuation, Symbols, Alphabetic, and Numbers. Each of the <Composite Font Entry> elements
contains an <Applied Font> property that de"nes the font it uses.
Schemas for <Composite Font> and <Composite Font Entry> are shown below. Note that in
addition to Name and Self attributes, a <Composite Font> contains multiple <Composite Font-
Entry> elements, and each <Composite Font Entry> refers to a <Font> in its Applied Font property.
Note: Composite fonts in In Design and IDML are not the same thing as composite fonts in PDF
and Post Script. Composite fonts in PDF and Post Script are embedded font objects that are made
up of glyphs from more than one font. In Design’s composite fonts are based on Japanese fonts, are
not embedded, and are made up of glyphs from multiple fonts. In Design composite fonts are not
"les on disk or stored within the document; they’re temporary sets of characters created in the In-
Design user interface.
Schema Example 93. Composite Font
CompositeFont_Object = element CompositeFont {
attribute Self { xsd:string },
attribute Name { xsd:string },
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
CompositeFontEntry_Object*
)
}
Schema Example 94. Composite Font Entry
CompositeFontEntry_Object = element CompositeFontEntry {
attribute Self { xsd:string },
attribute Name { xsd:string }?,
attribute FontStyle { xsd:string }?,
attribute RelativeSize { xsd:double }?,
attribute HorizontalScale { xsd:double }?,
attribute VerticalScale { xsd:double }?,
attribute CustomCharacters { xsd:string }?,
attribute Locked { xsd:boolean }?,
IDML File Format Specification
262 IDML File Reference: Fonts
attribute ScaleOption { xsd:boolean }?,
attribute BaselineShift { xsd:double }?,
element Properties {
element AppliedFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?&
}?
}
?
}
IDML File Format Specification
263 IDML File Reference: Graphics
6.2 Graphics
In an IDML package, the Graphic.xml "le stores elements that de"ne graphic attributes in an
In Design document. Page items and text elements refer to these attributes to apply formatting to
page items and text. Inside Graphic.xml, you’ll "nd the following elements.
• Colors
• Swatches
• Gradients
• Tints
• Inks
• Mixed Inks
• Mixed Ink Groups
• Pasted Smooth Shades
• Stroke Styles
6.2.1 Colors and Swatches
In the In Design user interface, colors, tints, gradients, and mixed inks are all swatches, and can
be applied to the "ll or stroke of a page item or text. Swatches share similar attributes and are
used in similar ways. Swatches are not the same as inks (see “Ink”), but each swatch generally
corresponds to one ink or to a speci"c set of inks. A <Color> element, for example, might
correspond to a single spot ink, or might be made up of percentages of process inks. (If a spot ink
exists in the document, a <Color> element with the same name will also exist.) A <Mixed Ink>
might be based on two or more spot inks, or on at least one spot ink and one or more process
inks. For more on the relationship between swatches and inks, refer to the In Design online help.
Colors can be speci"ed as spot colors or process colors, and can be de"ned using the LAB, RGB,
or CMYK color model.
To support consistent color across multiple devices, you can apply a color pro"le to a document
using the color management attributes of the <Document> element in the designmap.xml "le.
The color management pro"le assigned to the document changes the appearance of the color for
display, printing, and export, but does not change the base values of the de"nition of the color in
IDML or in an In Design document. For more detailed information on color management, please
refer to the In Design documentation.
Note: In Design will create the “None” swatch, and the required “Paper,” “Black,” and
“Registration” colors, even if those elements are not included in the IDML document. In addition,
all In Design documents contain three hidden, reserved process colors: Cyan, Magenta, and
Yellow. You cannot create colors with these names in IDML or in the In Design user interface.
IDML File Format Specification
264 IDML File Reference: Graphics
Swatch
In the In Design user interface, all named colors, tints, gradients, and mixed inks are swatches,
but there is only one object whose type is swatch–“None”, or no color. Every In Design document
contains this special swatch.
Schema Example 95. Swatch
Swatch_Object = element Swatch {
attribute Self { xsd:string },
attribute Name { xsd:string },
attribute ColorEditable { xsd:boolean }?,
attribute ColorRemovable { xsd:boolean }?,
attribute Visible { xsd:boolean }?,
attribute SwatchCreatorID { xsd:int }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Table 121. Swatch Properties Represented as Attributes
Name Type Req Description
Color Editable boolean no If true, the swatch is editable.
Color Removable boolean no If true, the swatch can be deleted. If false, the
swatch is used in an imported graphic "le in the
document.
Name string yes The name of the swatch.
Swatch Creator ID int no The unique ID of the creator (or vendor) of
the swatch. Swatch Creator ID is useful when
the swatch added is from a color library that
In Design shipped with. The Swatch Creator-
ID allows In Design to load the proper
color/swatch library quickly. If it
is an user defined swatch, it simply
defaults to the In Design Swatch-
Creator ID.
Visible boolean no If true, the swatch is visible in the user interface.
Unnamed process color and gradient swatches
can have this attribute set to false. All named
swatches should have this $ag set to true.
All <Color>, <Tint>, <Gradient>, <Mixed Ink>, and <Mixed Ink Group> elements inherit the above
properties.
IDML Example 63. “None” Swatch
<Swatch Self="Swatch\c None" Name="None" Color Editable="false" Color-
Removable="false" Visible="true" Swatch Creator ID="7937"/>
IDML File Format Specification
265 IDML File Reference: Graphics
Figure 44. In Design Swatches
Color
The <Color> element corresponds to a color in a document, including both named and unnamed
colors. The Model attribute speci"es the color model, the Space attribute speci"es the color space,
and the Color Value attribute contains the corresponding array of values that de"ne the color in
the appropriate color model. For information on color models and color spaces, refer to the In-
Design online help.
Schema Example 96. Color
Color_Object = element Color {
attribute Self { xsd:string },
attribute Model { ColorModel_EnumValue }?,
attribute Space { ColorSpace_EnumValue }?,
attribute ColorValue { list { xsd:double * } }?,
attribute ColorOverride { ColorOverride_EnumValue }?,
attribute BaseColor { xsd:string }?,
attribute SpotInkAliasSpotColorReference { xsd:string }?,
attribute AlternateSpace { ColorSpace_EnumValue }?,
attribute AlternateColorValue { list { xsd:double * } }?,
attribute Name { xsd:string },
attribute ColorEditable { xsd:boolean }?,
attribute ColorRemovable { xsd:boolean }?,
attribute Visible { xsd:boolean }?,
attribute SwatchCreatorID { xsd:int }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
In addition to the attributes shared with the <Swatch> element, the <Color> element also de"nes
the following attributes.
IDML File Format Specification
266 IDML File Reference: Graphics
Table 122. Color Properties Represented as Attributes
Name Type Req Description
Alternate Color-
Value
list of doubles
as a space-
separated string
no An alternate color value for the color. The
<Color Value> of the <Color> is de"ned as a
sequence of values in the order in which they
appear in the color space speci"ed by the
Alternate Space attribute. Leave empty if
Alternate Space is No Alternate Color.
Alternate Space Color Space_Enum-
Value
no The color space for the alternate color. Can be
RGB, CMYK, LAB, Mixed Ink, No Alternate-
Color.
Base Color string no Speci"es the color that this color is based on, if
any. Use n if the color is not based on another
color.
Color Override Color Override_
Enum Value
no Can be Normal, Specialpaper,
Specialblack, Specialregistration,
Hiddenreserved, or Mixedinkparent. Use
Normal when defining color swatches
in I D M L—the other enumeration values
are for special, default colors.
Color Value list of doubles
as a space-
separated string
no The number of values required and the range
depends on the color space. For R GB, specify
three values, with each value in the range 0 to
255; for C M Y K, specify four values representing
C, M, Y, and K, with each value in the range 0 to
100; for L AB, specify three values representing L
(Range: 0 to 100), A (Range: -128 to 127), and B
(Range: -128 to 127).
Model Color Model_Enum-
Value
no The color model. Can be Spot, or Process.
Space Color Space_Enum-
Value
no The color space. Can be RGB, CMYK, or LAB.
Spot Ink Alias Spot-
Color Reference
string no A spot color can be aliased to another spot ink
or process ink. From the user interface, this
is done through the Ink Manager dialog. This
attribute contains a reference to the original spot
ink.
IDML Example 64. Process Color
<Color Self="Color\C=100 M=90 Y=10 K=0" Model="Process" Space="CMYK"
Color Value="100 90 10 0" Color Override="Normal" Base Color="n"
Alternate Space="No Alternate Color" Alternate Color Value="" Name="C=100 M=90 Y=10
K=0" Color Editable="true" Color Removable="true" Visible="true" Swatch Creator-
ID="7937"/>
IDML File Format Specification
267 IDML File Reference: Graphics
Figure 45. Process Color
IDML Example 65. Spot Color
<Color Self="Color\PANTONE 274 C" Model="Spot" Space="CMYK" Color Value="100 100
0 28" Color Override="Normal" Base Color="n" Spot Ink Alias Spot Color Reference="n"
Alternate Space="LAB" Alternate Color Value="12.549019607843137 23 -42" Name="PANTONE
274 C" Color Editable="true" Color Removable="true" Visible="true" Swatch Creator-
ID="31500"/>
Figure 46. Spot Color
IDML Example 66. LAB Color
<Color Self="Color\L=29 a=64 b=0" Model="Process" Space="LAB" Color Value="29 64 0"
Color Override="Normal" Base Color="n" Alternate Space="No Alternate Color" Alternate-
Color Value="" Name="L=29 a=64 b=0" Color Editable="true" Color Removable="true"
Visible="true" Swatch Creator ID="7937"/>
Figure 47. LAB Color
IDML File Format Specification
268 IDML File Reference: Graphics
Gradient
A gradient is a blend between two or more colors or between two tints of the same color.
Gradients can include the “Paper” color, process colors, spot colors, or mixed inks using any color
model or color space. Gradients are de"ned by a series of gradient stops. A gradient stop is the
point at which a gradient changes from one color to another. Gradients can be linear or radial.
In IDML, each <Gradient> element has a Type attribute that de"nes the type of gradient (Linear
or Radial). <Gradient> elements also contain two or more <Gradient Stop> elements. Each
<Gradient Stop> element contains a reference to a color in the <Stop Color> element, a Location
attribute that speci"es the location of the gradient stop in the gradient (as a percentage of the
total width of the gradient), and a Midpoint attribute that de"nes the midpoint of the change in
color from this gradient stop to the next (as a percentage of the distance between the two gradient
stops).
When mixing gradients that contain gradient stops with di&erent color spaces, In Design looks
through all of the gradient stops for the widest gamut color space and uses it as a uni"ed color
space. However, if CMYK color space is one of the gradient stops, then CMYK color space is
always the preferred uni"ed space. All process color gradient stops that are not in the uni"ed
color space are converted to the uni"ed space before blending.
For more on gradients, refer to the In Design online help.
Schema Example 97. Gradient
Gradient_Object = element Gradient {
attribute Self { xsd:string },
attribute Type { GradientType_EnumValue }?,
attribute Name { xsd:string },
attribute ColorEditable { xsd:boolean }?,
attribute ColorRemovable { xsd:boolean }?,
attribute Visible { xsd:boolean }?,
attribute SwatchCreatorID { xsd:int }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
)
}
GradientStop_Object*
In addition to the attributes shared with the <Swatch> element, the <Gradient> element also
de"nes the following attributes.
Table 123. Gradient Properties Represented as Attributes
Name Type Req Description
Type Gradient Type_
Enum Value
no The gradient type. Can be Linear or Radial.
IDML File Format Specification
269 IDML File Reference: Graphics
IDML Example 67. Gradient
<Gradient Self="Gradient\Example Gradient" Type="Linear" Name="Example Gradient"
Color Editable="true" Color Removable="true" Visible="true" Swatch Creator ID="7937">
<Gradient Stop Self="ucd Gradient Stop0" Stop Color="Color\u7e" Location="0"/>
<Gradient Stop Self="ucd Gradient Stop1" Stop Color="Color\c L=29 a=64 b=0"
Location="100" Midpoint="50"/>
</Gradient>
Figure 48. Gradient
The example gradient contains two <Gradient Stop> elements, and each <Gradient Stop> refers to
the Self value of a <Color> element in the Graphic.xml "le.
Gradient Stop
Schema Example 98. Gradient Stop
GradientStop_Object = element GradientStop {
attribute Self { xsd:string },
attribute StopColor { xsd:string }?,
attribute Location { xsd:double {minInclusive="0" maxInclusive="100"} }?,
attribute Midpoint { xsd:double {minInclusive="13" maxInclusive="87"} }?
}
Table 124. Gradient Stop Properties Represented as Attributes
Name Type Req Description
Location double no The starting location (as a percentage of the gra-
dient length) of the gradient stop on the gradi-
ent. (Range: 0 to 100).
Midpoint double no The mid-point (as a percentage of the gradient
length) of the gradient stop. (Range: 13 to 87)
Stop Color string no The color, tint, or mixed ink applied to the gra-
dient stop.
Tint
A tint is a color that is based on a percentage of another a color. The appearance of a tint is
determined by attribute Base Color (a reference to the color that the tint is based on) and the
IDML File Format Specification
270 IDML File Reference: Graphics
attribute Tint Value (the percentage of the base color). For more on tints and their relationship
with their base colors, refer to the In Design documentation.
Schema Example 99. Tint
Tint_Object = element Tint {
attribute Self { xsd:string },
attribute TintValue { xsd:double {minInclusive="0" maxInclusive="100"} }?,
attribute BaseColor { xsd:string },
attribute Name { xsd:string },
attribute ColorOverride { ColorOverride_EnumValue }?,
attribute SpotInkAliasSpotColorReference { xsd:string }?,
attribute AlternateSpace { ColorSpace_EnumValue }?,
attribute AlternateColorValue { list { xsd:double * } }?,
attribute ColorEditable { xsd:boolean }?,
attribute ColorRemovable { xsd:boolean }?,
attribute Visible { xsd:boolean }?,
attribute SwatchCreatorID { xsd:int }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
In addition to the attributes shared with the <Swatch>, the <Tint> element also de"nes the
following attributes.
Table 125. Tint Properties Represented as Attributes
Name Type Req Description
Alternate Color-
Value
list of doubles
as a space-
separated string
no An alternate color value for the tint. The
<Color Value> of the <Tint> is de"ned as a
sequence of values in the order in which they
appear in the color space speci"ed by the
Alternate Space attribute. Leave empty if
Alternate Space is No Alternate Color.
Alternate Space Color Space_Enum-
Value
no The color space for the alternate color. Can be
RGB, CMYK, LAB, Mixed Ink, No Alternate-
Color.
Base Color string yes A reference to the color that the tint is based on.
Color Override Color Override_
Enum Value
no Can be Normal, Specialpaper,
Specialblack, Specialregistration,
Hiddenreserved, or Mixedinkparent. Use
Normal when de"ning tint swatches.
Spot Ink Alias Spot-
Color Reference
string no A spot color can be aliased to another spot ink
or process ink. From the user interface, this
is done through the Ink Manager dialog. This
attribute contains a reference to the original spot
ink.
IDML File Format Specification
271 IDML File Reference: Graphics
Name Type Req Description
Tint Value double no The percent of the base color. For process colors,
the Tint Value is the percentage of each process
ink that makes up the base color. For RGB, each
component is multiplied by 0.8 + 0.2, or r,g,b =
tint*(r,g, b) + (1-tint). Tints of Lab colors use the
same formula as RGB, but add the L component
(1- tint)*100.0.
IDML Example 68. Tint
<Tint Self="Tint\[Black] 40%" Tint Value="40" Base Color="Color\Black" Name="[Black]
40%" Color Override="Normal" Alternate Space="No Alternate Color" Alternate Color-
Value="" Color Editable="true" Color Removable="true" Visible="true" Swatch Creator-
ID="7937"/>
Figure 49. Tint
Mixed Ink
A mixed ink is a swatch created by mixing inks—you can combine up to sixteen spot inks, or
mix one spot ink with one or more process inks. For more on mixed inks, refer to the In Design
documentation.
Schema Example 100. Mixed Ink
MixedInk_Object = element MixedInk {
attribute Self { xsd:string },
attribute Model { ColorModel_EnumValue }?,
attribute Space { ColorSpace_EnumValue }?,
attribute InkList { list { xsd:string * } }?,
attribute InkPercentages { list { xsd:double * } }?,
attribute BaseColor { xsd:string }?,
attribute InkNameList { list { xsd:string * } }?,
attribute MixedInkSpotColorNameList { list { xsd:string * } }?,
attribute MixedInkSpotColorList { list { xsd:string * } }?,
attribute Name { xsd:string },
attribute ColorEditable { xsd:boolean }?,
attribute ColorRemovable { xsd:boolean }?,
attribute Visible { xsd:boolean }?,
attribute SwatchCreatorID { xsd:int }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
IDML File Format Specification
272 IDML File Reference: Graphics
}
}
?
}?
In addition to the attributes inherited from the <Swatch> element, the <Mixed Ink> element also
de"nes the following attributes.
Table 126. Mixed Ink Properties Represented as Attributes
Name Type Req Description
Base Color string yes The mixed ink group that a mixed ink swatch is
based on. Use n for a standalone mixed ink.
Ink List list of ink
references as a
space-separated
string
yes The component inks. Each ink is represented by
its unique I D (the value of its Self attribute).
Ink Name List list of ink names
as a space-
separated string
no The names of the component inks.
Ink Percentages list of doubles
as a space-
separated string
no The array of tint percentages for inks in the ink
list (in the same order as the inks appear in the
the Ink List attribute). Note: Specify a value for
each ink.
Mixed Ink Spot-
Color List
list of spot
color references
as a space-
separated string
no The spot colors used in the mixed ink. Each spot
color is represented by its unique I D (the value
of its Self attribute).
Mixed Ink Spot-
Color Name List
list of color
names as a space-
separated string
no The names of the spot colors used in the mixed
ink.
Model Color Model_Enum-
Value
no The color model. Use Mixedinkmodel.
Space Color Space_Enum-
Value
no The color space. Use Mixed Ink.
The following example shows a mixed ink with one spot ink (Pantone 274 C) and one process ink
(Black).
IDML Example 69. Mixed ink
<Mixed Ink Self="Mixed Ink\c Example Mixed Ink" Model="Mixedinkmodel" Space="Mixed-
Ink" Ink List="Ink\k Process%20Black Ink\c PANTONE%20274%20C" Ink Percentages="20 60"
Base Color="n" Ink Name List="$ID/Process%20Black PANTONE%20274%20C" Mixed Ink Spot-
Color Name List="PANTONE%20274%20C" Mixed Ink Spot Color List="Color\c PANTONE%20274%20C"
Name="Example Mixed Ink" Color Editable="true" Color Removable="true" Visible="true"
Swatch Creator ID="7937"/>
IDML File Format Specification
273 IDML File Reference: Graphics
Figure 50. Mixed Ink
Mixed Ink Group
A mixed ink group contains a series of swatches created from incremental percentages of di&erent
process and spot color inks. For example, mixing a spot ink with "ve tints of a the default color
Black (10%, 20%, 30%, 40%, and 50%) results in a mixed ink group that contains "ve di&erent
mixed ink swatches.
The mixed inks that make up a mixed ink group are the same as standalone mixed inks, except
that the value of the Base Color attribute for a mixed ink in a mixed ink group will contain a
reference to the unique ID of the mixed ink group (rather than n for “none”).
Schema Example 101. Mixed Ink Group
MixedInkGroup_Object = element MixedInkGroup {
attribute Self { xsd:string },
attribute Model { ColorModel_EnumValue }?,
attribute InkList { list { xsd:string * } }?,
attribute InkNameList { list { xsd:string * } }?,
attribute MixedInkSpotColorNameList { list { xsd:string * } }?,
attribute MixedInkSpotColorList { list { xsd:string * } }?,
attribute Name { xsd:string },
attribute ColorEditable { xsd:boolean }?,
attribute ColorRemovable { xsd:boolean }?,
attribute Visible { xsd:boolean }?,
attribute SwatchCreatorID { xsd:int }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
In addition to the attributes inherited from the <Swatch> element, the <Mixed Ink Group> element
also de"nes the following attributes.
IDML File Format Specification
274 IDML File Reference: Graphics
Table 127. Mixed Ink Group Properties Represented as Attributes
Name Type Req Description
Ink List list of ink
references as a
space-separated
string
yes The inks used in the mixed ink group. Each ink
is represented by its unique I D (the value of its
Self attribute).
Ink Name List list of ink
names as a space-
separated string
no The names of the inks used in the mixed ink.
Mixed Ink Spot-
Color List
list of spot
color references
as a space-
separated string
no The spot colors used in the mixed ink group.
Each spot color is represented by its unique I D
(the value of its Self attribute).
Mixed Ink Spot-
Color Name List
list of color
names as a space-
separated string
no The names of the spot colors used in the mixed
ink.
Model Color Model_Enum-
Value
no The color model. Use Mixedinkmodel.
IDML Example 70. Mixed Ink Group
<Mixed Ink Group Self="Mixed Ink Group\c Example Mixed Ink Group" Model="Mixedinkmodel"
Ink List="Ink\k Process%20Black Ink\c PANTONE%20274%20C" Ink Name List="$ID/Process%20
Black PANTONE%20274%20C" Mixed Ink Spot Color Name List="PANTONE%20274%20C" Mixed-
Ink Spot Color List="Color\c PANTONE%20274%20C" Name="Example Mixed Ink Group" Color-
Editable="true" Color Removable="true" Visible="true" Swatch Creator ID="7937"/>
Figure 51. Mixed Ink Group
Ink
Inks are used to produce speci"c colors in printing. For process colors, Cyan, Magenta, Yellow
and Black inks are mixed together to produce a range of colors. Every spot color, by contrast,
represents an individual ink or printing plate. For more on the relationship between inks and
colors, refer to the In Design documentation.
IDML File Format Specification
275 IDML File Reference: Graphics
Schema Example 102. Ink
Ink_Object = element Ink {
attribute Self { xsd:string },
attribute Name { xsd:string },
attribute AliasInkName { xsd:string }?,
attribute Angle { xsd:double {minInclusive="0" maxInclusive="360"} }?,
attribute ConvertToProcess { xsd:boolean }?,
attribute Frequency { xsd:double {minInclusive="1" maxInclusive="500"} }?,
attribute NeutralDensity { xsd:double {minInclusive="0.001"
maxInclusive="10"} }?,
attribute PrintInk { xsd:boolean }?,
attribute TrapOrder { xsd:int }?,
attribute InkType { InkTypes_EnumValue }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Table 128. Ink Properties Represented as Attributes
Name Type Req Description
Alias Ink Name string no A reference to the unique I D (Self attribute) of
the alias ink. For more on ink aliases, refer to
the In Design documentation.
Angle double no The screen angle of the ink. (Range: 0 to 360)
Convert To Process boolean no Converts spot colors to process inks (for print-
ing or export). Setting this value to true changes
the printing or output values of the colors; it
does not a&ect the de"nition of the spot colors
in the document.
Frequency double no The screen frequency of the ink.
(Range: 1 to 500)
Ink Type Ink Types_Enum-
Value
no The trapping type of the ink. Can be Normal,
Opaque, Transparent, Opaque Ignore.
Name string yes The name of the ink.
Neutral Density double no The neutral density of the ink used for trapping.
(Range: 0.001 to 10.0)
Print Ink boolean no If true (the default), prints the ink.
Trap Order int no The place of the ink in the trapping sequence.
IDML Example 71. Process Magenta ink
<Ink Self="Ink\Process Magenta" Name="$ID/Process Magenta" Alias Ink Name="[No-
Alias]" Angle="15" Convert To Process="false" Frequency="70" Neutral Density="0.76"
Print Ink="true" Trap Order="2" Ink Type="Normal"/>
Note that the “$ID” preceding the name of the default ink, “Magenta” in the above example
indicates that the name of this ink can be localized.
IDML File Format Specification
276 IDML File Reference: Graphics
IDML Example 72. Pantone 274 C Spot ink
<Ink Self="Ink\c PANTONE 274 C" Name="PANTONE 274 C" Alias Ink Name="[No-
Alias]" Angle="45" Convert To Process="false" Frequency="70" Neutral-
Density="1.6130121989933028" Print Ink="true" Trap Order="5" Ink Type="Normal"/>
6.2.2 Stroke Styles
The stroke styles used in an In Design document are represented in an IDML package by the
<Stroke Style>, <Dashed Stroke Style>, <Dotted Stroke Style>, and <Striped Stroke Style>
elements in the Graphics.xml "le.
Schema Example 103. Stroke Style
Stroke Style_Object = element Stroke Style {
attribute Self { xsd:string },
attribute Name { xsd:string }
}
Table 129. Stroke Style Properties Represented as Attributes
Name Type Req Description
Name string yes The name of the stroke style.
IDML Example 73. Default Stroke Styles
<Stroke Style Self="Stroke Style\Triple_Stroke" Name="$ID/Triple_Stroke"/>
<Stroke Style Self="Stroke Style\Thick Thin Thick" Name="$ID/Thick Thin Thick"/>
<Stroke Style Self="Stroke Style\Thin Thick Thin" Name="$ID/Thin Thick Thin"/>
<Stroke Style Self="Stroke Style\Thick Thick" Name="$ID/Thick Thick"/>
<Stroke Style Self="Stroke Style\Thick Thin" Name="$ID/Thick Thin"/>
<Stroke Style Self="Stroke Style\Thin Thick" Name="$ID/Thin Thick"/>
<Stroke Style Self="Stroke Style\Thin Thin" Name="$ID/Thin Thin"/>
<Stroke Style Self="Stroke Style\Japanese Dots" Name="$ID/Japanese Dots"/>
<Stroke Style Self="Stroke Style\White Diamond" Name="$ID/White Diamond"/>
<Stroke Style Self="Stroke Style\Left Slant Hash" Name="$ID/Left Slant Hash"/>
<Stroke Style Self="Stroke Style\Right Slant Hash" Name="$ID/Right Slant Hash"/>
<Stroke Style Self="Stroke Style\Straight Hash" Name="$ID/Straight Hash"/>
<Stroke Style Self="Stroke Style\Wavy" Name="$ID/Wavy"/>
<Stroke Style Self="Stroke Style\Canned Dotted" Name="$ID/Canned Dotted"/>
<Stroke Style Self="Stroke Style\Canned Dashed 3x2" Name="$ID/Canned Dashed 3x2"/>
<Stroke Style Self="Stroke Style\Canned Dashed 4x4" Name="$ID/Canned Dashed 4x4"/>
<Stroke Style Self="Stroke Style\Dashed" Name="$ID/Dashed"/>
<Stroke Style Self="Stroke Style\Solid" Name="$ID/Solid"/>
Only the default stroke styles will appear as <Stroke Style> elements. All custom stroke styles
will appear as <Dashed Stroke Style>, <Dotted Stroke Style>, or <Striped Stroke Style>
elements. The names of the default stroke styles above have the “$ID” pre"x, which means that the
string will change based on the installed locale of the application. For more on the default stroke
styles, refer to the In Design online help.
IDML File Format Specification
277 IDML File Reference: Graphics
Figure 52. In Design Stroke Styles
Schema Example 104. Dashed Stroke Style
Dashed Stroke Style_Object = element Dashed Stroke Style {
attribute Self { xsd:string },
attribute Dash Array { list { xsd:double * } }?,
attribute Stroke Corner Adjustment { Stroke Corner Adjustment_Enum Value }?,
attribute End Cap { End Cap_Enum Value }?,
attribute Name { xsd:string }
}
Table 130. Dashed Stroke Style Properties Represented as Attributes
Name Type Req Description
Dash Array list of doubles
as a space-
separated string
no The pattern of dashes and gaps that make up the
dashed stroke, in the format [dash length1, gap
length1, dash length2, gap length2, ...], in points.
De"ne up to ten values. This pattern repeats
along the path. The exact length of the dashes
and gaps can be a&ected by the value of the
Stroke Corner Adjustment attribute.
End Cap End Cap_Enum Value no The end shape of a the dashes. Can be
Butt End Cap, Round End Cap, or
Projecting End Cap. For a description of these
end shapes, refer to the In Design online help.
Name string no The name of the dashed stroke style.
Stroke Corner-
Adjustment
Stroke Corner-
Adjustment_Enum-
Value
no The corner adjustment applied to the dashed
stroke style. Can be None, Dashes, Gaps, or
Dashes And Gaps. For a description
of these adjustments, refer to the
In Design online help.
IDML Example 74. Dashed Stroke Style
<Dashed Stroke Style Self="Dashed Stroke Style\c Example Dashed Stroke" Dash Array="6 3 2
7 3 3" Stroke Corner Adjustment="Dashes And Gaps" End Cap="Butt End Cap" Name="Example-
Dashed Stroke"/>
IDML File Format Specification
278 IDML File Reference: Graphics
Figure 53. Dashed Stroke Style
Schema Example 105. Dotted Stroke Style
Dotted Stroke Style_Object = element Dotted Stroke Style {
attribute Self { xsd:string },
attribute Dot Array { list { xsd:double * } }?,
attribute Stroke Corner Adjustment { Stroke Corner Adjustment_Enum Value }?,
attribute Name { xsd:string }
}
Table 131. Dotted Stroke Style Properties Represented as Attributes
Name Type Req Description
Dot Array list of doubles
as a space-
separated string
no The length of gaps between dots, in points (the
diameter of the dots is determined by the stroke
width). This pattern repeats along the path. The
exact distance between the dots can be a&ected
by the value of the Stroke Corner Adjustment
attribute.
Name string no The name of the dotted stroke style.
Stroke Corner-
Adjustment
Stroke Corner-
Adjustment_Enum-
Value
no The corner adjustment applied to the dotted
stroke style. Can be None, Dashes, Gaps, or
Dashes And Gaps. For a description of these
adjustments, refer to the In Design online help.
IDML Example 75. Dotted Stroke Style
<Dotted Stroke Style Self="Dotted Stroke Style\c Example Dotted Stoke" Dot-
Array="5.554054054054054 6.445945945945946" Stroke Corner Adjustment="Gaps"
Name="Example Dotted Stoke"/>
IDML File Format Specification
279 IDML File Reference: Graphics
Figure 54. Dotted Stroke Style
Schema Example 106. Striped Stroke Style
Striped Stroke Style_Object = element Striped Stroke Style {
attribute Self { xsd:string },
attribute Stripe Array { list { xsd:double * } }?,
attribute Name { xsd:string }
}
Table 132. Striped Stroke Style Properties Represented as Attributes
Name Type Req Description
Name string no The name of the striped stroke style.
Stripe Array list of doubles
as a space-
separated string
no The width and position of stripes in a striped
stroke pattern. Each stripe is speci"ed by a start-
end pair in the format start1, end1, start2, end2;
each value indicates a percentage of the stroke
weight. Each value must be greater than the pre-
vious value. Range: 0 to 100.
IDML Example 76. Striped Stroke Style
<Striped Stroke Style Self="Striped Stroke Style\c Example Striped Stroke" Array="25 75" Name="Example Striped Stroke"/>
Stripe-
IDML File Format Specification
280 IDML File Reference: Graphics
Figure 55. Striped Stroke Style
IDML File Format Specification
281 IDML File Reference: Preferences
6.3 Preferences
IDML "les can contain a number of preferences elements that control both document preferences
and various default values. In an IDML package, preferences elements are found in the
Preferences.xml "le in the Resources folder.
Many of these elements no e&ect on the interpretation of the IDML "le, but do have an e&ect on
the user interface settings in the In Design document that results when a user opens the IDML "le.
<Data Merge>, <Layout Adjustment Preference>, <XMLImport Preference>, and <Export For Web-
Preference>, are examples of preferences that do not a&ect the reconstruction of elements (page
items or text, for example) in an IDML "le. By contrast, some of the preferences, such as <Text-
Default> and <Anchored Object Default> can have a very large e&ect on the formatting of objects
speci"ed in the IDML package.
In general, when you construct a page item (in a <Spread> element) or text (in a <Story> element),
you can choose to omit many of the formatting options that can be applied to the element. When
you do this, In Design will apply default values to the object as it opens the IDML package. Most
of these default values are stored in preferences elements.
This means that you can choose an approach that works best for you. You can achieve complete
control by fully-specifying every attribute and element of every element you add to an IDML
document, or you can rely on defaults and preferences for common values and specify only a
minimum—this can make your IDML "le smaller and easier to read. Or you can mix and match
these approaches in an IDML "le.
When you specify a preference in the IDML "le, it will override the corresponding application
preference for this document. If you do not specify a preference, InDesign will apply the default
value from the IDML defaults "le.
Schema Example 107. Preferences_File
Preferences_File = element idPkg:Preferences {
attribute DOMVersion { "7.0" },
(
DataMerge_Object?&
DataMergeOption_Object?&
LayoutAdjustmentPreference_Object?&
EPubExportPreference_Object?&
HTMLExportPreference_Object?&
XMLPreference_Object?&
XMLImportPreference_Object?&
XMLExportPreference_Object?&
ExportForWebPreference_Object?&
TransparencyPreference_Object?&
TransparencyDefaultContainerObject_Object?&
TextFramePreference_Object?&
TextPreference_Object?&
TextDefault_Object?&
DictionaryPreference_Object?&
StoryPreference_Object?&
AnchoredObjectDefault_Object?&
AnchoredObjectSetting_Object?&
BaselineFrameGridOption_Object?&
FootnoteOption_Object?&
IDML File Format Specification
282 IDML File Reference: Preferences
TextWrapPreference_Object?&
DocumentPreference_Object?&
GridPreference_Object?&
GuidePreference_Object?&
MarginPreference_Object?&
PasteboardPreference_Object?&
ViewPreference_Object?&
PrintPreference_Object?&
PrintBookletOption_Object?&
PrintBookletPrintPreference_Object?&
IndexOptions_Object?&
IndexHeaderSetting_Object?&
PageItemDefault_Object?&
FrameFittingOption_Object?&
ButtonPreference_Object?&
TinDocumentDataObject_Object?&
LayoutGridDataInformation_Object?&
StoryGridDataInformation_Object?&
CjkGridPreference_Object?&
MojikumiUiPreference_Object?&
ChapterNumberPreference_Object?
)
}
6.3.1 Data Merge
The <Data Merge> element stores the settings that are be used by the Data Merge feature of In-
Design. This preference object does not have any e&ect on the interpretation of layout elements
(page items or stories, for example) in the IDML "le.
Schema Example 108. Data Merge
DataMerge_Object = element DataMerge {
attribute DataSourceFileType { DataSourceType_EnumValue }?,
attribute DataSourceFile { xsd:string }?,
(
)
}
DataMergeField_Object*
Table 133. Data Merge Properties Represented as Attributes
Name Type Req Description
Data Source File string no The "le path to the data "le.
Data Source File-
Type
Data Source Type_
Enum Value
no The separator type used in the data "le. Use
Comma Separated or Tab Delimited.
Schema Example 109. Data Merge Field
Data Merge Field_Object = element Data Merge Field {
attribute Self { xsd:string },
attribute Field Name { xsd:string }?
}
IDML File Format Specification
283 IDML File Reference: Preferences
Table 134. Data Merge Field Properties Represented as Attributes
Name Type Req Description
Field Name string yes The name of the "eld.
6.3.2 Data Merge Option
The <Data Merge Option> element stores the preferences for the Data Merge feature of In Design.
Schema Example 110. Data Merge Option
Data Merge Option_Object = element Data Merge Option {
attribute Fitting Option { Fitting_Enum Value }?,
attribute Center Image { xsd:boolean }?,
attribute Link Images { xsd:boolean }?,
attribute Remove Blank Lines { xsd:boolean }?,
attribute Create New Document { xsd:boolean }?,
attribute Document Size { xsd:int }?
}
Table 135. Data Merge Option Properties Represented as Attributes
Name Type Req Description
Center Image boolean no If true, centers the image in the frame; preserves
the frame size as well as content size and pro-
portions. Note: If the content is larger than the
frame, content around the edges is obscured by
the bounding box of the frame.
Create New Document boolean no If true, creates a new document when records
are merged.
Document Size int no The maximum number of pages per document.
Fitting Option Fitting_Enum Value no Instructions for "tting content in a frame. Use
None, Content To Frame, Proportionally, or
Fill Proportionally.
Link Images boolean no If true, links images to the target document. If
false, embeds images in the target document.
Remove Blank Lines boolean no If true, removes blank lines caused by empty
"elds.
6.3.3 Layout Adjustment Preference
The <Layout Adjustment Preference> element stores the settings that are be used by the
Layout Adjustment feature of In Design. This preference object does not have any e&ect on the
interpretation of layout elements (page items or stories, for example) in the IDML "le.
Schema Example 111. Layout Adjustment Preference
LayoutAdjustmentPreference_Object = element LayoutAdjustmentPreference {
attribute EnableLayoutAdjustment { xsd:boolean }?,
attribute SnapZone { xsd:double {minInclusive="0" maxInclusive="12"} }?,
attribute AllowGraphicsToResize { xsd:boolean }?,
IDML File Format Specification
284 IDML File Reference: Preferences
attribute AllowRulerGuidesToMove { xsd:boolean }?,
attribute IgnoreRulerGuideAlignments { xsd:boolean }?,
attribute IgnoreObjectOrLayerLocks { xsd:boolean }?
}
Table 136. Layout Adjustment Preference Properties Represented as Attributes
Name Type Req Description
Allow Graphics To-
Resize
boolean no If true, allows graphics to be resized.
Allow Ruler Guides-
To Move
boolean no If true, allows ruler guides to move.
Enable Layout-
Adjustment
boolean no If true, layout adjustment is enabled.
Ignore Object Or-
Layer Locks
boolean no If true, ignores object or layer locks.
Ignore Ruler Guide-
Alignments
boolean no If true, ignores ruler guide alignments.
Snap Zone double no The range within which an object snaps to
guides. Range: 0 to 12.
6.3.4 EPubExportPreference
Schema Example 112. EPubExportPreference
EPubExportPreference_Object = element EPubExportPreference {
attribute IncludeDocumentMetadata { xsd:boolean }?,
attribute EpubPublisher { xsd:string }?,
attribute Id { xsd:string }?,
attribute ExportOrder { ExportOrder_EnumValue }?,
attribute EpubCover { EpubCover_EnumValue }?,
attribute CoverImageFile { xsd:string }?,
attribute BulletExportOption { BulletListExportOption_EnumValue }?,
attribute NumberedListExportOption { NumberedListExportOption_EnumValue }?,
attribute LeftMargin { xsd:double }?,
attribute RightMargin { xsd:double }?,
attribute TopMargin { xsd:double }?,
attribute BottomMargin { xsd:double }?,
attribute MarginUnit { SpaceUnitType_EnumValue }?,
attribute ViewDocumentAfterExport { xsd:boolean }?,
attribute ImageExportResolution { ImageResolution_EnumValue }?,
attribute CustomImageSizeOption { ImageSizeOption_EnumValue }?,
attribute PreserveLayoutAppearence { xsd:boolean }?,
attribute ImageAlignment { ImageAlignmentType_EnumValue }?,
attribute ImageSpaceBefore { xsd:double {minInclusive="0"
maxInclusive="8640"} }?,
attribute ImageSpaceAfter { xsd:double {minInclusive="0"
maxInclusive="8640"} }?,
attribute SpaceUnit { SpaceUnitType_EnumValue }?,
attribute ApplyImageAlignmentToAnchoredObjectSettings { xsd:boolean }?,
attribute UseImagePageBreak { xsd:boolean }?,
IDML File Format Specification
285 IDML File Reference: Preferences
attribute ImagePageBreak { ImagePageBreakType_EnumValue }?,
attribute ImageConversion { ImageConversion_EnumValue }?,
attribute GIFOptionsPalette { GIFOptionsPalette_EnumValue }?,
attribute GIFOptionsInterlaced { xsd:boolean }?,
attribute JPEGOptionsQuality { JPEGOptionsQuality_EnumValue }?,
attribute JPEGOptionsFormat { JPEGOptionsFormat_EnumValue }?,
attribute Level { xsd:int }?,
attribute IgnoreObjectConversionSettings { xsd:boolean }?,
attribute Format { xsd:boolean }?,
attribute UseTocStyle { xsd:boolean }?,
attribute TocStyleName { xsd:string }?,
attribute BreakDocument { xsd:boolean }?,
attribute ParagraphStyleName { xsd:string }?,
attribute FootnoteFollowParagraph { xsd:boolean }?,
attribute StripSoftReturn { xsd:boolean }?,
attribute CSSExportOption { StyleSheetExportOption_EnumValue }?,
attribute IncludeCSSDefinition { xsd:boolean }?,
attribute PreserveLocalOverride { xsd:boolean }?,
attribute EmbedFont { xsd:boolean }?,
attribute ExternalCSSPath { xsd:string }?
}
Table 137. EPubExportPreference Properties Represented as Attributes
Name Type Req Description
Includ e Document-
Metadata
boolean no If true, output document metadata into the
exported ePub.
EpubPublisher string no The name of the ePub publisher.
ExportOrder ExportOrder_
EnumValue
no The order in which to export the ePub. Can
be ArticlePanelOrder, LayoutOrder, or
XmlStructureOrder.
EpubCover EpubCover_
EnumValue
no The ePub cover option. Can be ExternalImage,
FirstPage, or None.
CoverImageFile string no The "le path to the external image (if
EpubCover is ExternalImage).
Bullet Export-
Option
Bullet List Export-
Option_Enum Value
no De"nes the method used to export bullets to the
ePub. Can be AsText (convert the bullets to text
characters) or UnorderedList (convert the bul-
lets to an HTML unordered list).
Numbered List-
Export Option
Numbered List-
Export Option_
Enum Value
no De"nes the method used to export numbered
lists to the ePub. Can be AsText (convert the
numbers to text characters), OrderedList
(convert the list to an HTML ordered list), or
StaticOrderedList (convert the list to an
HTML static ordered list).
LeftMargin double no Le% margin of the ePub (in units de"ned by the
MarginUnit attribute).
RightMargin double no Right margin of the ePub (in units de"ned by
the MarginUnit attribute).
IDML File Format Specification
286 IDML File Reference: Preferences
Name TopMargin BottomMargin MarginUnit View Document-
After Export
Image Export-
Resolution
Custom Image Size-
Option
Preserve-
LayoutAppearence
ImageAlignment ImageSpaceBefore ImageSpaceAfter SpaceUnit ApplyImage-
Alignment-
To Anchored-
ObjectSettings
UseImagePageBreak ImagePageBreak ImageConversion GIFOptionsPalette GIF Options-
Interlaced
JPEG Options-
Quality
Type Req Description
double no Top margin of the ePub (in units de"ned by the
MarginUnit attribute).
double no Bottom margin of the ePub (in units de"ned by
the MarginUnit attribute).
SpaceUnitType_
EnumValue
no The measurement units to use for the margins of
the exported ePub. Can be CssEm or CssPixel.
boolean no If true, display the exported ePub a%er the
export process is complete.
ImageResolution_
EnumValue
no Sets the resolution of images in the exported
ePub. Can be Ppi150, Ppi300, Ppi72, or
Ppi96.
ImageSizeOption_
EnumValue
no Sets the custom image size. Can be SizeFixed
or SizeRelativeToPageWidth.
boolean no If true, format image based on layout
appearance.
Image Alignment-
Type_Enum Value
no Alignment applied to images. Can be
AlignCenter, AlignRight, or AlignLeft.
double (0-8640) no Space before applied to images (in units de"ned
by the SpaceUnit attribute).
double (0-8640) no Space a%er applied to images (in units de"ned by
the SpaceUnit attribute).
SpaceUnitType_
EnumValue
no The measurement units to use in the exported
ePub. Can be CssEm or CssPixel.
boolean no If true, apply image alignment to anchored
object settings.
boolean no If true, image page break settings will be used in
objects.
Image Page Break-
Type_Enum Value
no Image page break settings to be used with
objects (when UseImagePageBreak is true).
Can be PageBreakBefore, PageBreakAfter,
or PageBreakBeforeAndAfter.
ImageConversion_
EnumValue
no The "le format to use for converted images.
Note: Valid only when copy optimized images
and/or copy formatted images is true. Can be
Automatic, Gif, Jpeg, or Png.
GIF Options-
Palette_Enum Value
no The color palette for GIF conversion. Note: Not
valid when ImageConversion is Jpeg. Can
be AdaptivePalette, MacintoshPalette,
WebPalette, or WindowsPalette.
boolean no If true, use interlaced GIF (valid when
ImageConversion is Gif).
JPEG Options-
Quality_Enum Value
no The quality of converted JPEG images. Note:
Not valid when image conversion is Gif. Can be
High, Low, Maximum, or Minimum.
IDML File Format Specification
287 IDML File Reference: Preferences
Name Type Req Description
JPEGOptionsFormat JPEG Options-
Format_Enum Value
no The formatting method for converted JPEG
images. Note: Not valid when image conver-
sion is Gif. Can be BaselineEncoding or
ProgressiveEncoding.
Level int no The PNG compression level (when
ImageConversion is Png).
Ignore O bject -
Conve rsion-
Settings
boolean no If true, ignore object level image conversion
settings.
Format boolean no If true, export ePub in XHTML format. Other-
wise, export using the DTBook format.
UseTocStyle boolean no If true, use InDesign TOC style to generate the
ePub TOC.
TocStyleName string no The name of TOC style to use to generate the
ePub TOC (when UseTocStyle is true).
BreakDocument boolean no If true, break the InDesign document into
smaller pieces when generating the ePub.
Paragraph Style-
Name
string no The name of paragraph style to use in break-
ing the InDesign document into smaller pieces
(when BreakDocument is true).
Footnote Follow-
Paragraph
boolean no If true, output footnotes immediately a%er the
paragraph containing the footnote reference.
StripSoftReturn boolean no If true, strip so% returns on export.
CSSExportOption Style Sheet Export-
Option_EnumValue
no The cascading style sheet export option. Can
be EmbeddedCss, ExternalCss, none, or
StyleNameOnly.
Include CSS-
Definition
boolean no If true, include the CSS de"nitions in the
exported ePub (used when CSSExportOption is
EmbeddedCss).
Preserve Local-
Override
boolean no If true, export the local style overrides.
EmbedFont boolean no If true, embed fonts in the exported ePub.
ExternalCSSPath string no The path to the external CSS stylesheet (when
CSSExportOption is ExternalCss).
IDML Example 77. EPubExportPreference
<EPubExportPreference IncludeDocumentMetadata="true" EpubPublisher="" Id=""
ExportOrder="LayoutOrder" EpubCover="FirstPage" CoverImageFile=""
BulletExportOption="UnorderedList" NumberedListExportOption="OrderedList"
LeftMargin="0.5" RightMargin="0.5" TopMargin="0.5" BottomMargin="0.5"
MarginUnit="CssEm" ViewDocumentAfterExport="true" ImageExportResolution="Ppi150"
CustomImageSizeOption="SizeFixed" PreserveLayoutAppearence="true"
ImageAlignment="AlignCenter" ImageSpaceBefore="0" ImageSpaceAfter="0"
SpaceUnit="CssEm" ApplyImageAlignmentToAnchoredObjectSettings="false"
UseImagePageBreak="false" ImagePageBreak="PageBreakBefore"
ImageConversion="Automatic" GIFOptionsPalette="AdaptivePalette"
GIFOptionsInterlaced="false" JPEGOptionsQuality="High"
IDML File Format Specification
288 IDML File Reference: Preferences
JPEGOptionsFormat="ProgressiveEncoding" Level="5"
IgnoreObjectConversionSettings="false" Format="true" UseTocStyle="false"
TocStyleName="$ID/DefaultTOCStyleName" BreakDocument="false"
ParagraphStyleName="$ID/NormalParagraphStyle" FootnoteFollowParagraph="false"
StripSoftReturn="false" CSSExportOption="EmbeddedCSS" IncludeCSSDefinition="true"
PreserveLocalOverride="true" EmbedFont="true" ExternalCSSPath="template.css"/>
6.3.5 HTMLExportPreference
Schema Example 113. HTMLExportPreference
HTMLExportPreference_Object = element HTMLExportPreference {
attribute ExportSelection { xsd:boolean }?,
attribute ExportOrder { ExportOrder_EnumValue }?,
attribute BulletExportOption { BulletListExportOption_EnumValue }?,
attribute NumberedListExportOption { NumberedListExportOption_EnumValue }?,
attribute LeftMargin { xsd:double }?,
attribute RightMargin { xsd:double }?,
attribute TopMargin { xsd:double }?,
attribute BottomMargin { xsd:double }?,
attribute MarginUnit { SpaceUnitType_EnumValue }?,
attribute ViewDocumentAfterExport { xsd:boolean }?,
attribute ImageExportOption { ImageExportOption_EnumValue }?,
attribute ImageExportResolution { ImageResolution_EnumValue }?,
attribute CustomImageSizeOption { ImageSizeOption_EnumValue }?,
attribute PreserveLayoutAppearence { xsd:boolean }?,
attribute ImageAlignment { ImageAlignmentType_EnumValue }?,
attribute ImageSpaceBefore { xsd:double {minInclusive="0"
maxInclusive="8640"} }?,
attribute ImageSpaceAfter { xsd:double {minInclusive="0"
maxInclusive="8640"} }?,
attribute SpaceUnit { SpaceUnitType_EnumValue }?,
attribute ApplyImageAlignmentToAnchoredObjectSettings { xsd:boolean }?,
attribute ImageConversion { ImageConversion_EnumValue }?,
attribute GIFOptionsPalette { GIFOptionsPalette_EnumValue }?,
attribute GIFOptionsInterlaced { xsd:boolean }?,
attribute JPEGOptionsQuality { JPEGOptionsQuality_EnumValue }?,
attribute JPEGOptionsFormat { JPEGOptionsFormat_EnumValue }?,
attribute Level { xsd:int }?,
attribute IgnoreObjectConversionSettings { xsd:boolean }?,
attribute ServerPath { xsd:string }?,
attribute ImageExtension { xsd:string }?,
attribute CSSExportOption { StyleSheetExportOption_EnumValue }?,
attribute IncludeCSSDefinition { xsd:boolean }?,
attribute PreserveLocalOverride { xsd:boolean }?,
attribute ExternalCSSPath { xsd:string }?,
attribute LinkToJavascript { xsd:boolean }?,
attribute JavascriptURL { xsd:string }?
}
Table 138. HTMLExportPreference Properties Represented as Attributes
Name Type Req Description
ExportSelection boolean no If true, export the selection.
IDML File Format Specification
289 IDML File Reference: Preferences
Name ExportOrder Bullet Export-
Option
Number ed List-
Export Option
LeftMargin RightMargin TopMargin BottomMargin MarginUnit View Document-
After Export
ImageExportOption Image Export-
Resolution
Custom Image Size-
Option
Preserve Layout-
Appearence
ImageAlignment ImageSpaceBefore ImageSpaceAfter SpaceUnit Type Req Description
ExportOrder_
EnumValue
no The order in which to export HTML. Can
be ArticlePanelOrder, LayoutOrder, or
XmlStructureOrder.
Bullet List Export-
Option_EnumValue
no De"nes the method used to export bullets to the
HTML. Can be AsText (convert the bullets to
text characters) or UnorderedList (convert the
bullets to an HTML unordered list).
Numbered List-
Export Option_
EnumValue
no De"nes the method used to export numbered
lists to HTML. Can be AsText (convert the
numbers to text characters), OrderedList
(convert the list to an HTML ordered list), or
StaticOrderedList (convert the list to an
HTML static ordered list).
double no Le% margin of the HTML (in units de"ned by
the MarginUnit attribute).
double no Right margin of the HTML (in units de"ned by
the MarginUnit attribute).
double no Top margin of the HTML (in units de"ned by
the MarginUnit attribute).
double no Bottom margin of the HTML (in units de"ned
by the MarginUnit attribute).
SpaceUnitType_
EnumValue
no The measurement units to use for the mar-
gins of the exported HTML. Can be CssEm or
CssPixel.
boolean no If true, display the exported HTML a%er the
export process is complete.
Image Export-
Option_EnumValue
no Controls the method used to export images.
Can be LinkToServer, OptimizedImage, or
OriginalImage.
ImageResolution_
EnumValue
no Sets the resolution of images in the exported
HTML. Can be Ppi150, Ppi300, Ppi72, or
Ppi96.
ImageSizeOption_
EnumValue
no Sets the custom image size. Can be SizeFixed
or SizeRelativeToPageWidth.
boolean no If true, format image based on layout
appearance.
Image Alignment-
Type_EnumValue
no Alignment applied to images. Can be
AlignCenter, AlignRight, or AlignLeft.
double (0 to
8640)
no Space before applied to images (in units de"ned
by the SpaceUnit attribute).
double (0 to
8640)
no Space a%er applied to images (in units de"ned by
the SpaceUnit attribute).
SpaceUnitType_
EnumValue
no The measurement units to use in the exported
HTML. Can be CssEm or CssPixel.
IDML File Format Specification
290 IDML File Reference: Preferences
Name Type Req Description
ApplyImage Align-
ment To Anchored-
Object Settings
boolean no If true, apply image alignment to anchored
object settings.
ImageConversion ImageConversion_
EnumValue
no The "le format to use for converted images.
Note: Valid only when copy optimized images
and/or copy formatted images is true. Can be
Automatic, Gif, Jpeg, or Png.
GIFOptionsPalette GIF Options-
Palette_EnumValue
no The color palette for GIF conversion. Note: Not
valid when ImageConversion is Jpeg. Can
be AdaptivePalette, MacintoshPalette,
WebPalette, or WindowsPalette.
GIF Options-
Interlaced
boolean no If true, use interlaced GIF (valid when
ImageConversion is Gif).
JPEG Options-
Quality
JPEG Options-
Quality_EnumValue
no The quality of converted JPEG images. Note:
Not valid when image conversion is Gif. Can be
High, Low, Maximum, or Minimum.
JPEGOptionsFormat JPEG Options-
Format_EnumValue
no The formatting method for converted JPEG
images. Note: Not valid when image conver-
sion is Gif. Can be BaselineEncoding or
ProgressiveEncoding.
Level int no The PNG compression level (when
ImageConversion is Png).
Ignore Object-
Conversion-
Settings
boolean no If true, ignore object level image conversion
settings.
ServerPath string no The server path for exported images (when
ImageExportOption is LinkToServer).
ImageExtension string no The extension for exported images (when
ImageExportOption is LinkToServer).
CSSExportOption Style Sheet Export-
Option_EnumValue
no The cascading style sheet export option. Can
be EmbeddedCss, ExternalCss, none, or
StyleNameOnly.
Include CSS-
Definition
boolean no If true, include the CSS de"nitions in the export-
ed HTML (used when CSSExportOption is
EmbeddedCss).
Pre serve Local-
Override
boolean no If true, export the local style overrides.
ExternalCSSPath string no The path to the external CSS stylesheet (when
CSSExportOption is ExternalCss).
LinkToJavascript boolean no If true, link to JavaScript on the server.
JavascriptURL string no The path to the server containing the JavaScript
associated with the exported HTML (when
LinkToJavaScript is true).
IDML Example 78. HTMLExportPreference
<HTMLExportPreference ExportSelection="true" ExportOrder="LayoutOrder"
BulletExportOption="UnorderedList" NumberedListExportOption="OrderedList"
IDML File Format Specification
291 IDML File Reference: Preferences
LeftMargin="0" RightMargin="0" TopMargin="0" BottomMargin="0"
MarginUnit="CssPixel" ViewDocumentAfterExport="true"
ImageExportOption="OptimizedImage" ImageExportResolution="Ppi150"
CustomImageSizeOption="SizeFixed" PreserveLayoutAppearence="false"
ImageAlignment="AlignCenter" ImageSpaceBefore="0" ImageSpaceAfter="0"
SpaceUnit="CssEm" ApplyImageAlignmentToAnchoredObjectSettings="false"
ImageConversion="Automatic" GIFOptionsPalette="AdaptivePalette"
GIFOptionsInterlaced="false" JPEGOptionsQuality="High"
JPEGOptionsFormat="ProgressiveEncoding" Level="5"
IgnoreObjectConversionSettings="false" ServerPath="" ImageExtension=".jpg"
CSSExportOption="EmbeddedCSS" IncludeCSSDefinition="true"
PreserveLocalOverride="true" ExternalCSSPath="" LinkToJavascript="false"
JavascriptURL=""/>
6.3.6 XMLImport Peference
The <XMLImport Preference> element stores the settings that are be used by when importing XML
into an In Design document. This preference object does not have any e&ect on the interpretation
of XML elements in the IDML "le.
Schema Example 114. XMLImport Preference
XMLImportPreference_Object = element XMLImportPreference {
attribute CreateLinkToXML { xsd:boolean }?,
attribute RepeatTextElements { xsd:boolean }?,
attribute IgnoreUnmatchedIncoming { xsd:boolean }?,
attribute ImportTextIntoTables { xsd:boolean }?,
attribute IgnoreWhitespace { xsd:boolean }?,
attribute RemoveUnmatchedExisting { xsd:boolean }?,
attribute ImportToSelected { xsd:boolean }?,
attribute ImportStyle { XMLImportStyles_EnumValue }?,
attribute AllowTransform { xsd:boolean }?,
attribute ImportCALSTables { xsd:boolean }?,
element Properties {
element TransformFilename {
(file_type, xsd:string ) |
(enum_type, XMLTransformFile_EnumValue )
}?&
element TransformParameters { element NameValuePair { NameValuePair_TypeDef }*
}?
}
?
}
Table 139. XMLImport Preference Properties Represented as Attributes
Name Type Req Description
Allow Transform boolean no If true, transforms the X ML using an X S L T "le.
Create Link To XML boolean no If true, creates a link to the imported X ML "le.
If false, embeds the "le.
Ignore Unmatched-
Incoming
boolean no If true, ignores elements that do not match the
existing structure. Note: Valid only when import
style is merge.
IDML File Format Specification
292 IDML File Reference: Preferences
Name Type Req Description
Ignore Whitespace boolean no If true, leaves existing content in place if
the matching X ML content contains only
whitespace characters such as a carriage return
or a tab character. Note: Valid only when import
style is merge.
Import CALSTables boolean no If true, imports C A L S tables as In Design tables.
Import Style XMLImport Styles_
Enum Value
no The style of incorporating imported X ML con-
tent into the document. Can be Append Import
or Merge Import.
Import Text Into-
Tables
boolean no If true, imports text into tables if tags match
placeholder tables and their cells. Note: Valid
only when import style is Merge Import.
Import To Selected boolean no If true, imports into the selected X ML element.
If false, imports at the root element.
Remove Unmatched-
Existing
boolean no If true, deletes existing elements or placeholders
in the document that do not have matches in the
X ML "le. Note: Valid only when import style is
Merge Import.
Repeat Text-
Elements
boolean no If true, repeating text elements inherit the for-
matting applied to placeholder text. Note: Valid
only when import style is Merge Import.
Table 140. XMLImport Preference Properties Represented as Elements
Name Type Req Description
Transform Filename string no If true, allow The name of the X S L T "le or
Stylesheet In XML (when the X S L T "le is
referred to in the X ML document). Note: Valid
when allow transform is true.
Transform-
Parameters
ListItem no Stylesheet parameters as a series of ListItem
elements containing name/value pairs.
6.3.7 XMLExport Preference
The <XMLExport Preference> element stores the settings that are be used by when exporting XML
into an In Design document. This preference object does not have any e&ect on the interpretation
of XML elements in the IDML "le.
Schema Example 115. XMLExport Preference
XMLExportPreference_Object = element XMLExportPreference {
attribute ViewAfterExport { xsd:boolean }?,
attribute ExportFromSelected { xsd:boolean }?,
attribute FileEncoding { XMLFileEncoding_EnumValue }?,
attribute Ruby { xsd:boolean }?,
attribute ExcludeDtd { xsd:boolean }?,
attribute CopyOriginalImages { xsd:boolean }?,
attribute CopyOptimizedImages { xsd:boolean }?,
attribute CopyFormattedImages { xsd:boolean }?,
attribute ImageConversion { ImageConversion_EnumValue }?,
IDML File Format Specification
293 IDML File Reference: Preferences
attribute GIFOptionsPalette { GIFOptionsPalette_EnumValue }?,
attribute GIFOptionsInterlaced { xsd:boolean }?,
attribute JPEGOptionsQuality { JPEGOptionsQuality_EnumValue }?,
attribute JPEGOptionsFormat { JPEGOptionsFormat_EnumValue }?,
attribute AllowTransform { xsd:boolean }?,
attribute CharacterReferences { xsd:boolean }?,
attribute ExportUntaggedTablesFormat { XMLExportUntaggedTablesFormat_EnumValue
}?,
element Properties {
element PreferredBrowser {
(file_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue )
}?&
element TransformFilename {
(file_type, xsd:string ) |
(enum_type, XMLTransformFile_EnumValue )
}?
}
?
}
Table 141. XMLExport Preference Properties Represented as Attributes
Name Type Req Description
Allow Transform boolean no If true, transforms the X ML using an X S L T "le.
Character-
References
boolean no If true, replaces special characters with charac-
ter references.
Copy Formatted-
Images
boolean no If true, copies formatted images to the images
subfolder.
Copy Optimized-
Images
boolean no If true, copies optimized images to the images
subfolder.
Copy Original-
Images
boolean no If true, copies original images to the images
subfolder.
Exclude Dtd boolean no If true, excludes the D TD from the exported
X ML content.
Export From-
Selected
boolean no If true, exports X ML content from the selected
X ML element. If false, exports the entire docu-
ment.
Export Untagged-
Tables Format
XMLExport-
Untagged Tables-
Format_Enum Value
no The export format for untagged tables in tagged
stories. Can be None or CALS.
File Encoding XMLFile Encoding_
Enum Value
no The "le encoding type for exporting X ML con-
tent. Can be UTF8, UTF16, or Shift JIS.
GIFOptions-
Interlaced
boolean no If true, generates interlaced G I Fs. Note: Not
valid when image conversion is JPEG.
GIFOptions Palette GIFOptions-
Palette_Enum Value
no The color palette for G IF conversion. Note: Not
valid when image conversion is JPEG. Can be
Adaptive Palette, Macintosh Palette, Web-
Palette, or Windows Palette.
IDML File Format Specification
294 IDML File Reference: Preferences
Name Type Req Description
Image Conversion Image Conversion_
Enum Value
no The "le format to use for converted images.
Note: Valid only when copy optimized images
and/or copy formatted images is true. Can be
Automatic, JPEG, or GIF.
JPEGOptions Format JPEGOptions-
Format_Enum Value
no The formatting method for converted J P E G
images. Note: Not valid when image conver-
sion is GIF. Can be Baseline Encoding or
Progressive Encoding.
JPEGOptions-
Quality
JPEGOptions-
Quality_Enum Value
no The quality of converted J P E G images. Note: Not
valid when image conversion is GIF. Can be Low,
Medium, High, or Maximum.
Ruby boolean no If true, includes Ruby text in the exported X ML
content.
View After Export boolean no If true, displays exported X ML content in a
speci"ed viewer.
Table 142. XMLExport Preference Properties Represented as Elements
Name Description
Preferred Browser The preferred browser for viewing X ML.
Transform Filename The name of the X S L T "le. Note: Valid when allow transform is true.
6.3.8 XMLPreference
The <XMLPreference> element stores general XML preferences for an In Design document. This
preference object does not have any e&ect on the interpretation of XML elements in the IDML "le.
Schema Example 116. XMLPreference
XMLPreference_Object = element XMLPreference {
attribute DefaultStoryTagName { xsd:string }?,
attribute DefaultTableTagName { xsd:string }?,
attribute DefaultCellTagName { xsd:string }?,
attribute DefaultImageTagName { xsd:string }?,
element Properties {
element DefaultStoryTagColor { InDesignUIColorType_TypeDef }?&
element DefaultTableTagColor { InDesignUIColorType_TypeDef }?&
element DefaultCellTagColor { InDesignUIColorType_TypeDef }?&
element DefaultImageTagColor { InDesignUIColorType_TypeDef }?
}
?
}
Table 143. XMLPreference Properties Represented as Attributes
Name Type Req Description
Default Cell Tag-
Name
string no The name of the default tag to use for new table
cell elements. Note: Either speci"es an existing
tag or creates a new tag.
IDML File Format Specification
295 IDML File Reference: Preferences
Name Type Req Description
Default Image Tag-
Name
string no The default name for new image elements cre-
ated automatically.
Default Story Tag-
Name
string no The name of the default tag to use for new story
elements. Note: Either speci"es an existing tag
or creates a new tag.
Default Table Tag-
Name
string no The name of the default tag to use for new table
elements. Note: Either speci"es an existing tag
or creates a new tag.
Table 144. XMLPreference Properties Represented as Elements
Name Type Req Description
Default Cell Tag-
Color
In Design UIColor-
Type
no The color of the default cell tag, speci"ed either
as an array of ListItem elements, each in the
range 0 to 255 and representing R, G, and B val-
ues, or as a UIColor enumeration. Note: Valid
only when default cell tag name value creates a
new tag. Does not update the color of an existing
tag. .
Default Image Tag-
Color
In Design UIColor-
Type
no The color to give a new image tag, speci"ed
either as an array of ListItem elements, each
in the range 0 to 255 and representing R, G, and
B values, or as a UIColor enumeration. Note:
Used only when the tag needs to be created.
Default Story Tag-
Color
In Design UIColor-
Type
no The color of the default story tag, speci"ed either
as an array of ListItem elements, each in the
range 0 to 255 and representing R, G, and B val-
ues, or as a UIColor enumeration. Note: Valid
only when default story tag name value creates
a new tag. Does not update the color of an exist-
ing tag.
Default Table Tag-
Color
In Design UIColor-
Type
no The color of the default table tag, speci"ed either
as an array of ListItem elements, each in the
range 0 to 255 and representing R, G, and B val-
ues, or as a UIColor enumeration. Note: Valid
only when default table tag name value creates a
new tag. Does not update the color of an exist-
ing tag.
6.3.9 Export For Web Preference
The <Export For Web Preference> element stores the settings that are be used by the Export for
Web feature of In Design. This preference object does not have any e&ect on the interpretation of
layout elements (page items or stories, for example) in the IDML "le.
Schema Example 117. Export For Web Preference
ExportForWebPreference_Object = element ExportForWebPreference {
attribute CopyFormattedImages { xsd:boolean }?,
attribute CopyOptimizedImages { xsd:boolean }?,
attribute CopyOriginalImages { xsd:boolean }?,
IDML File Format Specification
296 IDML File Reference: Preferences
attribute ImageConversion { ImageConversion_EnumValue }?,
attribute GIFOptionsPalette { GIFOptionsPalette_EnumValue }?,
attribute GIFOptionsInterlaced { xsd:boolean }?,
attribute JPEGOptionsQuality { JPEGOptionsQuality_EnumValue }?,
attribute JPEGOptionsFormat { JPEGOptionsFormat_EnumValue }?
}
Table 145. Export For Web Preference Properties Represented as Attributes
Name Type Req Description
Copy Formatted-
Images
boolean no If true, copies formatted images to the images
subfolder.
Copy Optimized-
Images
boolean no If true, copies optimized images to the images
subfolder.
Copy Original-
Images
boolean no If true, copies original images to the images
subfolder.
GIFOptions-
Interlaced
boolean no If true, generates interlaced GIFs. Note: Not
valid when image conversion is JPEG.
GIFOptions Palette GIFOptions-
Palette_Enum Value
no The color palette for G IF conversion. Note: Not
valid when image conversion is JPEG. Can be
Adaptive Palette, Macintosh Palette,
Web Palette, or Windows Palette.
Image Conversion Image Conversion_
Enum Value
no The "le format to use for converted images.
Note: Valid only when copy optimized images
and/or copy formatted images is true. Can be
Automatic, JPEG, or GIF.
JPEGOptions Format JPEGOptions-
Format_Enum Value
no The formatting method for converted J P E G
images. Note: Not valid when image conver-
sion is GIF. Can be Baseline Encoding or
Progressive Encoding.
JPEGOptions-
Quality
JPEGOptions-
Quality_Enum Value
no The quality of converted J P E G images. Note: Not
valid when image conversion is GIF. Can be Low,
Medium, High, or Maximum.
6.3.10 Transparency Preference
The <Transparency Preference> element stores the default transparency settings for the
document. Values that you specify here will apply to all transparent objects in the document that
do not explicitly de"ne these attributes.
Schema Example 118. Transparency Preference
TransparencyPreference_Object = element TransparencyPreference {
attribute BlendingSpace { BlendingSpace_EnumValue }?,
attribute GlobalLightAngle { xsd:double {minInclusive="-180"
maxInclusive="180"} }?,
attribute GlobalLightAltitude { xsd:double {minInclusive="0"
maxInclusive="100"} }?
}
IDML File Format Specification
297 IDML File Reference: Preferences
Table 146. TransparencyPreference Properties Represented as Attributes
Name Type Req Description
Blending Space Blending Space_
Enum Value
no The transparency blending space. Can be Low,
Default, CMYK, or RGB.
Global Light-
Altitude
double no The global light altitude. Range: 0 to 100.
Global Light Angle double no The global light angle. Range: -180 to 180.
IDML Example 79. Transparency Preference
<Transparency Preference Self="d Transparency Preference1" Blending Space="CMYK"
Global Light Angle="120" Global Light Altitude="30"/>
6.3.11 Transparency Default Container Object
The default transparency setting for page items.
Schema Example 119. Transparency Default Container Object
TransparencyDefaultContainerObject_Object = element
TransparencyDefaultContainerObject {
(
TransparencySetting_Object?&
StrokeTransparencySetting_Object?&
FillTransparencySetting_Object?&
ContentTransparencySetting_Object?
)
}
6.3.12 Story Preference
The <Story Preference> element controls the default story preferences for stories in an In Design
document. Values that you specify here will apply to the story preferences of all stories that do not
explicitly de"ne these attributes.
Schema Example 120. Story Preference
StoryPreference_Object = element StoryPreference {
attribute OpticalMarginAlignment { xsd:boolean }?,
attribute OpticalMarginSize { xsd:double {minInclusive="0.1"
maxInclusive="1296"} }?,
attribute FrameType { FrameTypes_EnumValue }?,
attribute StoryOrientation { StoryHorizontalOrVertical_EnumValue }?,
attribute StoryDirection { StoryDirectionOptions_EnumValue }?
}
IDML Example 80. Story Preference
<Story Preference Self="d Story Preference1" Optical Margin Alignment="false" Optical-
Margin Size="12" Frame Type="Text Frame Type" Story Orientation="Horizontal"
Story Direction="Left To Right Direction"/>
IDML File Format Specification
298 IDML File Reference: Preferences
Table 147. Story Preference Properties Represented as Attributes
Name Type Req Description
Frame Type Frame Types_Enum-
Value
no The type of text frame. Can be Text Frame Type
or Frame Grid Type.
Optical Margin-
Alignment
boolean no If true, adjust the position of characters at the
edges of the frame to provide a better appear-
ance.
Optical Margin Size double no The point size used as a base for calculating opti-
cal margin alginment. (Range: 0.1 to 1296)
Story Direction Story Direction-
Options_Enum Value
no The direction of the story. Can be Left-
To Right Direction or Right To Left-
Direction.
Story Orientation Story Horizontal-
Or Vertical_Enum-
Value
no The direction of the text in the story. Can be
Horizontal or Vertical.
IDML File Format Specification
299 IDML File Reference: Preferences
6.3.13 Text Preference
The <Text Preference> element stores general text preferences for a document.
Schema Example 121. Text Preference
TextPreference_Object = element TextPreference {
attribute TypographersQuotes { xsd:boolean }?,
attribute HighlightHjViolations { xsd:boolean }?,
attribute HighlightKeeps { xsd:boolean }?,
attribute HighlightSubstitutedGlyphs { xsd:boolean }?,
attribute HighlightCustomSpacing { xsd:boolean }?,
attribute HighlightSubstitutedFonts { xsd:boolean }?,
attribute UseOpticalSize { xsd:boolean }?,
attribute UseParagraphLeading { xsd:boolean }?,
attribute SuperscriptSize { xsd:double {minInclusive="1" maxInclusive="200"} }?,
attribute SuperscriptPosition { xsd:double {minInclusive="-500"
maxInclusive="500"} }?,
attribute SubscriptSize { xsd:double {minInclusive="1" maxInclusive="200"} }?,
attribute SubscriptPosition { xsd:double {minInclusive="-500"
maxInclusive="500"} }?,
attribute SmallCap { xsd:double {minInclusive="1" maxInclusive="200"} }?,
attribute LeadingKeyIncrement { xsd:double {minInclusive="0.001"
maxInclusive="200"} }?,
attribute BaselineShiftKeyIncrement { xsd:double {minInclusive="0.001"
maxInclusive="200"} }?,
attribute KerningKeyIncrement { xsd:double {minInclusive="1"
maxInclusive="100"} }?,
attribute ShowInvisibles { xsd:boolean }?,
attribute JustifyTextWraps { xsd:boolean }?,
attribute AbutTextToTextWrap { xsd:boolean }?,
attribute ZOrderTextWrap { xsd:boolean }?,
attribute LinkTextFilesWhenImporting { xsd:boolean }?,
attribute HighlightKinsoku { xsd:boolean }?,
attribute QuoteCharactersRotatedInVertical { xsd:boolean }?,
attribute UseNewVerticalScaling { xsd:boolean }?,
attribute UseCidMojikumi { xsd:boolean }?,
attribute EnableStylePreviewMode { xsd:boolean }?,
attribute SmartTextReflow { xsd:boolean }?,
attribute AddPages { AddPageOptions_EnumValue }?,
attribute LimitToMasterTextFrames { xsd:boolean }?,
attribute PreserveFacingPageSpreads { xsd:boolean }?,
attribute DeleteEmptyPages { xsd:boolean }?
}
Table 148. Text Preference Properties Represented as Attributes
Name Type Req Description
Abut Text To Text-
Wrap
boolean no If true, moves wrapped text to the next available
leading increment below the text wrap objects.
Auto Page Deletion boolean no If true, deletes pages when changing content
results in empty pages.
IDML File Format Specification
300 IDML File Reference: Preferences
Name Auto Page Insertion Baseline Shift Key-
Increment
Enable Dynamic-
Autoflow
Enable Style-
Preview Mode
Highlight Custom-
Spacing
Highlight Hj-
Violations
Highlight Keeps Highlight Kinsoku Highlight-
Substituted Fonts
Highlight-
Substituted Glyphs
Justify Text Wraps Kerning Key-
Increment
Leading Key-
Increment
Link Text Files-
When Importing
Preserve Recto-
Verso
QuoteCharacters
RotatedInVertical
Restrict To Master-
Text Frames
Show Invisibles Small Cap Type Req Description
Auto Page-
Insertion_Enum-
Value
no Controls the addition of pages as content chang-
es. Can be At End Of Story, At End Of Section,
or At End Of Document.
double no The amount that the baseline shi% increases
each time the user presses the option/alt-shi%-
up arrow keys or decreases each time the user
presses the option/alt-shi%-down arrow keys.
(Range: .001 to 100)
boolean no If true, enable dynamic auto$ow.
boolean no If true, highlights character and paragraph
styles with colored backgrounds.
boolean no If true, highlights custom kerned or tracked
characters.
boolean no If true, highlights hyphenation and justi"cation
rule violations in the text.
boolean no If true, highlights paragraphs that violate keep
options.
boolean no If true, uses on-screen highlighting to identify
kinsoku.
boolean no If true, highlights missing fonts.
boolean no If true, highlights substituted glyphs.
boolean no If true, justi"es text around text wrap objects.
double no The amount the kerning value per 1000 ems
increases each time the user presses of the
option/alt-right arrow keys or decreases each
time the user presses the option/alt-le% arrow
keys. (Range: 1 to 100)
double no The amount that leading increases each time
the user presses the option/alt-up arrow keys or
decreases each time the user presses the option/
alt-down arrow keys. (Range: .001 to 200)
boolean no If true, links placed text "les and spreadsheet
"les. If false, embeds the "les.
boolean no If true, preserve right/le% page orientation.
boolean no If true, Japanese composer treats quotes as half
width and rotates them in vertical.
boolean no
boolean no If true, shows hidden characters.
double no The size of text formatted as small caps, speci"ed
as a percentage of the font size. (Range: 1 to 200)
IDML File Format Specification
301 IDML File Reference: Preferences
Name Type Req Description
Subscript Position double no The position of subscript characters, speci"ed as
a percentage of the regular leading. (Range: -500
to 500)
Subscript Size double no The size of subscript characters, speci"ed as a
percentage of the font size. (Range: 0 to 200)
Superscript-
Position
double no The position of superscript characters, speci-
"ed as a percentageage of the regular leading.
(Range: -500 to 500)
Superscript Size double no The size of superscript characters, speci"ed as a
percentageage of the font size. (Range: 0 to 200)
Typographers-
Quotes
boolean no If true, converts straight quotes to typographic
quotes.
Use Cid Mojikumi boolean no If true, uses the glyph CID to get the mojikumi
class of the character.
Use New Vertical-
Scaling
boolean no If true, reverses X and Y scaling on Roman char-
acters in vertical text.
Use Optical Size boolean no If true, automatically selects the correct optical
size.
Use Paragraph-
Leading
boolean no If true, applies the leading changes made to
a text range to the entire paragraph. If false,
applies leading changes only to the text range.
ZOrder Text Wrap boolean no If true, text wrap does not a&ect text on lay-
ers above the layer that contains the text wrap
object. If false, text wrap a&ects text on all vis-
ible layers.
6.3.14 Text Default
The <Text Default> element controls the default text formatting for an In Design document. For
all text that has been styled with the default “[Basic Paragraph]” style, this formatting is applied
as local overrides. Values that you specify here will apply to all text formatted using the “[Basic
Paragraph]” style that does not explicitly de"ne these attributes and elements. If you do not de"ne
these values, the corresponding values from the IDML defaults "le will be used.
Schema Example 122. Text Default
TextDefault_Object = element TextDefault {
attribute FontStyle { xsd:string }?,
attribute PointSize { xsd:double }?,
attribute KerningMethod { xsd:string }?,
attribute Tracking { xsd:double }?,
attribute Capitalization { Capitalization_EnumValue }?,
attribute Position { Position_EnumValue }?,
attribute Underline { xsd:boolean }?,
attribute StrikeThru { xsd:boolean }?,
attribute Ligatures { xsd:boolean }?,
attribute NoBreak { xsd:boolean }?,
attribute HorizontalScale { xsd:double }?,
attribute VerticalScale { xsd:double }?,
attribute BaselineShift { xsd:double }?,
IDML File Format Specification
302 IDML File Reference: Preferences
attribute Skew { xsd:double }?,
attribute FillTint { xsd:double }?,
attribute StrokeTint { xsd:double }?,
attribute StrokeWeight { xsd:double }?,
attribute OverprintStroke { xsd:boolean }?,
attribute OverprintFill { xsd:boolean }?,
attribute OTFFigureStyle { OTFFigureStyle_EnumValue }?,
attribute OTFOrdinal { xsd:boolean }?,
attribute OTFFraction { xsd:boolean }?,
attribute OTFDiscretionaryLigature { xsd:boolean }?,
attribute OTFTitling { xsd:boolean }?,
attribute OTFContextualAlternate { xsd:boolean }?,
attribute OTFSwash { xsd:boolean }?,
attribute UnderlineTint { xsd:double }?,
attribute UnderlineGapTint { xsd:double }?,
attribute UnderlineOverprint { xsd:boolean }?,
attribute UnderlineGapOverprint { xsd:boolean }?,
attribute UnderlineOffset { xsd:double }?,
attribute UnderlineWeight { xsd:double }?,
attribute StrikeThroughTint { xsd:double }?,
attribute StrikeThroughGapTint { xsd:double }?,
attribute StrikeThroughOverprint { xsd:boolean }?,
attribute StrikeThroughGapOverprint { xsd:boolean }?,
attribute StrikeThroughOffset { xsd:double }?,
attribute StrikeThroughWeight { xsd:double }?,
attribute FillColor { xsd:string }?,
attribute StrokeColor { xsd:string }?,
attribute AppliedLanguage { xsd:string }?,
attribute ParagraphKashidaWidth { xsd:double }?,
attribute FirstLineIndent { xsd:double }?,
attribute LeftIndent { xsd:double }?,
attribute RightIndent { xsd:double }?,
attribute SpaceBefore { xsd:double }?,
attribute SpaceAfter { xsd:double }?,
attribute Justification { Justification_EnumValue }?,
attribute SingleWordJustification { SingleWordJustification_EnumValue }?,
attribute AutoLeading { xsd:double }?,
attribute DropCapLines { xsd:short {minInclusive="0" maxInclusive="25"} }?,
attribute DropCapCharacters { xsd:short {minInclusive="0" maxInclusive="150"}
}?,
attribute KeepLinesTogether { xsd:boolean }?,
attribute KeepAllLinesTogether { xsd:boolean }?,
attribute KeepWithNext { xsd:short {minInclusive="0" maxInclusive="5"} }?,
attribute KeepFirstLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
attribute KeepLastLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
attribute StartParagraph { StartParagraph_EnumValue }?,
attribute Composer { xsd:string }?,
attribute MinimumWordSpacing { xsd:double }?,
attribute MaximumWordSpacing { xsd:double }?,
attribute DesiredWordSpacing { xsd:double }?,
attribute MinimumLetterSpacing { xsd:double }?,
attribute MaximumLetterSpacing { xsd:double }?,
attribute DesiredLetterSpacing { xsd:double }?,
attribute MinimumGlyphScaling { xsd:double }?,
IDML File Format Specification
303 IDML File Reference: Preferences
attribute MaximumGlyphScaling { xsd:double }?,
attribute DesiredGlyphScaling { xsd:double }?,
attribute RuleAbove { xsd:boolean }?,
attribute RuleAboveOverprint { xsd:boolean }?,
attribute RuleAboveLineWeight { xsd:double }?,
attribute RuleAboveTint { xsd:double }?,
attribute RuleAboveOffset { xsd:double }?,
attribute RuleAboveLeftIndent { xsd:double }?,
attribute RuleAboveRightIndent { xsd:double }?,
attribute RuleAboveWidth { RuleWidth_EnumValue }?,
attribute RuleAboveGapTint { xsd:double }?,
attribute RuleAboveGapOverprint { xsd:boolean }?,
attribute RuleBelow { xsd:boolean }?,
attribute RuleBelowLineWeight { xsd:double }?,
attribute RuleBelowTint { xsd:double }?,
attribute RuleBelowOffset { xsd:double }?,
attribute RuleBelowLeftIndent { xsd:double }?,
attribute RuleBelowRightIndent { xsd:double }?,
attribute RuleBelowWidth { RuleWidth_EnumValue }?,
attribute RuleBelowGapTint { xsd:double }?,
attribute HyphenateCapitalizedWords { xsd:boolean }?,
attribute Hyphenation { xsd:boolean }?,
attribute HyphenateBeforeLast { xsd:short {minInclusive="1" maxInclusive="15"}
}?,
attribute HyphenateAfterFirst { xsd:short {minInclusive="1" maxInclusive="15"}
}?,
attribute HyphenateWordsLongerThan { xsd:short {minInclusive="3"
maxInclusive="25"} }?,
attribute HyphenateLadderLimit { xsd:short {minInclusive="0" maxInclusive="25"}
}?,
attribute HyphenationZone { xsd:double }?,
attribute HyphenWeight { xsd:short {minInclusive="0" maxInclusive="10"} }?,
attribute AppliedParagraphStyle { xsd:string }?,
attribute AppliedCharacterStyle { xsd:string }?,
attribute LastLineIndent { xsd:double }?,
attribute HyphenateLastWord { xsd:boolean }?,
attribute OTFSlashedZero { xsd:boolean }?,
attribute OTFHistorical { xsd:boolean }?,
attribute OTFStylisticSets { xsd:int }?,
attribute GradientFillLength { xsd:double }?,
attribute GradientFillAngle { xsd:double }?,
attribute GradientStrokeLength { xsd:double }?,
attribute GradientStrokeAngle { xsd:double }?,
attribute GradientFillStart { UnitPointType_TypeDef }?,
attribute GradientStrokeStart { UnitPointType_TypeDef }?,
attribute KeepWithPrevious { xsd:boolean }?,
attribute SpanColumnType { SpanColumnTypeOptions_EnumValue }?,
attribute SplitColumnInsideGutter { xsd:double }?,
attribute SplitColumnOutsideGutter { xsd:double }?,
attribute SpanColumnMinSpaceBefore { xsd:double }?,
attribute SpanColumnMinSpaceAfter { xsd:double }?,
attribute RuleBelowOverprint { xsd:boolean }?,
attribute RuleBelowGapOverprint { xsd:boolean }?,
attribute DropcapDetail { xsd:int }?,
IDML File Format Specification
304 IDML File Reference: Preferences
attribute HyphenateAcrossColumns { xsd:boolean }?,
attribute KeepRuleAboveInFrame { xsd:boolean }?,
attribute IgnoreEdgeAlignment { xsd:boolean }?,
attribute OTFMark { xsd:boolean }?,
attribute OTFLocale { xsd:boolean }?,
attribute PositionalForm { PositionalForms_EnumValue }?,
attribute ParagraphDirection { ParagraphDirectionOptions_EnumValue }?,
attribute ParagraphJustification { ParagraphJustificationOptions_EnumValue }?,
attribute MiterLimit { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
attribute StrokeAlignment { TextStrokeAlign_EnumValue }?,
attribute EndJoin { OutlineJoin_EnumValue }?,
attribute OTFOverlapSwash { xsd:boolean }?,
attribute OTFStylisticAlternate { xsd:boolean }?,
attribute OTFJustificationAlternate { xsd:boolean }?,
attribute OTFStretchedAlternate { xsd:boolean }?,
attribute CharacterDirection { CharacterDirectionOptions_EnumValue }?,
attribute KeyboardDirection { CharacterDirectionOptions_EnumValue }?,
attribute DigitsType { DigitsTypeOptions_EnumValue }?,
attribute Kashidas { KashidasOptions_EnumValue }?,
attribute DiacriticPosition { DiacriticPositionOptions_EnumValue }?,
attribute XOffsetDiacritic { xsd:double }?,
attribute YOffsetDiacritic { xsd:double }?,
attribute ParagraphBreakType { ParagraphBreakTypes_EnumValue }?,
attribute PageNumberType { PageNumberTypes_EnumValue }?,
attribute AppliedNamedGrid { xsd:string }?,
attribute GridAlignFirstLineOnly { xsd:boolean }?,
attribute GridAlignment { GridAlignment_EnumValue }?,
attribute GridGyoudori { xsd:short }?,
attribute AutoTcy { xsd:short }?,
attribute AutoTcyIncludeRoman { xsd:boolean }?,
attribute KinsokuType { KinsokuType_EnumValue }?,
attribute KinsokuHangType { KinsokuHangTypes_EnumValue }?,
attribute BunriKinshi { xsd:boolean }?,
attribute Rensuuji { xsd:boolean }?,
attribute RotateSingleByteCharacters { xsd:boolean }?,
attribute LeadingModel { LeadingModel_EnumValue }?,
attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
attribute Tsume { xsd:double }?,
attribute LeadingAki { xsd:double }?,
attribute TrailingAki { xsd:double }?,
attribute CharacterRotation { xsd:double }?,
attribute Jidori { xsd:short }?,
attribute ShataiMagnification { xsd:double }?,
attribute ShataiDegreeAngle { xsd:double }?,
attribute ShataiAdjustRotation { xsd:boolean }?,
attribute ShataiAdjustTsume { xsd:boolean }?,
attribute Tatechuyoko { xsd:boolean }?,
attribute TatechuyokoXOffset { xsd:double }?,
attribute TatechuyokoYOffset { xsd:double }?,
attribute KentenTint { xsd:double }?,
attribute KentenStrokeTint { xsd:double }?,
attribute KentenWeight { xsd:double }?,
attribute KentenOverprintFill { AdornmentOverprint_EnumValue }?,
attribute KentenOverprintStroke { AdornmentOverprint_EnumValue }?,
IDML File Format Specification
305 IDML File Reference: Preferences
attribute KentenKind { KentenCharacter_EnumValue }?,
attribute KentenPlacement { xsd:double }?,
attribute KentenAlignment { KentenAlignment_EnumValue }?,
attribute KentenPosition { RubyKentenPosition_EnumValue }?,
attribute KentenFontSize { xsd:double }?,
attribute KentenXScale { xsd:double }?,
attribute KentenYScale { xsd:double }?,
attribute KentenCustomCharacter { xsd:string }?,
attribute KentenCharacterSet { KentenCharacterSet_EnumValue }?,
attribute RubyTint { xsd:double }?,
attribute RubyWeight { xsd:double }?,
attribute RubyOverprintFill { AdornmentOverprint_EnumValue }?,
attribute RubyOverprintStroke { AdornmentOverprint_EnumValue }?,
attribute RubyStrokeTint { xsd:double }?,
attribute RubyFontSize { xsd:double }?,
attribute RubyOpenTypePro { xsd:boolean }?,
attribute RubyXScale { xsd:double }?,
attribute RubyYScale { xsd:double }?,
attribute RubyType { RubyTypes_EnumValue }?,
attribute RubyAlignment { RubyAlignments_EnumValue }?,
attribute RubyPosition { RubyKentenPosition_EnumValue }?,
attribute RubyXOffset { xsd:double }?,
attribute RubyYOffset { xsd:double }?,
attribute RubyParentSpacing { RubyParentSpacing_EnumValue }?,
attribute RubyAutoAlign { xsd:boolean }?,
attribute RubyOverhang { xsd:boolean }?,
attribute RubyAutoScaling { xsd:boolean }?,
attribute RubyParentScalingPercent { xsd:double }?,
attribute RubyParentOverhangAmount { RubyOverhang_EnumValue }?,
attribute Warichu { xsd:boolean }?,
attribute WarichuSize { xsd:double }?,
attribute WarichuLines { xsd:short }?,
attribute WarichuLineSpacing { xsd:double }?,
attribute WarichuAlignment { WarichuAlignment_EnumValue }?,
attribute WarichuCharsAfterBreak { xsd:short }?,
attribute WarichuCharsBeforeBreak { xsd:short }?,
attribute OTFProportionalMetrics { xsd:boolean }?,
attribute OTFHVKana { xsd:boolean }?,
attribute OTFRomanItalics { xsd:boolean }?,
attribute ScaleAffectsLineHeight { xsd:boolean }?,
attribute CjkGridTracking { xsd:boolean }?,
attribute GlyphForm { AlternateGlyphForms_EnumValue }?,
attribute ParagraphGyoudori { xsd:boolean }?,
attribute RubyAutoTcyDigits { xsd:short }?,
attribute RubyAutoTcyIncludeRoman { xsd:boolean }?,
attribute RubyAutoTcyAutoScale { xsd:boolean }?,
attribute TreatIdeographicSpaceAsSpace { xsd:boolean }?,
attribute AllowArbitraryHyphenation { xsd:boolean }?,
attribute BulletsAndNumberingListType { ListType_EnumValue }?,
attribute NumberingExpression { xsd:string }?,
attribute BulletsTextAfter { xsd:string }?,
attribute NumberingLevel { xsd:int }?,
attribute NumberingContinue { xsd:boolean }?,
attribute NumberingStartAt { xsd:int }?,
IDML File Format Specification
306 IDML File Reference: Preferences
attribute NumberingApplyRestartPolicy { xsd:boolean }?,
attribute BulletsAlignment { ListAlignment_EnumValue }?,
attribute NumberingAlignment { ListAlignment_EnumValue }?,
element Properties {
element AppliedFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element Leading {
(unit_type, xsd:double ) |
(enum_type, Leading_EnumValue )
}?&
element UnderlineColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element UnderlineGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element UnderlineType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element StrikeThroughColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element StrikeThroughGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element StrikeThroughType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element BalanceRaggedLines {
(bool_type, xsd:boolean ) |
(enum_type, BalanceLinesStyle_EnumValue )
}?&
element RuleAboveColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleAboveGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleAboveType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleBelowColor {
(object_type, xsd:string ) |
IDML File Format Specification
307 IDML File Reference: Preferences
(string_type, xsd:string )
}?&
element RuleBelowGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleBelowType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element SpanSplitColumnCount {
(short_type, xsd:short {minInclusive="1" maxInclusive="40"} ) |
(enum_type, SpanColumnCountOptions_EnumValue )
}?&
element AllLineStyles { list_type, element ListItem {
record_type,
(
element AppliedCharacterStyle { object_type, xsd:string }&
element LineCount { long_type, xsd:int }&
element RepeatLast { long_type, xsd:int })
}*
}?&
element AllGREPStyles { list_type, element ListItem {
record_type,
(
element AppliedCharacterStyle { object_type, xsd:string }&
element GrepExpression { string_type, xsd:string })
}*
}?&
element AllNestedStyles { list_type, element ListItem {
record_type,
(
element AppliedCharacterStyle { object_type, xsd:string }&
element Delimiter {
(string_type, xsd:string ) |
(enum_type, NestedStyleDelimiters_EnumValue )
}&
element Repetition { long_type, xsd:int }&
element Inclusive { bool_type, xsd:boolean })
}*
}?&
element TabList { list_type, element ListItem {
record_type,
(
element Alignment { enum_type, TabStopAlignment_EnumValue }&
element AlignmentCharacter { string_type, xsd:string }&
element Leader { string_type, xsd:string }&
element Position { unit_type, xsd:double })
}*
}?&
element KinsokuSet {
(object_type, xsd:string ) |
(enum_type, KinsokuSet_EnumValue ) |
(string_type, xsd:string )
IDML File Format Specification
308 IDML File Reference: Preferences
}?&
element Mojikumi {
(object_type, xsd:string ) |
(string_type, xsd:string ) |
(enum_type, MojikumiTableDefaults_EnumValue )
}?&
element KentenFillColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element KentenStrokeColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element KentenFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element KentenFontStyle {
(string_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue )
}?&
element RubyFill {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RubyStroke {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RubyFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RubyFontStyle {
(string_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue )
}?&
element BulletChar {
attribute BulletCharacterType { BulletCharacterType_EnumValue },
attribute BulletCharacterValue { xsd:int }
}?&
element BulletsFont {
(object_type, xsd:string ) |
(string_type, xsd:string ) |
(enum_type, AutoEnum_EnumValue )
}?&
element BulletsFontStyle {
(string_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue ) |
(enum_type, AutoEnum_EnumValue )
}?&
element BulletsCharacterStyle {
(object_type, xsd:string ) |
IDML File Format Specification
309 IDML File Reference: Preferences
(string_type, xsd:string )
}?&
element NumberingCharacterStyle {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element AppliedNumberingList {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element NumberingFormat {
(enum_type, NumberingStyle_EnumValue ) |
(string_type, xsd:string )
}?&
element NumberingRestartPolicies {
attribute RestartPolicy { RestartPolicy_EnumValue },
attribute LowerLevel { xsd:int },
attribute UpperLevel { xsd:int }
}?
}
?
}
The <Text Defaults> element shares all of its attributes and elements with other text objects. Refer
to “Common Text Elements.”
6.3.15 Dictionary Preference
The <Dictionary Preference> element de"nes the language dictionaries used for spelling and
hyphenation in a document.
Schema Example 123. Dictionary Preference
DictionaryPreference_Object = element DictionaryPreference {
attribute Composition { ComposeUsing_EnumValue }?,
attribute MergeUserDictionary { xsd:boolean }?,
attribute RecomposeWhenChanged { xsd:boolean }?
}
6.3.16 Anchored Object Default
The <Anchored Object Default> element controls the default formatting applied to anchored
objects in an In Design document. Values that you specify here will apply to all anchored objects
that do not explicitly de"ne these attributes.
Schema Example 124. Anchored Object Default
AnchoredObjectDefault_Object = element AnchoredObjectDefault {
attribute AnchorContent { ContentType_EnumValue }?,
attribute InitialAnchorHeight { xsd:double }?,
attribute InitialAnchorWidth { xsd:double }?,
attribute AnchoredParagraphStyle { xsd:string }?,
attribute AnchoredObjectStyle { xsd:string }?
}
IDML File Format Specification
310 IDML File Reference: Preferences
IDML Example 81. Anchored Object Default
<Anchored Object Default Self="d Anchored Object Default1" Anchor Content="Unassigned"
Initial Anchor Height="72" Initial Anchor Width="72" Anchored Paragraph-
Style="Paragraph Style\k[No paragraph style]" Anchored Object Style="Object Style\
k[None]"/>
Table 149. Anchored Object Default Properties Represented as Attributes
Name Type Req Description
Anchor Content Content Type_Enum-
Value
no The initial frame type of a new anchored object.
Can be Unassigned, Graphic Type, or Text-
Type.
Anchored Object-
Style
string no The initial object style of a new anchored object.
Anchored-
Paragraph Style
string no The initial paragraph style of a new anchored
object. Note: Valid when anchor content is
Text Type.
Initial Anchor-
Height
double no The initial height of a new anchored object.
Initial Anchor-
Width
double no The initial width of a new anchored object.
6.3.17 Anchored Object Setting
The <Anchored Object Setting> element controls the default positioning for anchored objects in
an In Design document. Values that you specify here will apply to all anchored objects that do not
explicitly de"ne these attributes.
Schema Example 125. Anchored Object Setting
AnchoredObjectSetting_Object = element AnchoredObjectSetting {
attribute AnchoredPosition { AnchorPosition_EnumValue }?,
attribute SpineRelative { xsd:boolean }?,
attribute LockPosition { xsd:boolean }?,
attribute PinPosition { xsd:boolean }?,
attribute AnchorPoint { AnchorPoint_EnumValue }?,
attribute HorizontalAlignment { HorizontalAlignment_EnumValue }?,
attribute HorizontalReferencePoint { AnchoredRelativeTo_EnumValue }?,
attribute VerticalAlignment { VerticalAlignment_EnumValue }?,
attribute VerticalReferencePoint { VerticallyRelativeTo_EnumValue }?,
attribute AnchorXoffset { xsd:double }?,
attribute AnchorYoffset { xsd:double }?,
attribute AnchorSpaceAbove { xsd:double }?
}
IDML Example 82. Anchored Object Setting
<Anchored Object Setting Self="d Anchored Object Setting1" Anchored Position="Inline-
Position" Spine Relative="false" Lock Position="false" Pin Position="true" Anchor-
Point="Bottom Right Anchor" Horizontal Alignment="Left Align" Horizontal Reference-
Point="Text Frame" Vertical Alignment="Top Align" Vertical Reference Point="Line-
Baseline" Anchor Xoffset="0" Anchor Yoffset="0" Anchor Space Above="0"/>
IDML File Format Specification
311 IDML File Reference: Preferences
Table 150. Anchored Object Setting Properties Represented as Attributes
Name Type Req Description
Anchor Point Anchor Point_Enum-
Value
no The point in the anchored object to position.
Can be Top Left Anchor, Top Center Anchor,
Top Right Anchor, Left Center Anchor,
Center Anchor, Right Center Anchor,
Bottom Left Anchor, Bottom Center Anchor,
or Bottom Right Anchor.
Anchor Space Above double no The space above an above-line anchored object.
Anchor Xoffset double no The horizontal (x) o&set of the anchored object.
Anchor Yoffset double no The vertical (y) o&set of the anchored object.
Anchored Position Anchor Position_
Enum Value
no The position of the anchored object relative to
the anchor. Can be Inline Position, Above-
Line, Anchored.
Horizontal-
Alignment
Horizontal-
Alignment_Enum-
Value
no When anchored position is above line, the posi-
tion of the anchored object is relative to the text
area. When anchored position is custom, the
horizontal alignment of the anchored object
is set by the horizontal reference point. Note:
Not valid when anchored position is Inline-
Position. Can be Right Align, Left Align,
Center Align, Text Align
Horizontal-
Reference Point
Anchored Relative-
To_Enum Value
no The horizontal reference point on the page. Can
be Column Edge, Text Frame, Page Margins,
Page Edge, Anchor Location
Lock Position boolean no If true, prevents manual positioning of the
anchored object.
Pin Position boolean no If true, pins the position of the anchored object
within the text frame top and bottom.
Spine Relative boolean no If true, the position of the anchored object is rel-
ative to the binding spine of the page or spread.
Vertical Alignment Vertical-
Alignment_Enum-
Value
no The vertical alignment of the anchored object
reference point with the vertical reference point
on the page. Can be Top Align, Bottom-
Align, or Center Align.
Vertical-
Reference Point
Vertically-
Relative To_Enum-
Value
no The vertical reference point on the page. Can
be Column Edge, Text Frame, Page Margins,
Page Edge, Line Baseline, Line Xheight,
Line Ascent, Capheight, Top Of Leading.
6.3.18 Baseline Frame Grid Option
The <Baseline Frame Grid Option> element controls the default formatting of baseline frame grids
in an In Design document. Values that you specify here will apply to all baseline frame grids that
do not explicitly de"ne these attributes.
Schema Example 126. Baseline Frame Grid Option
BaselineFrameGridOption_Object = element BaselineFrameGridOption {
attribute UseCustomBaselineFrameGrid { xsd:boolean }?,
IDML File Format Specification
312 IDML File Reference: Preferences
attribute StartingOffsetForBaselineFrameGrid { xsd:double {minInclusive="0"
maxInclusive="8640"} }?,
attribute BaselineFrameGridRelativeOption { BaselineFrameGridRelativeOption_
EnumValue }?,
attribute BaselineFrameGridIncrement { xsd:double {minInclusive="1"
maxInclusive="8640"} }?,
element Properties {
element BaselineFrameGridColor { InDesignUIColorType_TypeDef }?
}
?
}
IDML Example 83. Baseline Frame Grid Option
<Baseline Frame Grid Option Self="d Baseline Frame Grid Option1"
Use Custom Baseline Frame Grid="false" Starting Offset For Baseline Frame Grid="0"
Baseline Frame Grid Relative Option="Top Of Inset" Baseline Frame Grid Increment="12">
<Properties>
<Baseline Frame Grid Color type="enumeration">Light Blue
</Baseline Frame Grid Color>
</Properties>
</Baseline Frame Grid Option>
Table 151. Baseline Frame Grid Option Properties Represented as Attributes
Name Type Req Description
Baseline Frame-
Grid Increment
double no The distance between grid lines. Range 1 to
8640.
Baseline Frame-
Grid Relative-
Option
Baseline Frame-
Grid Relative-
Option_Enum Value
no The object from which to o&set the custom base-
line grid. Can be Top Of Page, Top Of Margin,
Top Of Frame, or Top Of Inset.
Starting Offset-
For Baseline Frame-
Grid
double no The amount to o&set the baseline grid. Range 1
to 8640.
Use Custom-
Baseline Frame Grid
boolean no If true, uses a custom baseline frame grid.
Table 152. Baseline Frame Grid Option Properties Represented as Elements
Name Type Req Description
Baseline Frame-
Grid Color
In Design UIColor-
Type
no The color of the baseline frame grid, as a
UIColors enumeration or an RGB color as a list
of three <List Item> elements.
6.3.19 Footnote Option
The <Footnote Option> element controls the default formatting of footnotes in an In Design
document. Values that you specify here will apply to all footnotes that do not explicitly de"ne
these attributes and properties.
IDML File Format Specification
313 IDML File Reference: Preferences
Schema Example 127. Footnote Option
FootnoteOption_Object = element FootnoteOption {
attribute StartAt { xsd:int {minInclusive="1" maxInclusive="100000"} }?,
attribute Prefix { xsd:string }?,
attribute Suffix { xsd:string }?,
attribute FootnoteTextStyle { xsd:string }?,
attribute FootnoteMarkerStyle { xsd:string }?,
attribute SeparatorText { xsd:string }?,
attribute SpaceBetween { xsd:double {minInclusive="0" maxInclusive="864"} }?,
attribute Spacer { xsd:double {minInclusive="0" maxInclusive="864"} }?,
attribute FootnoteFirstBaselineOffset { FootnoteFirstBaseline_EnumValue }?,
attribute FootnoteMinimumFirstBaselineOffset { xsd:double {minInclusive="0"
maxInclusive="103680"} }?,
attribute EosPlacement { xsd:boolean }?,
attribute NoSplitting { xsd:boolean }?,
attribute RuleOn { xsd:boolean }?,
attribute RuleLineWeight { xsd:double {minInclusive="0" maxInclusive="1000"}
}?,
attribute RuleTint { xsd:double {minInclusive="0" maxInclusive="100"} }?,
attribute RuleGapTint { xsd:double {minInclusive="0" maxInclusive="100"} }?,
attribute RuleGapOverprint { xsd:boolean }?,
attribute RuleOverprint { xsd:boolean }?,
attribute RuleLeftIndent { xsd:double {minInclusive="-103680"
maxInclusive="103680"} }?,
attribute RuleWidth { xsd:double {minInclusive="0" maxInclusive="103680"} }?,
attribute RuleOffset { xsd:double {minInclusive="-15552" maxInclusive="15552"}
}?,
attribute ContinuingRuleOn { xsd:boolean }?,
attribute ContinuingRuleLineWeight { xsd:double {minInclusive="0"
maxInclusive="1000"} }?,
attribute ContinuingRuleTint { xsd:double {minInclusive="0" maxInclusive="100"}
}?,
attribute ContinuingRuleGapTint { xsd:double {minInclusive="0"
maxInclusive="100"} }?,
attribute ContinuingRuleOverprint { xsd:boolean }?,
attribute ContinuingRuleGapOverprint { xsd:boolean }?,
attribute ContinuingRuleLeftIndent { xsd:double {minInclusive="-103680"
maxInclusive="103680"} }?,
attribute ContinuingRuleWidth { xsd:double {minInclusive="0"
maxInclusive="103680"} }?,
attribute ContinuingRuleOffset { xsd:double {minInclusive="-15552"
maxInclusive="15552"} }?,
element Properties {
element FootnoteNumberingStyle {
(enum_type, FootnoteNumberingStyle_EnumValue ) |
(string_type, xsd:string )
}?&
element RestartNumbering {
(enum_type, FootnoteRestarting_EnumValue ) |
(string_type, xsd:string )
}?&
element ShowPrefixSuffix {
(enum_type, FootnotePrefixSuffix_EnumValue ) |
IDML File Format Specification
314 IDML File Reference: Preferences
(string_type, xsd:string )
}?&
element MarkerPositioning {
(enum_type, FootnoteMarkerPositioning_EnumValue ) |
(string_type, xsd:string )
}?&
element RuleType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element ContinuingRuleType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element ContinuingRuleColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element ContinuingRuleGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?
}
?
}
Table 153. Footnote Option Properties Represented as Attributes
Name Type Req Description
Continuing Rule-
Gap Overprint
boolean no If true, overprints the gap color of the rule above
continued footnote text. Note: Valid when con-
tinuing rule type is not solid.
Continuing Rule-
Gap Tint
double no The tint (as a percentage) of the gap color of the
rule above continued footnote text. (Range: 0 to
100) Note: Valid when continuing rule type is
not solid.
Continuing Rule-
Left Indent
double no The amount to le% indent the rule above contin-
ued footnote text. Note: Valid when continuing
rule on is true. Range: -103680 to 103680.
Continuing Rule-
Line Weight
double no The stroke weight of the rule above continued
footnote text. (Range: 0 to 1000) Note: Valid
when continuing rule on is true.
IDML File Format Specification
315 IDML File Reference: Preferences
Name Continuing Rule-
Offset
Continuing Rule On Continuing Rule-
Overprint
Continuing Rule-
Tint
Continuing Rule-
Width
Eos Placement Footnote First-
Baseline Offset
Footnote Marker-
Style
Footnote Minimum-
First Baseline-
Offset
Footnote Text Style No Splitting Prefix Rule Gap Overprint Rule Gap Tint Type Req Description
double no The vertical o&set of the rule above continued
footnote text. Note: Valid when continuing rule
on is true. Range: -15552 to 15552.
boolean no If true, draws a rule above footnote text that
continues from a previous column. Note: Valid
when no splitting is false or unde"ned.
boolean no If true, overprints the rule above continued
footnote text. Note: Valid when continuing rule
on is true.
double no The tint (as a percentage) of the rule above con-
tinued footnote text. (Range: 0 to 100) Note:
Valid when continuing rule type is not solid.
double no The length of the rule above continued footnote
text. Note: Valid when continuing rule on is
true. Range: 0 to 103680.
boolean no If true, footnotes at the end of the story are
placed just below the text. If false, footnotes at
the end of the story are placed at the bottom of
the column.
Footnote First-
Baseline_Enum-
Value
no The distance between the top of the foot-
note container and the footnote text. Can be
Ascent Offset, Cap Height, Leading Offset,
Embox Height, XHeight, or Fixed Height.
string no The character style to apply to footnote reference
numbers in the main text.
double no The minimum distance between the baseline of
the text and the top of the footnote container.
Range: 0 to 103680.
string no The paragraph style to apply to footnotes. Note:
The space before and a%er the paragraph de"ned
in the paragraph style is ignored for footnotes.
To de"ne space above and between footnotes,
see spacer and space between.
boolean no If true, footnotes cannot split across columns.
If false, footnotes $ow into succeeding columns
when the footnote text causes the footnote area
to expand upward to reach the footnote refer-
ence number in the main text.
string no The pre"x text of the footnote. (Limit: 0 to 100
characters)
boolean no If true, overprints the gap color of the rule above
the "rst footnote in the column. Note: Valid
when rule type is not solid.
double no The tint (as a percentage) of the gap color of
the rule above the "rst footnote in the column.
(Range: 0 to 100) Note: Valid when rule type is
not solid.
IDML File Format Specification
316 IDML File Reference: Preferences
Name Type Req Description
Rule Left Indent double no The amount to le% indent the rule above the "rst
footnote in the column. Note: Valid when rule
on is true. Range: -103860 to 103860.
Rule Line Weight double no The stroke weight of the rule above the "rst
footnote in the column. (Range: 0 to 1000) Note:
Valid when rule on is true.
Rule Offset double no The vertical o&set of the rule above the "rst foot-
note in the column. Note: Valid when rule on is
true. Range -15552 to 15552.
Rule On boolean no If true, draws a rule between the text and the
"rst footnote in the column.
Rule Overprint boolean no If true, overprints the rule above the "rst foot-
note in the column. Note: Valid when rule on is
true.
Rule Tint double no The tint (as a percentage) of the rule above the
"rst footnote in the column. (Range: 0 to 100)
Note: Valid when rule on is true.
Rule Width double no The length of the rule above the "rst footnote
in the column. Note: Valid when rule on is true.
Range: 0 to 103680.
Self string yes The unique ID of the object.
Separator Text string no The text to insert between the footnote marker
number and the footnote text. (Range: 0 to 100
characters)
Space Between double no The amount of vertical space between footnotes.
Note: The space before and space a%er de"ned
for the paragraph style applied to the footnote
is ignored. For information on the applied para-
graph style, see footnote text style. Range: 0 to
864.
Spacer double no The minimum amount of vertical space between
the bottom of the text column and the "rst foot-
note. Note: The space before amount de"ned in
the paragraph style applied to the footnote is
ignored for the "rst footnote. For information
on the applied paragraph style, see footnote text
style. ange: 0 to 864.
Start At int no The number at which to start footnote number-
ing. ange: 1 to 100000.
Suffix string no The suffix text of the footnote. (Limit: 0 to 100
characters)
IDML File Format Specification
317 IDML File Reference: Preferences
Table 154. Footnote Option Properties Represented as Elements
Name Type Req Description
Continuing Rule-
Color
string no A reference to the swatch (color, gradient, tint,
or mixed ink) applied to the stroke of the foot-
note continuing rule above. The string can con-
tain either an element reference (the value of the
Self attribute of the swatch), or the name of the
color (for example: Color/Black). Note: Valid
when continuing rule on is true.
Continuing Rule-
Gap Color
string no The swatch (color, gradient, tint, or mixed ink)
applied to the stroke gap of the footnote con-
tinuing rule above. The string can contain either
an element reference (the value of the Self
attribute of the swatch), or the name of the color
(for example: Color/Black). Note: Valid when
continuing rule on is true.
Continuing Rule-
Type
string no The stroke type of the rule above continued
footnote text. Note: Valid when continuing rule
on is true.
Footnote-
Numbering Style
Footnote Number-
ing Style_Enum-
Value or string
no The footnote numbering style.
Marker Positioning Footnote Marker-
Positioning_Enum-
Value or string
no The position of footnote reference numbers in
the main text.
Restart Numbering Footnote-
Restarting_Enum-
Value or string
no The point at which to restart footnote
numbering.
Rule Color string no The swatch (color, gradient, tint, or mixed ink)
applied to the stroke of the rule above the "rst
footnote in the column. The string can contain
either an element reference (the value of the
Self attribute of the swatch), or the name of the
color (for example: Color/Black). Note: Valid
when rule on is true.
Rule Gap Color string no The swatch (color, gradient, tint, or mixed ink)
applied to the stroke gap of the rule above the
"rst footnote in the column. The string can con-
tain either an element reference (the value of the
Self attribute of the swatch), or the name of the
color (for example: Color/Black). Note: Valid
when rule type is not solid.
Rule Type string no The stroke type of the rule above the "rst foot-
note in a column. Note: Valid when rule on is
true.
Show Prefix Suffix Footnote Prefix-
Suffix_Enum Value
or string
no The position of the footnote pre"x and/or suffix.
IDML Example 84. Footnote Options
<Footnote Option Self="d Footnote Option1" Start At="1" Prefix="" Suffix="" Footnote-
Text Style="Paragraph Style\k Normal Paragraph Style" Footnote Marker Style="Character-
IDML File Format Specification
318 IDML File Reference: Preferences
Style\k[No character style]" Separator Text="&#x9;" Space Between="0" Spacer="0"
Footnote First Baseline Offset="Leading Offset" Footnote Minimum First Baseline Offset="0"
Eos Placement="false" No Splitting="false" Rule On="true" Rule Line Weight="1" Rule-
Tint="100" Rule Gap Tint="100" Rule Gap Overprint="false" Rule Overprint="false" Rule-
Left Indent="0" Rule Width="72" Rule Offset="0" Continuing Rule On="true" Continuing-
Rule Line Weight="1" Continuing Rule Tint="100" Continuing Rule Gap Tint="100"
Continuing Rule Overprint="false" Continuing Rule Gap Overprint="false" Continuing Rule-
Left Indent="0" Continuing Rule Width="288" Continuing Rule Offset="0">
<Properties>
<Footnote Numbering Style type="enumeration">Arabic</Footnote Numbering Style>
<Restart Numbering type="enumeration">Dont Restart</Restart Numbering>
<Show Prefix Suffix type="enumeration">No Prefix Suffix</Show Prefix Suffix>
<Marker Positioning type="enumeration">Superscript Marker</Marker Positioning>
<Rule Type type="object">Stroke Style\k Solid</Rule Type>
<Rule Color type="object">Color\c Black</Rule Color>
<Rule Gap Color type="object">Swatch\c None</Rule Gap Color>
<Continuing Rule Type type="object">Stroke Style\k Solid</Continuing Rule Type>
<Continuing Rule Color type="object">Color\c Black</Continuing Rule Color>
<Continuing Rule Gap Color type="object">Swatch\c None</Continuing Rule Gap Color>
</Properties>
</Footnote Option>
6.3.20 Text Wrap Preference
The <Text Wrap Preference> element controls the default text wrap applied to page items in an In-
Design document. Values that you specify here will apply to all text wraps that do not explicitly
de"ne these attributes and elements.
Schema Example 128. Text Wrap Preference
TextWrapPreference_Object = element TextWrapPreference {
attribute Inverse { xsd:boolean }?,
attribute ApplyToMasterPageOnly { xsd:boolean }?,
attribute TextWrapSide { TextWrapSideOptions_EnumValue }?,
attribute TextWrapMode { TextWrapModes_EnumValue }?,
element Properties {
element TextWrapOffset { UnitRectangleBoundsType_TypeDef }?&
element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }*
}?
}
?
,
(
)
}
ContourOption_Object?
Schema Example 129. Contour Option
Contour Option_Object = element Contour Option {
attribute Contour Type { Contour Options Types_Enum Value }?,
attribute Include Inside Edges { xsd:boolean }?,
attribute Contour Path Name { xsd:string }?
}
IDML File Format Specification
319 IDML File Reference: Preferences
IDML Example 85. Text Wrap Preference
<Text Wrap Preference Self="d Text Wrap Preference1" Inverse="false" Apply To Master Page Only="false" Text Wrap Type="None"
Text Wrap Side="Both Sides">
<Properties>
<Text Wrap Offset Top="0" Left="0" Bottom="0" Right="0"/>
</Properties>
<Contour Option Self="d Text Wrap Preference1Contour Option1"
Contour Type="Same As Clipping" Include Inside Edges="false" Contour Path Name="$ID/"/>
</Text Wrap Preference>
Table 155. Contour Option Properties Represented as Attributes
Name Type Req Description
Contour Path Name string no The name of the alpha channel or Photoshop
path to use for the contour option. Valid only
when the contour options is photoshop path or
alpha channel.
Contour Type Contour Options-
Types_Enum Value
no The contour type. Can be Bounding Box,
Photoshop Path, Detect Edges, Alpha-
Channel, Graphic Frame, or Same As-
Clipping.
Include Inside-
Edges
boolean no If true, creates interior clipping paths within
the surrounding clipping path. Note: Valid
only when clipping type is Alpha Channel or
Detect Edges.
6.3.21 Document Preference
The <Document Preference> element contains various preferences for the document. Document
preferences de"ne the basic layout of the document. If you omit some or all of the properties set
in the <Document Preferences> element, In Design will apply its application default value to the
missing property as it opens the IDML "le.
Schema Example 130. Document Preference
DocumentPreference_Object = element DocumentPreference {
attribute PageHeight { xsd:double }?,
attribute PageWidth { xsd:double }?,
attribute CreatePrimaryTextFrame { xsd:boolean }?,
attribute PagesPerDocument { xsd:int }?,
attribute FacingPages { xsd:boolean }?,
attribute DocumentBleedTopOffset { xsd:double }?,
attribute DocumentBleedBottomOffset { xsd:double }?,
attribute DocumentBleedInsideOrLeftOffset { xsd:double }?,
attribute DocumentBleedOutsideOrRightOffset { xsd:double }?,
attribute DocumentBleedUniformSize { xsd:boolean }?,
attribute SlugTopOffset { xsd:double }?,
attribute SlugBottomOffset { xsd:double }?,
attribute SlugInsideOrLeftOffset { xsd:double }?,
attribute SlugRightOrOutsideOffset { xsd:double }?,
attribute DocumentSlugUniformSize { xsd:boolean }?,
attribute PreserveLayoutWhenShuffling { xsd:boolean }?,
attribute AllowPageShuffle { xsd:boolean }?,
IDML File Format Specification
320 IDML File Reference: Preferences
attribute OverprintBlack { xsd:boolean }?,
attribute ColumnGuideLocked { xsd:boolean }?,
attribute Intent { DocumentIntentOptions_EnumValue }?,
attribute PageBinding { PageBindingOptions_EnumValue }?,
attribute ColumnDirection { HorizontalOrVertical_EnumValue }?,
attribute MasterTextFrame { xsd:boolean }?,
attribute SnippetImportUsesOriginalLocation { xsd:boolean }?,
element Properties {
element ColumnGuideColor { InDesignUIColorType_TypeDef }?&
element MarginGuideColor { InDesignUIColorType_TypeDef }?
}
?
}
IDML Example 86. Document Preferences
<Document Preference Self="d Document Preference1" Page Height="792" Page Width="612"
Pages Per Document="1" Facing Pages="true" Document Bleed Top Offset="0" Document Bleed-
Bottom Offset="0" Document Bleed Inside Or Left Offset="0" Document Bleed Outside Or Right-
Offset="0" Document Bleed Uniform Size="true" Slug Top Offset="0" Slug Bottom Offset="0"
Slug Inside Or Left Offset="0" Slug Right Or Outside Offset="0" Document Slug Uniform-
Size="false" Preserve Layout When Shuffling="true" Allow Page Shuffle="true" Overprint-
Black="true" Page Binding="Left To Right" Column Direction="Horizontal" Column Guide-
Locked="true" Master Text Frame="false" Snippet Import Uses Original Location="false">
<Properties>
<Column Guide Color <Margin Guide Color type="enumeration">Violet</Column Guide Color>
type="enumeration">Magenta</Margin Guide Color>
</Properties>
</Document Preference>
Table 156. Document Preference Properties Represented as Attributes
Name Type Req Description
Allow Page Shuffle boolean no If true, guarantees that all new spreads added to
the document contain a maximum of two pages.
If false, allows pages to be added or moved into
existing spreads. For override information, see
preserve layout when shu'ing.
Column Direction Horizontal Or-
Vertical_Enum-
Value
yes The direction of text in the column
Column Guide Locked boolean no If true, locks column guides.
Document Bleed-
Bottom Offset
double no The amount to o&set the bottom document
bleed. Note: To set the bleed bottom o&set, doc-
ument bleed uniform size must be false.
Document Bleed-
Inside Or Left-
Offset
double no The amount to o&set the inside or le% document
bleed. Note: To set the bleed inside or le% o&set,
document bleed uniform size must be false.
Document Bleed-
Outside Or Right-
Offset
double no The amount to o&set the outside or right docu-
ment bleed. Note: To set the bleed outside or
right o&set, document bleed uniform size must
be false.
IDML File Format Specification
321 IDML File Reference: Preferences
Name Document Bleed Top-
Offset
Document Bleed-
Uniform Size
Document Slug-
Uniform Size
Facing Pages Inte nt Master Text Frame Overprint Black Page Binding Page Height Page Width Pages Per Document Preserve Layout-
When Shuffling
Slug Bottom Offset Slug Inside Or Left-
Offset
Slug Right Or-
Outside Offset
Slug Top Offset Snippet Import-
Uses Original-
Location
CreatePrimary
TextFrame
Type Req Description
double no The amount to o&set the top document bleed.
boolean no If true, uses the document bleed top o&set value
for bleed o&set measurements on all sides of the
document. The default setting is true.
boolean no If true, uses the slug top o&set value for slug
measurements on all sides of the doucment. The
default value is false.
boolean no If true, the document has facing pages.
Document Intent-
Options_EnumValue
no Can be PrintIntent or WebIntent.
boolean no If true, the document A-master has auto text-
frames.
boolean no If true, overprints black when saving the docu-
ment.
Page Binding-
Options_Enum Value
yes The page binding. Use Default, Right To Left,
or Left To Right.
double no The height of the page.
double no The width of the page.
int no The number of pages in the document. (Range:
1 to 9999)
boolean no If true, preserves the layout of spreads that con-
tained more than two pages when allow page
shu'e was turned on. If false, changes multi-
page spreads to two-page spreads if the spreads
were created or changed since allow page shu'e
was turned on.
double no The amount to o&set the bottom slug. Note: To
set the slug bottom o&set, document slug uni-
form size must be false.
double no The amount to o&set the inside or le% slug. Note:
To set the slug inside or le% o&set, document
slug uniform size must be false.
double no The amount to o&set the outside or right slug.
Note: To set the slug right or outside o&set, doc-
ument slug uniform size must be false.
double no The amount to o&set the top slug.
boolean no If true, causes UI-based snippet import to use
original location for page items.
boolean no If true, the document A-master has primary text
frames when a new document is created.
IDML File Format Specification
322 IDML File Reference: Preferences
Table 157. Document Preference Properties Represented as Elements
Name Type Req Description
Column Guide-
ColorGrid Color
In Design UIColor-
Type
no The color of the column guides, as a UIColors
enumeration or an RGB color as a list of three
<List Item> elements.
Margin Guide Color In Design UIColor-
Type
no The color of the margin guides, as a UIColors
enumeration or an RGB color as a list of three
<List Item> elements.
6.3.22 Grid Preference
The <Grid Preference> element stores the grid preferences for the document. Document grid
preferences for the baseline grid can have an e&ect on all text frames that do not speci"cally
de"ne a baseline frame grid (depending on the state of the Align to Baseline setting of the
paragraphs in the text frames). For more on this topic, refer to the In Design online help.
Schema Example 131. Grid Preference
GridPreference_Object = element GridPreference {
attribute DocumentGridShown { xsd:boolean }?,
attribute DocumentGridSnapto { xsd:boolean }?,
attribute HorizontalGridlineDivision { xsd:double {minInclusive="0.01"
maxInclusive="1000"} }?,
attribute VerticalGridlineDivision { xsd:double {minInclusive="0.01"
maxInclusive="1000"} }?,
attribute HorizontalGridSubdivision { xsd:int {minInclusive="1"
maxInclusive="1000"} }?,
attribute VerticalGridSubdivision { xsd:int {minInclusive="1"
maxInclusive="1000"} }?,
attribute GridsInBack { xsd:boolean }?,
attribute BaselineGridShown { xsd:boolean }?,
attribute BaselineStart { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
attribute BaselineDivision { xsd:double {minInclusive="1" maxInclusive="8640"}
}?,
attribute BaselineViewThreshold { xsd:double {minInclusive="5"
maxInclusive="4000"} }?,
attribute BaselineGridRelativeOption { BaselineGridRelativeOption_EnumValue }?,
element Properties {
element GridColor { InDesignUIColorType_TypeDef }?&
element BaselineColor { InDesignUIColorType_TypeDef }?
}
?
}
IDML Example 87. Grid Preference
<Grid Preference Self="d Grid Preference1" Document Grid Shown="false" Document Grid-
Snapto="false" Horizontal Gridline Division="72" Vertical Gridline Division="72"
Horizontal Grid Subdivision="8" Vertical Grid Subdivision="8" Grids In Back="true"
Baseline Grid Shown="false" Baseline Start="36" Baseline Division="12" Baseline View-
Threshold="75" Baseline Grid Relative Option="Top Of Page Of Baseline Grid Relative Option">
<Properties>
<Grid Color type="enumeration">Light Gray</Grid Color>
<Baseline Color type="enumeration">Light Blue</Baseline Color>
IDML File Format Specification
323 IDML File Reference: Preferences
</Properties>
</Grid Preference>
Table 158. Grid Preference Properties Represented as Attributes
Name Type Req Description
Baseline Division double no The amount of space between baseline grid lines.
Range: 1 to 8640.
Baseline Grid-
Relative Option
Baseline Grid-
Relative Option_
Enum Value
no The zero point for the baseline grid o&set.
Baseline Grid Shown boolean no If true, displays the baseline grid.
Baseline Start double no The amount to o&set the baseline grid from the
zero point. Range: 0 to 1000.
Baseline View-
Threshold
double no The magni"cation (as a percentage) less than
which ruler guides do not appear. (Range: 5 to
4000)
Document Grid Shown boolean no If true, displays the document grid.
Document Grid-
Snapto
boolean no If true, an object snaps to the nearest grid line
when the object is created, moved, or resized.
Grids In Back boolean no If true, places grids behind all other objects on
the spread.
Horizontal Grid-
Subdivision
int no The number of rows into which to subdivide the
space between horizontal document grid lines.
Range: 1 to 1000.
Horizontal-
Gridline Division
double no The amount of space between major horizontal
lines in the document grid. Range: .01 to 1000.
Vertical Grid-
Subdivision
int no The number of columns into which to subdivide
the space between vertical document grid lines.
Range: .01 to 1000.
Vertical Gridline-
Division
double no The amount of space between major vertical
lines in the document grid. Range: .01 to 1000.
Table 159. Grid Preference Properties Represented as Elements
Name Type Req Description
Baseline Color In Design UIColor-
Type
no The color of the baseline grid, as a UIColors
enumeration or an RGB color as a list of three
<List Item> elements (in the order R, G, B).
Grid Color In Design UIColor-
Type
no The color of the document grid, as a UIColors
enumeration or an RGB color as a list of three
<List Item> elements (in the order R, G, B).
6.3.23 Guide Preference
The <Guide Preference> element stores the guide preferences for the document.
IDML File Format Specification
324 IDML File Reference: Preferences
Schema Example 132. Guide Preference
GuidePreference_Object = element GuidePreference {
attribute GuidesInBack { xsd:boolean }?,
attribute GuidesShown { xsd:boolean }?,
attribute GuidesLocked { xsd:boolean }?,
attribute GuidesSnapto { xsd:boolean }?,
attribute RulerGuidesViewThreshold { xsd:double }?,
element Properties {
element RulerGuidesColor { InDesignUIColorType_TypeDef }?
}
?
}
IDML Example 88. Guide Preference
<Guide Preference Self="d Guide Preference1" Guides In Back="false" Guides Shown="true"
Guides Locked="false" Guides Snapto="true" Ruler Guides View Threshold="5">
<Properties>
<Ruler Guides Color </Properties>
</Guide Preference>
type="enumeration">Cyan</Ruler Guides Color>
Table 160. Guide Preference Properties Represented as Attributes
Name Type Req Description
Guides In Back boolean no If true, places guides behind all other objects on
the spread.
Guides Locked boolean no If true, guides cannot be moved, added, or
deleted.
Guides Shown boolean no If true, displays the guides.
Guides Snapto boolean no If true, an object within the speci"ed range
snaps to the nearest guide when the object is cre-
ated, moved, or resized. For range information,
see guide snapto zone.
Ruler Guides View-
Threshold
double no The magni"cation (as a percentage) less than
which ruler guides do not appear. (Range: 5 to
4000)
Table 161. Guide Preference Properties Represented as Elements
Name Type Req Description
Ruler Guides Color In Design UIColor-
Type
no The color of the ruler guides, as a UIColors
enumeration or an RGB color as a list of three
<List Item> elements (in the order R, G, B).
6.3.24 Margin Preference
The <Margin Preference> element controls the default margin and column settings for the pages
in a spread. Values that you specify here will apply to the margin preferences of all pages where
you have not explicitly de"ned these attributes and elements.
IDML File Format Specification
325 IDML File Reference: Preferences
Schema Example 133. Margin Preference
MarginPreference_Object = element MarginPreference {
attribute ColumnCount { xsd:int {minInclusive="1" maxInclusive="216"} }?,
attribute ColumnGutter { xsd:double {minInclusive="0" maxInclusive="1440"} }?,
attribute Top { xsd:double }?,
attribute Bottom { xsd:double }?,
attribute Left { xsd:double }?,
attribute Right { xsd:double }?,
attribute ColumnDirection { HorizontalOrVertical_EnumValue }?,
attribute ColumnsPositions { list { xsd:double * } }?
}
6.3.25 Pasteboard Preference
The <Pasteboard Preference> element controls the height of the pasteboard (through the
Minimum Space Above And Below attribute) and colors used to display the pasteboard and pasteboard
guides.
Schema Example 134. Pasteboard Preference
PasteboardPreference_Object = element PasteboardPreference {
attribute PasteboardMargins { list { xsd:double ,xsd:double } }?,
attribute MinimumSpaceAboveAndBelow { xsd:double }?,
element Properties {
element PreviewBackgroundColor { InDesignUIColorType_TypeDef }?&
element BleedGuideColor { InDesignUIColorType_TypeDef }?&
element SlugGuideColor { InDesignUIColorType_TypeDef }?
}
?
}
Table 162. Pasteboard Preference Properties Represented as Attributes
Name Type Req Description
Minimum Space-
Above And Below
double no The minimum space above and below a page.
Table 163. Pasteboard Preference Properties Represented as Elements
Name Type Req Description
Bleed Guide Color In Design UIColor-
Type
no The color of the bleed guides, as a UIColors
enumeration or an RGB color as a list of three
<List Item> elements (in the order R, G, B).
Preview-
Background Color
In Design UIColor-
Type
no The color of the pasteboard background, as a
UIColors enumeration or an RGB color as a list
of three <List Item> elements (in the order
R, G, B).
Slug Guide Color In Design UIColor-
Type
no The color of the slug guides, as a UIColors
enumeration or an RGB color as a list of three
<List Item> elements (in the order R, G, B).
IDML File Format Specification
326 IDML File Reference: Preferences
6.3.26 View Preference
The <View Preference> element controls the measurement units, ruler origin, and other user
interface properties of the document.
Note: Changing the measurement units in the <View Preference> element only changes the units
displayed and used in the In Design user interface a%er you have opened the IDML document.
Measurement units inside the XML "les in an IDML package are always points.
Schema Example 135. View Preference
ViewPreference_Object = element ViewPreference {
attribute PointsPerInch { xsd:double {minInclusive="60" maxInclusive="80"} }?,
attribute HorizontalCustomPoints { xsd:double {minInclusive="4"
maxInclusive="256"} }?,
attribute VerticalCustomPoints { xsd:double {minInclusive="4"
maxInclusive="256"} }?,
attribute StrokeMeasurementUnits { MeasurementUnits_EnumValue }?,
attribute GuideSnaptoZone { xsd:int {minInclusive="1" maxInclusive="36"} }?,
attribute CursorKeyIncrement { xsd:double {minInclusive="0.001"
maxInclusive="100"} }?,
attribute HorizontalMeasurementUnits { MeasurementUnits_EnumValue }?,
attribute VerticalMeasurementUnits { MeasurementUnits_EnumValue }?,
attribute RulerOrigin { RulerOrigin_EnumValue }?,
attribute ShowRulers { xsd:boolean }?,
attribute ShowFrameEdges { xsd:boolean }?,
attribute LineMeasurementUnits { MeasurementUnits_EnumValue }?,
attribute TypographicMeasurementUnits { MeasurementUnits_EnumValue }?,
attribute TextSizeMeasurementUnits { MeasurementUnits_EnumValue }?,
attribute PrintDialogMeasurementUnits { MeasurementUnits_EnumValue }?,
attribute ShowNotes { xsd:boolean }?
}
Table 164. View Preference Properties Represented as Attributes
Name Type Req Description
Cursor Key-
Increment
double no The distance to move a speci"ed object when an
arrow key is pressed. (Range: 0.001 to 100.)
Guide Snapto Zone int no The range (in pixels) within which an object
snaps to guides. (Range: 1 to 36) Note: Snapping
occurs only when guides are shown.
Horizontal Custom-
Points
double no The distance (in points) between major tick
marks on the horizontal ruler. (Range: 4 to 256)
Valid only when horizontal measurement units
is custom.
Horizontal-
Measurement Units
Measurement Units_
Enum Value
no The measurement unit for the horizontal ruler
and other horizontally-measured spaces such as
grid columns, horizontal o&sets, column gut-
ters, or others. Can be Points, Picas, Inches,
Inches Decimal, Millimeters, Centimeters,
Ciceros, Q, Ha, American Points, Custom,
Agates, U, Bai, or Mil.
IDML File Format Specification
327 IDML File Reference: Preferences
Name Type Req Description
Line Measurement-
Units
Measurement Units_
Enum Value
no Can be Points, Picas, Inches, Inches-
Decimal, Millimeters, Centimeters,
Ciceros, Q, Ha, American Points, Custom,
Agates, U, Bai, or Mil.
Points Per Inch double no The number of points per inch, typically 72.
(Range: 60 to 80)
Print Dialog-
Measurement Units
Measurement Units_
Enum Value
no The measurement units used in the Print dialog
box. Can be Points, Picas, Inches, Inches-
Decimal, Millimeters, Centimeters,
Ciceros, Q, Ha, American Points, Custom,
Agates, U, Bai, or Mil.
Ruler Origin Ruler Origin_Enum-
Value
no The default zero point at the intersection of the
vertical and horizontal rulers and the scope of
the horizontal ruler. Can be Spread Origin,
Page Origin, Spine Origin.
Show Frame Edges boolean no If true, displays borders of unselected frames
and the diagonal lines in empty unselected
frames.
Show Notes boolean no If true, notes are displayed.
Show Rulers boolean no If true, displays the horizontal and vertical
rulers.
Text Size-
Measurement Units
Measurement Units_
Enum Value
no The measurement units used for text size. Can
be Points, Picas, Inches, Inches Decimal,
Millimeters, Centimeters, Ciceros, Q, Ha,
American Points, Custom, Agates, U, Bai, or
Mil.
Typographic-
Measurement Units
Measurement Units_
Enum Value
no The measurement units used for type format-
ting properties (other than text size). Can be
Points, Picas, Inches, Inches Decimal,
Millimeters, Centimeters, Ciceros, Q, Ha,
American Points, Custom, Agates, U, Bai, or
Mil.
Vertical Custom-
Points
double no The distance (in points) between major tick
marks on the vertical ruler. (Range: 4 to 256)
Valid only when Vertical Measurement Units
is custom.
Vertical-
Measurement Units
Measurement Units_
Enum Value
no The measurement unit for the vertical ruler and
other vertically-measured spaces such as grid
rows, vertical o&sets, row heights, or others. Can
be Points, Picas, Inches, Inches Decimal,
Millimeters, Centimeters, Ciceros, Q, Ha,
American Points, Custom, Agates, U, Bai, or
Mil.
6.3.27 Print Preference
The <Print Preference> element stores the printing preferences for the document.
Schema Example 136. Print Preference
PrintPreference_Object = element PrintPreference {
IDML File Format Specification
328 IDML File Reference: Preferences
attribute PrintFile { xsd:string }?,
attribute Copies { xsd:int }?,
attribute Collating { xsd:boolean }?,
attribute ReverseOrder { xsd:boolean }?,
attribute Sequence { Sequences_EnumValue }?,
attribute PrintSpreads { xsd:boolean }?,
attribute PrintMasterPages { xsd:boolean }?,
attribute PrintNonprinting { xsd:boolean }?,
attribute PrintBlankPages { xsd:boolean }?,
attribute PrintGuidesGrids { xsd:boolean }?,
attribute PaperOffset { xsd:double }?,
attribute PaperGap { xsd:double }?,
attribute PaperTransverse { xsd:boolean }?,
attribute PrintPageOrientation { PrintPageOrientation_EnumValue }?,
attribute PagePosition { PagePositions_EnumValue }?,
attribute ScaleMode { ScaleModes_EnumValue }?,
attribute ScaleWidth { xsd:double }?,
attribute ScaleHeight { xsd:double }?,
attribute ScaleProportional { xsd:boolean }?,
attribute Thumbnails { xsd:boolean }?,
attribute ThumbnailsPerPage { ThumbsPerPage_EnumValue }?,
attribute Tile { xsd:boolean }?,
attribute TilingType { TilingTypes_EnumValue }?,
attribute TilingOverlap { xsd:double }?,
attribute AllPrinterMarks { xsd:boolean }?,
attribute CropMarks { xsd:boolean }?,
attribute BleedMarks { xsd:boolean }?,
attribute RegistrationMarks { xsd:boolean }?,
attribute ColorBars { xsd:boolean }?,
attribute PageInformationMarks { xsd:boolean }?,
attribute MarkLineWeight { MarkLineWeight_EnumValue }?,
attribute MarkOffset { xsd:double }?,
attribute UseDocumentBleedToPrint { xsd:boolean }?,
attribute BleedTop { xsd:double {minInclusive="0" maxInclusive="432"} }?,
attribute BleedBottom { xsd:double {minInclusive="0" maxInclusive="432"} }?,
attribute BleedInside { xsd:double {minInclusive="0" maxInclusive="432"} }?,
attribute BleedOutside { xsd:double {minInclusive="0" maxInclusive="432"} }?,
attribute IncludeSlugToPrint { xsd:boolean }?,
attribute ColorOutput { ColorOutputModes_EnumValue }?,
attribute TextAsBlack { xsd:boolean }?,
attribute Trapping { Trapping_EnumValue }?,
attribute Flip { Flip_EnumValue }?,
attribute Negative { xsd:boolean }?,
attribute CompositeAngle { xsd:double }?,
attribute CompositeFrequency { xsd:double }?,
attribute SimulateOverprint { xsd:boolean }?,
attribute PrintCyan { xsd:boolean }?,
attribute CyanAngle { xsd:double }?,
attribute CyanFrequency { xsd:double }?,
attribute PrintMagenta { xsd:boolean }?,
attribute MagentaAngle { xsd:double }?,
attribute MagentaFrequency { xsd:double }?,
attribute PrintYellow { xsd:boolean }?,
attribute YellowAngle { xsd:double }?,
IDML File Format Specification
329 IDML File Reference: Preferences
attribute YellowFrequency { xsd:double }?,
attribute PrintBlack { xsd:boolean }?,
attribute BlackAngle { xsd:double }?,
attribute BlackFrequency { xsd:double }?,
attribute SendImageData { ImageDataTypes_EnumValue }?,
attribute FontDownloading { FontDownloading_EnumValue }?,
attribute DownloadPPDFonts { xsd:boolean }?,
attribute PostScriptLevel { PostScriptLevels_EnumValue }?,
attribute DataFormat { DataFormat_EnumValue }?,
attribute SourceSpace { SourceSpaces_EnumValue }?,
attribute Intent { RenderingIntent_EnumValue }?,
attribute OPIImageReplacement { xsd:boolean }?,
attribute OmitEPS { xsd:boolean }?,
attribute OmitPDF { xsd:boolean }?,
attribute OmitBitmaps { xsd:boolean }?,
attribute FlattenerPresetName { xsd:string }?,
attribute IgnoreSpreadOverrides { xsd:boolean }?,
attribute BleedChain { xsd:boolean }?,
attribute PreserveColorNumbers { xsd:boolean }?,
attribute BitmapPrinting { xsd:boolean }?,
attribute BitmapResolution { xsd:int {minInclusive="72" maxInclusive="1200"} }?,
attribute PrintLayers { PrintLayerOptions_EnumValue }?,
attribute DeviceType { xsd:int }?,
attribute PrintTo { xsd:int }?,
attribute PPDFile { xsd:string }?,
attribute PrintToDisk { xsd:boolean }?,
attribute PrintRecord { xsd:string }?,
attribute PrintResolution { xsd:double }?,
attribute PaperSizeSelector { xsd:string }?,
attribute PaperHeightRange { list { xsd:double ,xsd:double } }?,
attribute PaperWidthRange { list { xsd:double ,xsd:double } }?,
attribute PaperOffsetRange { list { xsd:double ,xsd:double } }?,
attribute SeparationScreening { xsd:string }?,
attribute CompositeScreening { xsd:string }?,
attribute SpotAngle { xsd:double }?,
attribute SpotFrequency { xsd:double }?,
element Properties {
element ActivePrinterPreset {
(enum_type, PrinterPresetTypes_EnumValue ) |
(string_type, xsd:string )
}?&
element Printer {
(enum_type, Printer_EnumValue ) |
(string_type, xsd:string )
}?&
element PPD {
(enum_type, PPDValues_EnumValue ) |
(string_type, xsd:string )
}?&
element PaperSize {
(enum_type, PaperSizes_EnumValue ) |
(string_type, xsd:string )
}?&
element PaperHeight {
IDML File Format Specification
330 IDML File Reference: Preferences
(enum_type, PaperSize_EnumValue ) |
(unit_type, xsd:double )
}?&
element PaperWidth {
(enum_type, PaperSize_EnumValue ) |
(unit_type, xsd:double )
}?&
element MarkType {
(enum_type, MarkTypes_EnumValue ) |
(string_type, xsd:string )
}?&
element Screening {
(enum_type, Screeening_EnumValue ) |
(string_type, xsd:string )
}?&
element Profile {
(enum_type, Profile_EnumValue ) |
(string_type, xsd:string )
}?&
element CRD {
(enum_type, ColorRenderingDictionary_EnumValue ) |
(string_type, xsd:string )
}?&
element PageRange {
(enum_type, PageRange_EnumValue ) |
(string_type, xsd:string )
}?&
element PaperSizeRect { RectangleBoundsType_TypeDef }?&
element ImageablePaperSizeRect { RectangleBoundsType_TypeDef }?
}
?
}
Table 165. Print Preference Properties Represented as Attributes
Name Type Req Description
All Printer Marks boolean no If true, prints all printer marks. If false, prints
speci"ed printer marks.
Bitmap Printing boolean no If true, uses bitmap printing.
Bitmap Resolution int no The resolution for bitmap printing. (Range: 72 to
1200) Note: Valid when bitmap printing is true.
Black Angle double no The angle override for black ink. (Range: 0 to
360)
Black Frequency double no The frequency override for black ink. (Range: 1
to 500)
Bleed Bottom double no The height of the bleed area at the bottom of the
page. Note: Valid only when use document bleed
to print is true.
IDML File Format Specification
331 IDML File Reference: Preferences
Name Bleed Chain Bleed Inside Bleed Marks Bleed Outside Bleed Top Collating Color Bars Color Output Composite Angle Composite-
Frequency
Composite-
Screening
Copies Crop Marks Cyan Angle Cyan Frequency Data Format Device Type Download PPDFonts Flattener Preset-
Name
Type Req Description
boolean no If true, forces all bleed area settings to be the
same, using the most recent bleed measurement
setting. If false, allows bleed top, bleed bottom,
bleed inside, and bleed outside to have di&erent
measurements.
double no The width of the bleed area at the inside of the
page. Note: Valid only when use document bleed
to print is true. (Range: 0 to 432)
boolean no If true, print bleed marks.
double no The width of the bleed area at the outside of the
page. Note: Valid only when use document bleed
to print is true. (Range: 0 to 432)
double no The height of the bleed area at the top of the
page. Note: Valid only when use document bleed
to print is true. (Range: 0 to 432)
boolean no If true, collate printed copies.
boolean no If true, add small squares of color representing
the CMYK inks and tints of gray in 10% incre-
ments.
Color Output Modes_
Enum Value
no The color output mode for composites. Note:
Not valid when a device-independent PPD is
speci"ed.
double no The screen angle to use when printing compos-
ites. (Range: 0 to 360) Note: Valid only for Post-
Script or PDF "les that use custom screening.
double no The screen frequency to use when printing com-
posites. (Range: 1 to 500) Note: Valid only for
Post Script or PDF "les that use custom screen-
ing.
string no The screening applied to composite printing.
int no The number of copies to print. Note: Not valid
when printer is Post Script File.
boolean no Prints crop marks that de"ne where the page
should be trimmed.
double no The angle override for cyan ink. (Range: 0 to
360)
double no The frequency override for cyan ink. (Range: 1
to 500)
Data Format_Enum-
Value
no The format in which to send image data to the
printer.
int no The type of the selected device.
boolean no If true, downloads all fonts listed in the selected
PPD. Valid only when font downloading is com-
plete or subset.
string no The name of the transparency $attener preset.
IDML File Format Specification
332 IDML File Reference: Preferences
Name Flip Font Downloading Ignore Spread-
Overrides
Include Slug To-
Print
Intent Magenta Angle Magenta Frequency Mark Line Weight Mark Offset Negative OPIImage-
Replacement
Omit Bitmaps Omit EPS Omit PDF PPDFile Page Information-
Marks
Page Position Paper Gap Paper Height Range Paper Offset Paper Offset Range Paper Size Selector Paper Transverse Paper Width Range Type Req Description
Flip_Enum Value no The direction in which to $ip the printed image.
Font Downloading_
Enum Value
no Controls how fonts are downloaded to the
printer.
boolean no If true, ignores $attener spread overrides.
boolean no If true, includes the slug area in the printed
document.
Rendering Intent_
Enum Value
no The rendering intent. Note: Valid only when use
color management is true.
double no The angle override for magenta ink. (Range: 0
to 360)
double no The frequency override for magenta ink. (Range:
1 to 500)
Mark Line Weight_
Enum Value
no The stroke weight (in points) for printer marks.
double no The distance to o&set the page marks from the
edge of the page.
boolean no If true, prints the document as a negative.
boolean no If true, prints graphics that are either OPI com-
ments stored in imported EPS "les or linked
using OPI comments. For information on link-
ing "les using OPI comments, see omit EPS,
omit PDF, or omit bitmaps.
boolean no If true, replaces bitmap images with OPI links.
boolean no If true, replaces EPS images with OPI links.
boolean no If true, replaces PDF images with OPI links.
string no The name of the PDF "le.
boolean no If true, prints the "lename, page number, cur-
rent date and time, and color separation name.
Page Positions_
Enum Value
no The position of the page on the printing medi-
um. Note: Valid only when tile is false.
double no The space between document pages on the print-
ing medium.
list { double
,xsd:double }
no A list of the available paper heights.
double no The amount of space to o&set the page from the
le% edge of the imageable area.
list { double
,xsd:double }
no A list of the paper o&set ranges.
string no The paper size selector.
boolean no If true, uses transverse orientation.
list { double
,xsd:double }
no A list of the available paper widths.
IDML File Format Specification
333 IDML File Reference: Preferences
Name Post Script Level Preserve Color-
Numbers
Print Black Print Blank Pages Print Cyan Print File Print Guides Grids Print Layers Print Magenta Print Master Pages Print Nonprinting Print Page-
Orientation
Print Record Print Resolution Print Spreads Print To Print To Disk Print Yellow Registration Marks Reverse Order Scale Height Scale Mode Type Req Description
Post Script Levels_
Enum Value
no The Post Script level of the printer.
boolean no If true, preserves uncalibrated color numbers.
boolean no If true, prints the black ink. Note: Valid only
when trapping is o&.
boolean no If true, prints blank pages. Note: Valid only
when trapping is o&.
boolean no If true, prints the cyan ink. Note: Valid only
when trapping is o&.
string no The Post Script "le to print to. Note: Valid only
when the current printer is de"ned as postscript
"le.
boolean no If true, prints visible guides and baseline grids.
Note: Valid only when trapping is o&.
Print Layer-
Options_Enum Value
no The layers to print.
boolean no If true, prints the magenta ink. Note: Valid only
when trapping is o&.
boolean no If true, prints master pages.
boolean no If true, prints non-printing objects. Note: Valid
only when trapping is o&.
Print Page-
Orientation_Enum-
Value
no The orientation of the printed page.
string no Cached data preserving the last print job (main-
tained for "le round trip).
double no The resolution of the print job.
boolean no If true, prints each spread with all spread pages
on a single sheet. If false, prints spread pages as
separate pages.
int no The index of the selected printer in the list of
available printers.
boolean no If true, print the "le to disk as PostScript.
boolean no If true, prints the yellow ink. Note: Valid only
when trapping is o&.
boolean no If true, prints small targets outside the page area
for aligning color separations.
boolean no If true, prints pages in reverse order.
double no The amount (as a percentage) that the page
height is scaled during printing. (Range: 0 to
1000) Note: Valid only when scale mode is scale
width height.
Scale Modes_Enum-
Value
no The policy for scaling the page. Note: Valid only
when printing from Layout view.
IDML File Format Specification
334 IDML File Reference: Preferences
Name Scale Proportional Scale Width Send Image Data Separation-
Screening
Sequence Simulate Overprint Source Space Spot Angle Spot Frequency Text As Black Thumbnails Thumbnails Per Page Tile Tiling Overlap Tiling Type Trapping Use Document Bleed-
To Print
Yellow Angle Yellow Frequency Type Req Description
boolean no If true, constrains the proportions of the scaling;
uses the most recent value for either scale width
or scale height to de"ne both values. Note: Valid
only when scale mode is scale width height.
double no The amount (as a percentage) that the page
width is scaled during printing. (Range: 0 to
1000) Note: Valid only when scale mode is scale
width height.
Image Data Types_
Enum Value
no The image data sent to the printer or "le.
string no The screening to use when printing separations.
Sequences_Enum-
Value
no The sequence of pages to print.
boolean no If true, simulates the e&ects of overprinting
spot inks with di&erent neutral density values
by converting spot colors to process colors
for printing. Note: Not valid when the color
output mode is de"ned to leave color pro"les
unchanged.
Source Spaces_
Enum Value
no The source of the color management system.
Note: Valid only when use color management is
true.
double no The angle of a spot ink.
double no The screen frequency of a spot ink.
boolean no If true, prints all text as black unless text has the
color None or Paper or a color value that equals
white. If false, prints colored text, such as blue
hyperlinks, in hal%one patterns. Note: Valid
only when trapping is o&.
boolean no If true, prints thumbnails. Note: Valid only
when trapping is o& and tile is false.
Thumbs Per Page_
Enum Value
no The number of thumbnails per page.
boolean no If true, tiles pages.
double no The amount of tiling overlap. Note: Valid only
when tiling is true and tiling type is not manual.
Tiling Types_Enum-
Value
no The tiling type. Note: Valid only when tiling is
true.
Trapping_Enum-
Value
no The type of trapping.
boolean no If true, uses the bleed area set for the document.
double no The angle override for yellow ink. (Range: 0 to
360)
double no The frequency override for yellow ink. (Range:
1 to 500)
IDML File Format Specification
335 IDML File Reference: Preferences
Table 166. Print Preference Properties Represented as Elements
Name Type Req Description
Active Printer-
Preset
Printer Preset-
Types_EnumValue
or string
no The current printer preset, as a Printer-
Preset Types enumeration or a reference to the
Self attribute of a printer preset.
CRD Color Render ing-
Dictionary_Enum-
Value or string
no The current CRD, as a Color Render ing-
Dictionary enumeration or a string containing
the name of the CRD.
Imageable Paper-
Size Rect
Rectangle Bounds-
Type_TypeDef
no A rectangle de"ning the imageable area of the
paper, as a space-separated list of four values (in
the order le%, top, right, bottom).
Mark Type Mark Types_Enum-
Value or string
no The type of printer marks, either a MarkTypes
enumeration or the name of a custom marks "le.
PPD PPD Values_Enum-
Value or string
no The PPD, speci"ed as a PPDValues enumeration
or as the name of the PPD.
Page Range PageRange_Enum-
Value or string
no The pages to print, speci"ed either as a Page-
Range enumeration or a string. To specify a
range, separate page numbers in the string with
a hyphen (-). To specify separate pages, separate
page numbers in the string with a comma (,).
Paper Height PaperSize_Enum-
Value or double
no The paper height, as a PaperSize enumeration
or double. Note: Valid only when paper size is
custom or scale mode is scale width height.
Paper Size Paper Sizes_Enum-
Value or string
no The paper height, as a PaperSize enumeration
or string (the name of the paper size).
Paper Size Rect Rectangle Bounds-
Type_TypeDef
no A rectangle de"ning the size of the paper, as a
space-separated list of four values (in the order
le%, top, right, bottom).
PaperWidth PaperSize_Enum-
Value or double
no The paper width, as a PaperSize enumeration
or double. Note: Valid only when paper size is
custom or scale mode is scale width height.
Printer Printer_Enum Value
or string
no The current printer, as a Printer enumeration
or string (name of the printer).
Profile Profile_Enum Value
or string
no The color pro"le, as a Profile enumeration or
string (the name of the pro"le).
Screening Screening _Enum-
Value or string
The ink screening settings for composite gray
output in Post Script or PDF format.
6.3.28 Print Booklet Option
The <Print Booklet Option> de"nes the layout options for the booklet created when you use the
Print Booklet feature. The printing options for the booklet are de"ned by the <Print Booklet-
Print Preference> element.
Schema Example 137. Print Booklet Option
PrintBookletOption_Object = element PrintBookletOption {
attribute BookletType { BookletTypeOptions_EnumValue }?,
attribute SpaceBetweenPages { xsd:double {minInclusive="0" maxInclusive="288"}
}?,
IDML File Format Specification
336 IDML File Reference: Preferences
attribute BleedBetweenPages { xsd:double {minInclusive="0" maxInclusive="144"}
}?,
attribute Creep { xsd:double {minInclusive="-144" maxInclusive="144"} }?,
attribute SignatureSize { SignatureSizeOptions_EnumValue }?,
attribute TopMargin { xsd:double {minInclusive="0" maxInclusive="288"} }?,
attribute BottomMargin { xsd:double {minInclusive="0" maxInclusive="288"} }?,
attribute LeftMargin { xsd:double {minInclusive="0" maxInclusive="288"} }?,
attribute RightMargin { xsd:double {minInclusive="0" maxInclusive="288"} }?,
attribute AutoAdjustMargins { xsd:boolean }?,
attribute MarginsUniformSize { xsd:boolean }?,
attribute PrintBlankPrinterSpreads { xsd:boolean }?,
element Properties {
element PageRange {
(enum_type, PageRange_EnumValue ) |
(string_type, xsd:string )
}?
}
?
}
6.3.29 Print Booklet Print Preference
The printing options for the Print Booklet are de"ned by the <Print Booklet Print Preference>
element. The <Print Booklet Option> de"nes the layout options for the booklet.
Schema Example 138. Print Booklet Print Preference
PrintBookletPrintPreference_Object = element PrintBookletPrintPreference {
attribute PrinterList { list { xsd:string * } }?,
attribute PPDList { list { xsd:string * } }?,
attribute PaperSizeList { list { xsd:string * } }?,
attribute ScreeningList { list { xsd:string * } }?,
attribute PrintFile { xsd:string }?,
attribute Copies { xsd:int }?,
attribute Collating { xsd:boolean }?,
attribute ReverseOrder { xsd:boolean }?,
attribute PrintNonprinting { xsd:boolean }?,
attribute PrintBlankPages { xsd:boolean }?,
attribute PrintGuidesGrids { xsd:boolean }?,
attribute PaperOffset { xsd:double }?,
attribute PaperGap { xsd:double }?,
attribute PaperTransverse { xsd:boolean }?,
attribute PrintPageOrientation { PrintPageOrientation_EnumValue }?,
attribute PagePosition { PagePositions_EnumValue }?,
attribute ScaleMode { ScaleModes_EnumValue }?,
attribute ScaleWidth { xsd:double }?,
attribute ScaleHeight { xsd:double }?,
attribute ScaleProportional { xsd:boolean }?,
attribute PrintLayers { PrintLayerOptions_EnumValue }?,
attribute AllPrinterMarks { xsd:boolean }?,
attribute CropMarks { xsd:boolean }?,
attribute BleedMarks { xsd:boolean }?,
attribute RegistrationMarks { xsd:boolean }?,
attribute ColorBars { xsd:boolean }?,
IDML File Format Specification
337 IDML File Reference: Preferences
attribute PageInformationMarks { xsd:boolean }?,
attribute MarkLineWeight { MarkLineWeight_EnumValue }?,
attribute MarkOffset { xsd:double }?,
attribute UseDocumentBleedToPrint { xsd:boolean }?,
attribute BleedTop { xsd:double {minInclusive="0" maxInclusive="432"} }?,
attribute BleedBottom { xsd:double {minInclusive="0" maxInclusive="432"} }?,
attribute BleedInside { xsd:double {minInclusive="0" maxInclusive="432"} }?,
attribute BleedOutside { xsd:double {minInclusive="0" maxInclusive="432"} }?,
attribute BleedChain { xsd:boolean }?,
attribute ColorOutput { ColorOutputModes_EnumValue }?,
attribute TextAsBlack { xsd:boolean }?,
attribute Trapping { Trapping_EnumValue }?,
attribute Flip { Flip_EnumValue }?,
attribute Negative { xsd:boolean }?,
attribute CompositeAngle { xsd:double }?,
attribute CompositeFrequency { xsd:double }?,
attribute SimulateOverprint { xsd:boolean }?,
attribute PrintCyan { xsd:boolean }?,
attribute CyanAngle { xsd:double }?,
attribute CyanFrequency { xsd:double }?,
attribute PrintMagenta { xsd:boolean }?,
attribute MagentaAngle { xsd:double }?,
attribute MagentaFrequency { xsd:double }?,
attribute PrintYellow { xsd:boolean }?,
attribute YellowAngle { xsd:double }?,
attribute YellowFrequency { xsd:double }?,
attribute PrintBlack { xsd:boolean }?,
attribute BlackAngle { xsd:double }?,
attribute BlackFrequency { xsd:double }?,
attribute SendImageData { ImageDataTypes_EnumValue }?,
attribute FontDownloading { FontDownloading_EnumValue }?,
attribute DownloadPPDFonts { xsd:boolean }?,
attribute PostScriptLevel { PostScriptLevels_EnumValue }?,
attribute DataFormat { DataFormat_EnumValue }?,
attribute SourceSpace { SourceSpaces_EnumValue }?,
attribute Intent { RenderingIntent_EnumValue }?,
attribute PreserveColorNumbers { xsd:boolean }?,
attribute OPIImageReplacement { xsd:boolean }?,
attribute OmitEPS { xsd:boolean }?,
attribute OmitPDF { xsd:boolean }?,
attribute OmitBitmaps { xsd:boolean }?,
attribute FlattenerPresetName { xsd:string }?,
attribute IgnoreSpreadOverrides { xsd:boolean }?,
attribute BitmapPrinting { xsd:boolean }?,
attribute BitmapResolution { xsd:int {minInclusive="72" maxInclusive="1200"} }?,
attribute DeviceType { xsd:int }?,
attribute PrintTo { xsd:int }?,
attribute PPDFile { xsd:string }?,
attribute PrintToDisk { xsd:boolean }?,
attribute PrintRecord { xsd:string }?,
attribute PrintResolution { xsd:double }?,
attribute PaperSizeSelector { xsd:string }?,
attribute PaperHeightRange { list { xsd:double ,xsd:double } }?,
attribute PaperWidthRange { list { xsd:double ,xsd:double } }?,
IDML File Format Specification
338 IDML File Reference: Preferences
attribute PaperOffsetRange { list { xsd:double ,xsd:double } }?,
attribute SeparationScreening { xsd:string }?,
attribute CompositeScreening { xsd:string }?,
attribute SpotAngle { xsd:double }?,
attribute SpotFrequency { xsd:double }?,
element Properties {
element Printer {
(enum_type, Printer_EnumValue ) |
(string_type, xsd:string )
}?&
element PPD {
(enum_type, PPDValues_EnumValue ) |
(string_type, xsd:string )
}?&
element PaperSize {
(enum_type, PaperSizes_EnumValue ) |
(string_type, xsd:string )
}?&
element PaperHeight {
(enum_type, PaperSize_EnumValue ) |
(unit_type, xsd:double )
}?&
element PaperWidth {
(enum_type, PaperSize_EnumValue ) |
(unit_type, xsd:double )
}?&
element MarkType {
(enum_type, MarkTypes_EnumValue ) |
(string_type, xsd:string )
}?&
element Screening {
(enum_type, Screeening_EnumValue ) |
(string_type, xsd:string )
}?&
element Profile {
(enum_type, Profile_EnumValue ) |
(string_type, xsd:string )
}?&
element CRD {
(enum_type, ColorRenderingDictionary_EnumValue ) |
(string_type, xsd:string )
}?&
element ActivePrinterPreset {
(enum_type, PrinterPresetTypes_EnumValue ) |
(string_type, xsd:string )
}?&
element PaperSizeRect { RectangleBoundsType_TypeDef }?&
element ImageablePaperSizeRect { RectangleBoundsType_TypeDef }?
}
?
}
IDML File Format Specification
339 IDML File Reference: Preferences
6.3.30 Index Options
The <Index Options> element stores settings for index creation. These options have no e&ect on
indices already included in the IDML document.
Schema Example 139. Index Options
IndexOptions_Object = element IndexOptions {
attribute Title { xsd:string }?,
attribute TitleStyle { xsd:string }?,
attribute ReplaceExistingIndex { xsd:boolean }?,
attribute IncludeBookDocuments { xsd:boolean }?,
attribute IncludeHiddenEntries { xsd:boolean }?,
attribute IndexFormat { IndexFormat_EnumValue }?,
attribute IncludeSectionHeadings { xsd:boolean }?,
attribute IncludeEmptyIndexSections { xsd:boolean }?,
attribute Level1Style { xsd:string }?,
attribute Level2Style { xsd:string }?,
attribute Level3Style { xsd:string }?,
attribute Level4Style { xsd:string }?,
attribute SectionHeadingStyle { xsd:string }?,
attribute PageNumberStyle { xsd:string }?,
attribute CrossReferenceStyle { xsd:string }?,
attribute CrossReferenceTopicStyle { xsd:string }?,
attribute FollowingTopicSeparator { xsd:string }?,
attribute BetweenEntriesSeparator { xsd:string }?,
attribute PageRangeSeparator { xsd:string }?,
attribute BetweenPageNumbersSeparator { xsd:string }?,
attribute BeforeCrossReferenceSeparator { xsd:string }?,
attribute EntryEndSeparator { xsd:string }?
}
6.3.31 Index Header Setting
The <Index Header Setting> element stores the strings used by the headers added to the index
during index generation. These options have no e&ect on indices already included in the IDML
document.
Schema Example 140. Index Header Setting
IndexHeaderSetting_Object = element IndexHeaderSetting {
attribute HeaderSetName { xsd:string }?,
attribute HeaderSetLanguage { xsd:int }?,
attribute IndexHeaderSetHandler { xsd:int }?,
attribute IndexHeaderSetGroupValue { xsd:int }?,
attribute IndexHeaderSetGroupOptionValue { xsd:int }?,
element Properties {
element ListOfIndexHeaderGroup { element IndexHeaderGroupType {
IndexHeaderGroupType_TypeDef }*
}?
}
?
}
IDML File Format Specification
340 IDML File Reference: Preferences
6.3.32 Page Item Default
The <Page Item Default> element controls the default page item formatting for an In Design
document. Values that you specify here will apply to all page items that do not explicitly de"ne
these attributes and elements. All of the properties of the <Page Item Default> element can be
found in the “Common Page Item Properites” section.
Schema Example 141. Page Item Default
PageItemDefault_Object = element PageItemDefault {
attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
attribute TopRightCornerOption { CornerOptions_EnumValue }?,
attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
attribute TopLeftCornerRadius { xsd:double }?,
attribute TopRightCornerRadius { xsd:double }?,
attribute BottomLeftCornerRadius { xsd:double }?,
attribute BottomRightCornerRadius { xsd:double }?,
attribute AppliedGraphicObjectStyle { xsd:string }?,
attribute AppliedTextObjectStyle { xsd:string }?,
attribute AppliedGridObjectStyle { xsd:string }?,
attribute CornerOption { CornerOptions_EnumValue }?,
attribute CornerRadius { xsd:double }?,
attribute FillColor { xsd:string }?,
attribute FillTint { xsd:double }?,
attribute StrokeWeight { xsd:double }?,
attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
attribute EndCap { EndCap_EnumValue }?,
attribute EndJoin { EndJoin_EnumValue }?,
attribute StrokeType { xsd:string }?,
attribute LeftLineEnd { ArrowHead_EnumValue }?,
attribute RightLineEnd { ArrowHead_EnumValue }?,
attribute StrokeColor { xsd:string }?,
attribute StrokeTint { xsd:double }?,
attribute GradientFillAngle { xsd:double }?,
attribute GradientStrokeAngle { xsd:double }?,
attribute OverprintStroke { xsd:boolean }?,
attribute OverprintFill { xsd:boolean }?,
attribute GapColor { xsd:string }?,
attribute GapTint { xsd:double }?,
attribute OverprintGap { xsd:boolean }?,
attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
attribute Nonprinting { xsd:boolean }?,
(
TransparencySetting_Object?&
StrokeTransparencySetting_Object?&
FillTransparencySetting_Object?&
ContentTransparencySetting_Object?
)
}
IDML File Format Specification
341 IDML File Reference: Preferences
6.3.33 Frame Fitting Option
The <Frame Fitting Option> element controls the default "tting behavior for all page items
in a document. Values that you specify here will apply to all page items that do not explicitly
de"ne these attributes and elements. For more on frame "tting options, refer to the In Design
documentation.
Schema Example 142. Frame Fitting Option
FrameFittingOption_Object = element FrameFittingOption {
attribute AutoFit { xsd:boolean }?,
attribute LeftCrop { xsd:double }?,
attribute TopCrop { xsd:double }?,
attribute RightCrop { xsd:double }?,
attribute BottomCrop { xsd:double }?,
attribute FittingOnEmptyFrame { EmptyFrameFittingOptions_EnumValue }?,
attribute FittingAlignment { AnchorPoint_EnumValue }?
}
6.3.34 Button Preference
The <Button Preference> element controls the default "tting behavior for all buttons in a
document. Values that you specify here will apply to all buttons that do not explicitly de"ne these
attributes and elements.
Schema Example 143. Button Preference
Button Preference_Object = element Button Preference {
attribute Name { xsd:string }?
}
6.3.35 Tin Document DData Object
Schema Example 144. Tin Document Data Object
Tin Document Data Object_Object = element Tin Document Data Object {
element Properties {
element Gaiji Ref Maps { text }?
}
?
}
6.3.36 Layout Grid Data Information
The <Layout Grid Data Information> element controls the default layout grid for a document.
Schema Example 145. Layout Grid Data Information
LayoutGridDataInformation_Object = element LayoutGridDataInformation {
attribute FontStyle { xsd:string }?,
attribute PointSize { xsd:double }?,
attribute CharacterAki { xsd:double }?,
attribute LineAki { xsd:double }?,
attribute HorizontalScale { xsd:double }?,
attribute VerticalScale { xsd:double }?,
IDML File Format Specification
342 IDML File Reference: Preferences
element Properties {
element AppliedFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?
}
?
}
6.3.37 Story Grid Data Information
The <Story Grid Data Information> element controls the default story grid for a document.
Schema Example 146. Story Grid Data Information
StoryGridDataInformation_Object = element StoryGridDataInformation {
attribute FontStyle { xsd:string }?,
attribute PointSize { xsd:double }?,
attribute CharacterAki { xsd:double }?,
attribute LineAki { xsd:double }?,
attribute HorizontalScale { xsd:double }?,
attribute VerticalScale { xsd:double }?,
attribute LineAlignment { LineAlignment_EnumValue }?,
attribute GridAlignment { GridAlignment_EnumValue }?,
attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
attribute GridView { GridViewSettings_EnumValue }?,
attribute CharacterCountLocation { CharacterCountLocation_EnumValue }?,
attribute CharacterCountSize { xsd:double }?,
element Properties {
element AppliedFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?
}
?
}
6.3.38 Cjk Grid Preference
Schema Example 147. Cjk Grid Preference
CjkGridPreference_Object = element CjkGridPreference {
attribute ShowAllLayoutGrids { xsd:boolean }?,
attribute ShowAllFrameGrids { xsd:boolean }?,
attribute MinimumScale { xsd:double }?,
attribute SnapToLayoutGrid { xsd:boolean }?,
attribute ColorEveryNthCell { xsd:short }?,
attribute SingleLineColorMode { xsd:boolean }?,
attribute ICFMode { xsd:boolean }?,
attribute UseCircularCells { xsd:boolean }?,
attribute ShowCharacterCount { xsd:boolean }?,
element Properties {
element LayoutGridColorIndex { InDesignUIColorType_TypeDef }?
}
IDML File Format Specification
343 IDML File Reference: Preferences
?
}
Table 167. Cjk Grid Preference Properties Represented as Attributes
Name Type Req Description
Color Every Nth Cell short no Applies the grid color to every nth cell, where n
is the value of this property.
ICFMode boolean no If true, uses ICF mode for grid cells. If false, uses
virtual body mode.
Minimum Scale double no The view magni"cation (as a percentage) less
than which grids do not appear. (Range: 5 to
4000)
Show All Frame Grids boolean no If true, displays the frame (story) grids.
Show All Layout-
Grids
boolean no If true, displays the layout grids.
Show Character-
Count
boolean no If true, displays the character count for the
frame.
Single Line Color-
Mode
boolean no If true, applies the grid color from the the edge
of the line. If false, applies the grid color from
the corner of the frame.
Snap To Layout Grid boolean no If true, objects snap to the layout grid.
Use Circular Cells boolean no If true, cell shape is circular. If false, cell shape is
rectangular.
Table 168. Cjk Grid Preference Properties Represented as Elements
Name Type Req Description
Layout Grid Color-
Index
In Design UIColor-
Type
no The color of the layout grid as a UIColor
enumeration or an RGB color as a list of three
<List Item> elements (in the order R, G, B).
6.3.39 Mojikumi Ui Preference
The <Mojikumi Ui Preference> element controls the user interface for Mojikumi.
Schema Example 148. Mojikumi Ui Preference
Mojikumi Ui Preference_Object = element Mojikumi Ui Preference {
attribute Mojikumi Ui Settings { xsd:short }?
}
Table 169. Mojikumi Ui Preference Properties Represented as Attributes
Name Type Req Description
Mojikumi Ui-
Settings
short no User interface settings for Mojikumi features.
IDML File Format Specification
344 IDML File Reference: Preferences
6.3.40 Chapter Number Preference
The <Chapter Number Preference> element stores information used by chapter numbering text
variables in the document.
Schema Example 149. Chapter Number Preference
Chapter Number Preference_Object = element Chapter Number Preference {
attribute Chapter Number { xsd:int }?,
attribute Chapter Number Source { Chapter Number Sources_Enum Value }?,
element Properties {
element Chapter Number Format {
(enum_type, Numbering Style_Enum Value ) |
(string_type, xsd:string )
}?
}
?
}
Table 170. Chapter Number Preference Properties Represented as Attributes
Name Type Req Description
Chapter Number int no Chapter number.
Chapter Number-
Source
Chapter Number-
Sources_Enum Value
no Source for generating the chapter number. Can
be User Defined, Continue From Previous-
Document, or Same As Previous Document.
Table 171. Chapter Number Preference Properties Represented as Elements
Name Type Req Description
Chapter Number-
Format
Numbering Style_
Enum Value or
string.
no The chapter numbering type, as a
NumberingStyle enumeration or as a string.
The string corresponds to the options found
on the Style pop-up menu in the Document
Chapter Numbering section of the Num-
bering & Section Options dialog box in
In Design’s user interface. Can be UpperRoman,
LowerRoman, UpperLetters, LowerLetters,
Arabic, Kanji, KatakanaModern,
KatakanaTraditional, FormatNone,
SingleLeadingZeros, ArabicAlifBaTah,
ArabicAbjad, HebrewBiblical,
HebrewNonStandard, DoubleLeadingZeros,
or TripleLeadingZeros.
IDML File Format Specification
345 IDML File Reference: Styles
6.4 Styles
An In Design document contains a number of style objects: notably paragraph styles, character
styles, and object styles, but also including table styles, cell styles, and anchored object settings.
In an IDML package, the Styles.xml "le in the Resources folder contains the styles used in the
document.
6.4.1 Style Paths and the Self Attribute
When you create a reference to a style in an IDML package, you specify the location of the style
element using a path-like syntax. For example, when you want to refer to a paragraph style named
“Heading1” in the <Root Paragraph Style> element of a document, you use the value of its Self
attribute:
\Paragraph Styles\Heading1
When a style appears within a style group other than the root style group, In Design does not use
a backslash as a path separator; instead, a colon is used. The colon apppears in the Name attribute
of the style, but is encoded as %3a when it appears in the Self attribute, as shown in the example
below:
<Paragraph Style Self="Paragraph Style\Headings%3a Heading1"
Name="Headings:Heading1">
In the following example, a paragraph style group named “Table Headings” has been created
inside the “Headings” paragraph style group.
<Paragraph Style Self="Paragraph Style\Headings%3a Table Headings%3a Table Heading1"
Name="Headings:Table Headings:Table Heading1">
6.4.2 Paragraph Styles
A paragraph style includes both character and paragraph formatting attributes, and can be
applied to a paragraph or range of paragraphs. Paragraph styles can de"ne every formatting
attribute that can be applied to a range of paragraphs, including character formatting. Paragraph
styles in an In Design document can be stored in paragraph styles groups for organizational
purposes. In IDML, it is not necessary to de"ne every formatting attribute of a paragraph style,
but you should be aware that values that you do not include will be de"ned using the application’s
defaults.
Each IDML package document contains a <Root Paragraph Style Group> element, which, in
turn, contains all of the <Paragraph Style> and <Paragraph Style Group> elements in the
IDML package. A <Paragraph Style Group> element can contain other <Paragraph Style Group>
elements. The following "gure shows the relationship between the elements in an example In-
Design document.
IDML File Format Specification
346 IDML File Reference: Styles
Figure 56. Example Root Paragraph Style Group, Paragraph Style,
and Paragraph Style Group Elements (Self attribute values shown)
Root Paragraph Style Group
Paragraph Style\[No Paragraph Style]
Paragraph Style\Normal Paragraph Style
Paragraph Style\Para1
Paragraph Style\Code
Paragraph Style\Para
Paragraph Style\Para1
Paragraph Style Group\Headings
Paragraph Style\Headings%3a Heading1
Paragraph Style\Headings%3a Heading2
Paragraph Style\Headings%3a Heading3
Paragraph Style Group\List Styles
Paragraph Style\List Styles%3a List First
Paragraph Style\List Styles%3a List
Paragraph Style\List Styles%3a List End
The <Root Paragraph Style Group> and <Paragraph Style Group> elements have the same
structure.
Schema Example 150. Paragraph Style Group
ParagraphStyleGroup_Object = element ParagraphStyleGroup {
attribute Self { xsd:string },
attribute Name { xsd:string },
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
ParagraphStyle_Object*&
ParagraphStyleGroup_Object*
)
IDML File Format Specification
347 IDML File Reference: Styles
}
In Design documents always include two default paragraph styles, “Normal Paragraph Style” and
“[No Paragraph Style].” The former style can be edited by the user (it appears as “Basic Paragraph
Style” in the user interface); the latter contains default formatting and cannot be edited.
Many document designs feature hierarchies of styles sharing certain attributes. The headings and
subheads, for example, o%en use the same font. You can easily create links between similar styles
by creating a base, or parent, style. When you edit the parent style, the child styles will change
as well. You can then edit the child styles to distinguish it from the parent style. The Based On
attribute of a paragraph style refers to the parent style of a <Paragraph Style> element.
The Next Style attribute only a&ects the user interface, and automatically applies styles as the
user types text. If, for example, your document’s design calls for the style “body text” to follow a
heading style named “heading 1,” you can set the Next Style option for “heading 1” to “body text.”
A%er you’ve typed a paragraph styled with “heading 1,” pressing Enter or Return starts a new
paragraph styled with “body text.”
The following example shows an example <Paragraph Style Group> element inside the <Root-
Paragraph Style Group> element. We have omitted the formatting speci"ed in the individual
<Paragraph Style> elements for clarity.
IDML Example 89. Paragraph Style Group
<id Pkg:Styles xmlns:id Pkg="http://ns.adobe.com/Adobe In Design/idml/1.0/packaging">
<Root Paragraph Style Group Self="u69">
<Paragraph Style Group Self="Paragraph Style Group\Headings" Name="Headings">
<Paragraph Style Self="Paragraph Style\Headings%3a Heading1"
Name="Headings:Heading1">
</Paragraph Style>
<Paragraph Style Self="Paragraph Style\Headings%3a Heading2"
Name="Headings:Heading2">
</Paragraph Style>
<Paragraph Style Self="Paragraph Style\Headings%3a Heading3"
Name="Headings:Heading3">
</Paragraph Style>
</Paragraph Style Group>
</Root Paragraph Style Group>
</id Pkg:Styles>
Schema Example 151. Paragraph Style
ParagraphStyle_Object = element ParagraphStyle {
attribute Self { xsd:string },
attribute Name { xsd:string },
attribute Imported { xsd:boolean }?,
attribute NextStyle { xsd:string }?,
attribute FontStyle { xsd:string }?,
attribute PointSize { xsd:double }?,
attribute KerningMethod { xsd:string }?,
attribute Tracking { xsd:double }?,
attribute Capitalization { Capitalization_EnumValue }?,
attribute Position { Position_EnumValue }?,
attribute Underline { xsd:boolean }?,
attribute StrikeThru { xsd:boolean }?,
attribute Ligatures { xsd:boolean }?,
IDML File Format Specification
348 IDML File Reference: Styles
attribute NoBreak { xsd:boolean }?,
attribute HorizontalScale { xsd:double }?,
attribute VerticalScale { xsd:double }?,
attribute BaselineShift { xsd:double }?,
attribute Skew { xsd:double }?,
attribute FillTint { xsd:double }?,
attribute StrokeTint { xsd:double }?,
attribute StrokeWeight { xsd:double }?,
attribute OverprintStroke { xsd:boolean }?,
attribute OverprintFill { xsd:boolean }?,
attribute OTFFigureStyle { OTFFigureStyle_EnumValue }?,
attribute OTFOrdinal { xsd:boolean }?,
attribute OTFFraction { xsd:boolean }?,
attribute OTFDiscretionaryLigature { xsd:boolean }?,
attribute OTFTitling { xsd:boolean }?,
attribute OTFContextualAlternate { xsd:boolean }?,
attribute OTFSwash { xsd:boolean }?,
attribute UnderlineTint { xsd:double }?,
attribute UnderlineGapTint { xsd:double }?,
attribute UnderlineOverprint { xsd:boolean }?,
attribute UnderlineGapOverprint { xsd:boolean }?,
attribute UnderlineOffset { xsd:double }?,
attribute UnderlineWeight { xsd:double }?,
attribute StrikeThroughTint { xsd:double }?,
attribute StrikeThroughGapTint { xsd:double }?,
attribute StrikeThroughOverprint { xsd:boolean }?,
attribute StrikeThroughGapOverprint { xsd:boolean }?,
attribute StrikeThroughOffset { xsd:double }?,
attribute StrikeThroughWeight { xsd:double }?,
attribute FillColor { xsd:string }?,
attribute StrokeColor { xsd:string }?,
attribute AppliedLanguage { xsd:string }?,
attribute ParagraphKashidaWidth { xsd:double }?,
attribute FirstLineIndent { xsd:double }?,
attribute LeftIndent { xsd:double }?,
attribute RightIndent { xsd:double }?,
attribute SpaceBefore { xsd:double }?,
attribute SpaceAfter { xsd:double }?,
attribute Justification { Justification_EnumValue }?,
attribute SingleWordJustification { SingleWordJustification_EnumValue }?,
attribute AutoLeading { xsd:double }?,
attribute DropCapLines { xsd:short {minInclusive="0" maxInclusive="25"} }?,
attribute DropCapCharacters { xsd:short {minInclusive="0" maxInclusive="150"}
}?,
attribute KeepLinesTogether { xsd:boolean }?,
attribute KeepAllLinesTogether { xsd:boolean }?,
attribute KeepWithNext { xsd:short {minInclusive="0" maxInclusive="5"} }?,
attribute KeepFirstLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
attribute KeepLastLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
attribute StartParagraph { StartParagraph_EnumValue }?,
attribute Composer { xsd:string }?,
attribute MinimumWordSpacing { xsd:double }?,
attribute MaximumWordSpacing { xsd:double }?,
attribute DesiredWordSpacing { xsd:double }?,
IDML File Format Specification
349 IDML File Reference: Styles
attribute MinimumLetterSpacing { xsd:double }?,
attribute MaximumLetterSpacing { xsd:double }?,
attribute DesiredLetterSpacing { xsd:double }?,
attribute MinimumGlyphScaling { xsd:double }?,
attribute MaximumGlyphScaling { xsd:double }?,
attribute DesiredGlyphScaling { xsd:double }?,
attribute RuleAbove { xsd:boolean }?,
attribute RuleAboveOverprint { xsd:boolean }?,
attribute RuleAboveLineWeight { xsd:double }?,
attribute RuleAboveTint { xsd:double }?,
attribute RuleAboveOffset { xsd:double }?,
attribute RuleAboveLeftIndent { xsd:double }?,
attribute RuleAboveRightIndent { xsd:double }?,
attribute RuleAboveWidth { RuleWidth_EnumValue }?,
attribute RuleAboveGapTint { xsd:double }?,
attribute RuleAboveGapOverprint { xsd:boolean }?,
attribute RuleBelow { xsd:boolean }?,
attribute RuleBelowLineWeight { xsd:double }?,
attribute RuleBelowTint { xsd:double }?,
attribute RuleBelowOffset { xsd:double }?,
attribute RuleBelowLeftIndent { xsd:double }?,
attribute RuleBelowRightIndent { xsd:double }?,
attribute RuleBelowWidth { RuleWidth_EnumValue }?,
attribute RuleBelowGapTint { xsd:double }?,
attribute HyphenateCapitalizedWords { xsd:boolean }?,
attribute Hyphenation { xsd:boolean }?,
attribute HyphenateBeforeLast { xsd:short {minInclusive="1" maxInclusive="15"}
attribute HyphenateWordsLongerThan { xsd:short {minInclusive="3"
maxInclusive="25"} }?,
attribute HyphenateLadderLimit { xsd:short {minInclusive="0" maxInclusive="25"}
}?,
}?,
}?,
attribute HyphenateAfterFirst { xsd:short {minInclusive="1" maxInclusive="15"}
attribute HyphenationZone { xsd:double }?,
attribute HyphenWeight { xsd:short {minInclusive="0" maxInclusive="10"} }?,
attribute KeyboardShortcut { list { xsd:short ,xsd:short } }?,
attribute LastLineIndent { xsd:double }?,
attribute HyphenateLastWord { xsd:boolean }?,
attribute OTFSlashedZero { xsd:boolean }?,
attribute OTFHistorical { xsd:boolean }?,
attribute OTFStylisticSets { xsd:int }?,
attribute GradientFillLength { xsd:double }?,
attribute GradientFillAngle { xsd:double }?,
attribute GradientStrokeLength { xsd:double }?,
attribute GradientStrokeAngle { xsd:double }?,
attribute GradientFillStart { UnitPointType_TypeDef }?,
attribute GradientStrokeStart { UnitPointType_TypeDef }?,
attribute KeepWithPrevious { xsd:boolean }?,
attribute SpanColumnType { SpanColumnTypeOptions_EnumValue }?,
attribute SplitColumnInsideGutter { xsd:double }?,
attribute SplitColumnOutsideGutter { xsd:double }?,
attribute SpanColumnMinSpaceBefore { xsd:double }?,
attribute SpanColumnMinSpaceAfter { xsd:double }?,
IDML File Format Specification
350 IDML File Reference: Styles
attribute RuleBelowOverprint { xsd:boolean }?,
attribute RuleBelowGapOverprint { xsd:boolean }?,
attribute DropcapDetail { xsd:int }?,
attribute HyphenateAcrossColumns { xsd:boolean }?,
attribute KeepRuleAboveInFrame { xsd:boolean }?,
attribute IgnoreEdgeAlignment { xsd:boolean }?,
attribute OTFMark { xsd:boolean }?,
attribute OTFLocale { xsd:boolean }?,
attribute PositionalForm { PositionalForms_EnumValue }?,
attribute ParagraphDirection { ParagraphDirectionOptions_EnumValue }?,
attribute ParagraphJustification { ParagraphJustificationOptions_EnumValue }?,
attribute MiterLimit { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
attribute StrokeAlignment { TextStrokeAlign_EnumValue }?,
attribute EndJoin { OutlineJoin_EnumValue }?,
attribute OTFOverlapSwash { xsd:boolean }?,
attribute OTFStylisticAlternate { xsd:boolean }?,
attribute OTFJustificationAlternate { xsd:boolean }?,
attribute OTFStretchedAlternate { xsd:boolean }?,
attribute CharacterDirection { CharacterDirectionOptions_EnumValue }?,
attribute KeyboardDirection { CharacterDirectionOptions_EnumValue }?,
attribute DigitsType { DigitsTypeOptions_EnumValue }?,
attribute Kashidas { KashidasOptions_EnumValue }?,
attribute DiacriticPosition { DiacriticPositionOptions_EnumValue }?,
attribute XOffsetDiacritic { xsd:double }?,
attribute YOffsetDiacritic { xsd:double }?,
attribute ParagraphBreakType { ParagraphBreakTypes_EnumValue }?,
attribute PageNumberType { PageNumberTypes_EnumValue }?,
attribute GridAlignFirstLineOnly { xsd:boolean }?,
attribute GridAlignment { GridAlignment_EnumValue }?,
attribute GridGyoudori { xsd:short }?,
attribute AutoTcy { xsd:short }?,
attribute AutoTcyIncludeRoman { xsd:boolean }?,
attribute KinsokuType { KinsokuType_EnumValue }?,
attribute KinsokuHangType { KinsokuHangTypes_EnumValue }?,
attribute BunriKinshi { xsd:boolean }?,
attribute Rensuuji { xsd:boolean }?,
attribute RotateSingleByteCharacters { xsd:boolean }?,
attribute LeadingModel { LeadingModel_EnumValue }?,
attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
attribute Tsume { xsd:double }?,
attribute LeadingAki { xsd:double }?,
attribute TrailingAki { xsd:double }?,
attribute CharacterRotation { xsd:double }?,
attribute Jidori { xsd:short }?,
attribute ShataiMagnification { xsd:double }?,
attribute ShataiDegreeAngle { xsd:double }?,
attribute ShataiAdjustRotation { xsd:boolean }?,
attribute ShataiAdjustTsume { xsd:boolean }?,
attribute Tatechuyoko { xsd:boolean }?,
attribute TatechuyokoXOffset { xsd:double }?,
attribute TatechuyokoYOffset { xsd:double }?,
attribute KentenTint { xsd:double }?,
attribute KentenStrokeTint { xsd:double }?,
attribute KentenWeight { xsd:double }?,
IDML File Format Specification
351 IDML File Reference: Styles
attribute KentenOverprintFill { AdornmentOverprint_EnumValue }?,
attribute KentenOverprintStroke { AdornmentOverprint_EnumValue }?,
attribute KentenKind { KentenCharacter_EnumValue }?,
attribute KentenPlacement { xsd:double }?,
attribute KentenAlignment { KentenAlignment_EnumValue }?,
attribute KentenPosition { RubyKentenPosition_EnumValue }?,
attribute KentenFontSize { xsd:double }?,
attribute KentenXScale { xsd:double }?,
attribute KentenYScale { xsd:double }?,
attribute KentenCustomCharacter { xsd:string }?,
attribute KentenCharacterSet { KentenCharacterSet_EnumValue }?,
attribute RubyTint { xsd:double }?,
attribute RubyWeight { xsd:double }?,
attribute RubyOverprintFill { AdornmentOverprint_EnumValue }?,
attribute RubyOverprintStroke { AdornmentOverprint_EnumValue }?,
attribute RubyStrokeTint { xsd:double }?,
attribute RubyFontSize { xsd:double }?,
attribute RubyOpenTypePro { xsd:boolean }?,
attribute RubyXScale { xsd:double }?,
attribute RubyYScale { xsd:double }?,
attribute RubyType { RubyTypes_EnumValue }?,
attribute RubyAlignment { RubyAlignments_EnumValue }?,
attribute RubyPosition { RubyKentenPosition_EnumValue }?,
attribute RubyXOffset { xsd:double }?,
attribute RubyYOffset { xsd:double }?,
attribute RubyParentSpacing { RubyParentSpacing_EnumValue }?,
attribute RubyAutoAlign { xsd:boolean }?,
attribute RubyOverhang { xsd:boolean }?,
attribute RubyAutoScaling { xsd:boolean }?,
attribute RubyParentScalingPercent { xsd:double }?,
attribute RubyParentOverhangAmount { RubyOverhang_EnumValue }?,
attribute Warichu { xsd:boolean }?,
attribute WarichuSize { xsd:double }?,
attribute WarichuLines { xsd:short }?,
attribute WarichuLineSpacing { xsd:double }?,
attribute WarichuAlignment { WarichuAlignment_EnumValue }?,
attribute WarichuCharsAfterBreak { xsd:short }?,
attribute WarichuCharsBeforeBreak { xsd:short }?,
attribute OTFProportionalMetrics { xsd:boolean }?,
attribute OTFHVKana { xsd:boolean }?,
attribute OTFRomanItalics { xsd:boolean }?,
attribute ScaleAffectsLineHeight { xsd:boolean }?,
attribute CjkGridTracking { xsd:boolean }?,
attribute GlyphForm { AlternateGlyphForms_EnumValue }?,
attribute ParagraphGyoudori { xsd:boolean }?,
attribute RubyAutoTcyDigits { xsd:short }?,
attribute RubyAutoTcyIncludeRoman { xsd:boolean }?,
attribute RubyAutoTcyAutoScale { xsd:boolean }?,
attribute TreatIdeographicSpaceAsSpace { xsd:boolean }?,
attribute AllowArbitraryHyphenation { xsd:boolean }?,
attribute BulletsAndNumberingListType { ListType_EnumValue }?,
attribute NumberingExpression { xsd:string }?,
attribute BulletsTextAfter { xsd:string }?,
attribute NumberingLevel { xsd:int }?,
IDML File Format Specification
352 IDML File Reference: Styles
attribute NumberingContinue { xsd:boolean }?,
attribute NumberingStartAt { xsd:int }?,
attribute NumberingApplyRestartPolicy { xsd:boolean }?,
attribute BulletsAlignment { ListAlignment_EnumValue }?,
attribute NumberingAlignment { ListAlignment_EnumValue }?,
element Properties {
element BasedOn {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element AppliedFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element Leading {
(unit_type, xsd:double ) |
(enum_type, Leading_EnumValue )
}?&
element UnderlineColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element UnderlineGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element UnderlineType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element StrikeThroughColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element StrikeThroughGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element StrikeThroughType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element BalanceRaggedLines {
(bool_type, xsd:boolean ) |
(enum_type, BalanceLinesStyle_EnumValue )
}?&
element RuleAboveColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleAboveGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
IDML File Format Specification
353 IDML File Reference: Styles
element RuleAboveType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleBelowColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleBelowGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RuleBelowType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element SpanSplitColumnCount {
(short_type, xsd:short {minInclusive="1" maxInclusive="40"} ) |
(enum_type, SpanColumnCountOptions_EnumValue )
}?&
element PreviewColor {
(InDesignUIColorType_TypeDef ) |
(enum_type, NothingEnum_EnumValue )
}?&
element AllLineStyles { list_type, element ListItem {
record_type,
(
element AppliedCharacterStyle { object_type, xsd:string }&
element LineCount { long_type, xsd:int }&
element RepeatLast { long_type, xsd:int })
}*
}?&
element AllGREPStyles { list_type, element ListItem {
record_type,
(
element AppliedCharacterStyle { object_type, xsd:string }&
element GrepExpression { string_type, xsd:string })
}*
}?&
element AllNestedStyles { list_type, element ListItem {
record_type,
(
element AppliedCharacterStyle { object_type, xsd:string }&
element Delimiter {
(string_type, xsd:string ) |
(enum_type, NestedStyleDelimiters_EnumValue )
}&
element Repetition { long_type, xsd:int }&
element Inclusive { bool_type, xsd:boolean })
}*
}?&
element TabList { list_type, element ListItem {
record_type,
(
IDML File Format Specification
354 IDML File Reference: Styles
element Alignment { enum_type, TabStopAlignment_EnumValue }&
element AlignmentCharacter { string_type, xsd:string }&
element Leader { string_type, xsd:string }&
element Position { unit_type, xsd:double })
}*
}?&
element KinsokuSet {
(object_type, xsd:string ) |
(enum_type, KinsokuSet_EnumValue ) |
(string_type, xsd:string )
}?&
element Mojikumi {
(object_type, xsd:string ) |
(string_type, xsd:string ) |
(enum_type, MojikumiTableDefaults_EnumValue )
}?&
element KentenFillColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element KentenStrokeColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element KentenFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element KentenFontStyle {
(string_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue )
}?&
element RubyFill {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RubyStroke {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RubyFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RubyFontStyle {
(string_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue )
}?&
element BulletChar {
attribute BulletCharacterType { BulletCharacterType_EnumValue },
attribute BulletCharacterValue { xsd:int }
}?&
element BulletsFont {
(object_type, xsd:string ) |
IDML File Format Specification
355 IDML File Reference: Styles
(string_type, xsd:string ) |
(enum_type, AutoEnum_EnumValue )
}?&
element BulletsFontStyle {
(string_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue ) |
(enum_type, AutoEnum_EnumValue )
}?&
element BulletsCharacterStyle {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element NumberingCharacterStyle {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element AppliedNumberingList {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element NumberingFormat {
(enum_type, NumberingStyle_EnumValue ) |
(string_type, xsd:string )
}?&
element NumberingRestartPolicies {
attribute RestartPolicy { RestartPolicy_EnumValue },
attribute LowerLevel { xsd:int },
attribute UpperLevel { xsd:int }
}?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Most of the attributes and elements of a <Paragraph Style> element are shared with all other text
elements. Refer to “Common Text Properties.” The following tables describe the attributes and
elements of a <Paragraph Style> element that are not shared with all text objects.
Table 172. Paragraph Style Properties Represented as Attributes
Name Type Req Description
Imported Boolean no If true, the paragraph style was imported from
another "le.
Keyboard Shortcut string no The keyboard shortcut for the style.
Next Style string no A reference to the next paragraph style for the
paragraph style, as a unique I D (as the value of
the Self attribute of the <Paragraph Style>
element). The next paragraph style determines
the style that is applied to the next paragraph
when you enter a return at the end of a para-
graph of this style.
IDML File Format Specification
356 IDML File Reference: Styles
Table 173. Paragraph Style Properties Represented as Elements
Name Type Req Description
BasedOn string no A reference to the paragraph style that this para-
graph style is based on, as a unique I D (the value
of the Self attribute of the <Paragraph Style>
element), or as a reference to the default “[No
paragraph style]” element, in the form: $ID/[No
paragraph style]. This is the default.
IDML Example 90. Based On “[No paragraph style]“
<Paragraph Style Self="Paragraph Style\Code" Name="Code" Imported="false" Next-
Style="Paragraph Style\Code">
<Properties>
<Based On type="string">$ID/[No paragraph style]</Based On>
</Properties>
</Paragraph Style>
IDML Example 91. Based On Another Style
<Paragraph Style Self="Paragraph Style\List Styles%3a List First" Name="List First"
Imported="false" Next Style="Paragraph Style\List Styles%3a List">
<Properties>
<Based On type="object">Paragraph Style\List Styles%3a List</Based On>
</Properties>
</Paragraph Style>
6.4.3 Nested Styles
Nested styles are a feature of In Design’s paragraph formatting, and can be applied as local
formatting or as part of a paragraph style. Using nested styles, you can specify character-level
formatting for one or more ranges of text within a paragraph. Nested styles have two parts: a
delimiter that sets the end of the text range a&ected, and a character style to apply to the range of
text de"ned by the delimiter.
Nested styles are especially useful for run-in headings. For example, you can apply one character
style to the "rst letter in a paragraph and another character style that takes e&ect through the
"rst colon (:). For each nested style, you can de"ne a character that ends the style, such as a tab
character or the end of a word.
The nested style schema is included in a number of text objects (most notably the
<ParagraphStyle> and <ParagraphStyleRange> elements).
Schema Example 152. Nested Style
element AllNestedStyles { list_type, element ListItem {
record_type,
(
element AppliedCharacterStyle { object_type, xsd:string }&
element Delimiter {
(string_type, xsd:string ) |
(enum_type, NestedStyleDelimiters_EnumValue )
}&
element Repetition { long_type, xsd:int }&
element Inclusive { bool_type, xsd:boolean })
IDML File Format Specification
357 IDML File Reference: Styles
}*
}
Table 174. NestedStyle Properties Represented as Elements
Name Type Req Description
Applied Character-
Style
string yes The character style applied to the nested style, as
a reference to the Self attribute of the character
style.
Delimiter string or Nested-
Style Delimiters_
Enum Value
yes The delimiter character for the nested style.
Repetition int yes The number of instances of the delimiter
required to complete the nested style.
Inclusive boolean yes If true, the formatting of the nested style is
applied to the delimiter character.
The following example shows how a character style and a paragraph style can work together to
format text using a nested style.
IDML Example 92. NestedStyle
<CharacterStyle Self="CharacterStyle/Note" Name="Note"
FillColor="Color/C=15 M=100 Y=100 K=0" FontStyle="Bold">
<Properties>
<BasedOn type="string">$ID/[No character style]</BasedOn>
<PreviewColor type="enumeration">Nothing</PreviewColor>
<AppliedFont type="string">Myriad Pro</AppliedFont>
</Properties>
</CharacterStyle>
<ParagraphStyle Self="ParagraphStyle/note" Name="note"
NextStyle="ParagraphStyle/paragraph">
<Properties>
<BasedOn type="object">ParagraphStyle/paragraph</BasedOn>
<PreviewColor type="enumeration">Nothing</PreviewColor>
<AllNestedStyles type="list">
<ListItem type="record">
<AppliedCharacterStyle type="object">CharacterStyle/Note
</AppliedCharacterStyle>
<Delimiter type="string">:</Delimiter>
<Repetition type="long">1</Repetition>
<Inclusive type="boolean">true</Inclusive>
</ListItem>
</AllNestedStyles>
</Properties>
</ParagraphStyle>
IDML File Format Specification
358 IDML File Reference: Styles
Figure 57. Nested Style
6.4.4 Character Styles
A character style is a collection of character formatting attributes that can be applied to text in a
single step. Unlike paragraph styles, character styles do not necessarily de"ne every formatting
attribute that can be applied to a range of text. Instead, character styles typically contain only
formatting which di&ers from that of the surrounding text.
Character styles in IDML are represented the same way as paragraph styles: each document
contains a <Root Character Style Group> element, which, in turn, contains all of the <Character-
Style> and <Character Style Group> elements used in the document described by the IDML
package. The <Root Character Style Group> and <Character Style Group> elements have the same
structure.
Schema Example 153. Character Style Group
CharacterStyleGroup_Object = element CharacterStyleGroup {
attribute Self { xsd:string },
attribute Name { xsd:string },
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
CharacterStyle_Object*&
CharacterStyleGroup_Object*
)
}
IDML Example 93. Character Style Group
<Root Character Style Group Self="u6a">
<Character Style Self="Character Style\[No character style]"
Imported="false" Name="$ID/[No character style]"/>
<Character Style Self="Character Style\Emphasis" Imported="false"
Name="Emphasis" Font Style="Italic">
<Properties>
<Based On type="string">$ID/[No character style]</Based On>
</Properties>
</Character Style>
<Character Style Self="Character Style\c Inline Code" Imported="false"
IDML File Format Specification
359 IDML File Reference: Styles
Name="Inline Code" Font Style="Regular">
<Properties>
<Based On type="string">$ID/[No character style]</Based On>
<Applied Font type="string">Droid Sans Mono</Applied Font>
</Properties>
</Character Style>
<Character Style Group Self="Character Style Group\Hyperlink Styles"
Name="$ID/Hyperlink Styles">
<Character Style Self="Character Style\Hyperlink Styles%3a Email"
Imported="false" Name="Hyperlink Styles:Email">
<Properties>
<Based On type="object">Character Style\Hyperlink Styles\Hyperlink</Based On>
</Properties>
</Character Style>
<Character Style Self="Character Style\Hyperlink Styles\URL"
Imported="false" Name="Hyperlink Styles:URL">
<Properties>
<Based On type="object">Character Style\Hyperlink Styles\Hyperlink</Based On>
</Properties>
</Character Style>
<Character Style Self="Character Style\Hyperlink Styles\Hyperlink"
Imported="false" Name="Hyperlink Styles:Hyperlink">
<Properties>
<Based On type="string">$ID/[No character style]</Based On>
</Properties>
</Character Style>
</Character Style Group>
</Root Character Style Group>
Figure 58. Character Styles
Schema Example 154. Character Style
CharacterStyle_Object = element CharacterStyle {
attribute Self { xsd:string },
attribute Imported { xsd:boolean }?,
attribute FontStyle { xsd:string }?,
attribute PointSize { xsd:double }?,
attribute KerningMethod { xsd:string }?,
attribute Tracking { xsd:double }?,
attribute Capitalization { Capitalization_EnumValue }?,
attribute Position { Position_EnumValue }?,
attribute Underline { xsd:boolean }?,
attribute StrikeThru { xsd:boolean }?,
attribute Ligatures { xsd:boolean }?,
attribute NoBreak { xsd:boolean }?,
attribute HorizontalScale { xsd:double }?,
IDML File Format Specification
360 IDML File Reference: Styles
attribute VerticalScale { xsd:double }?,
attribute BaselineShift { xsd:double }?,
attribute Skew { xsd:double }?,
attribute FillTint { xsd:double }?,
attribute StrokeTint { xsd:double }?,
attribute StrokeWeight { xsd:double }?,
attribute OverprintStroke { xsd:boolean }?,
attribute OverprintFill { xsd:boolean }?,
attribute OTFFigureStyle { OTFFigureStyle_EnumValue }?,
attribute OTFOrdinal { xsd:boolean }?,
attribute OTFFraction { xsd:boolean }?,
attribute OTFDiscretionaryLigature { xsd:boolean }?,
attribute OTFTitling { xsd:boolean }?,
attribute OTFContextualAlternate { xsd:boolean }?,
attribute OTFSwash { xsd:boolean }?,
attribute UnderlineTint { xsd:double }?,
attribute UnderlineGapTint { xsd:double }?,
attribute UnderlineOverprint { xsd:boolean }?,
attribute UnderlineGapOverprint { xsd:boolean }?,
attribute UnderlineOffset { xsd:double }?,
attribute UnderlineWeight { xsd:double }?,
attribute StrikeThroughTint { xsd:double }?,
attribute StrikeThroughGapTint { xsd:double }?,
attribute StrikeThroughOverprint { xsd:boolean }?,
attribute StrikeThroughGapOverprint { xsd:boolean }?,
attribute StrikeThroughOffset { xsd:double }?,
attribute StrikeThroughWeight { xsd:double }?,
attribute FillColor { xsd:string }?,
attribute StrokeColor { xsd:string }?,
attribute AppliedLanguage { xsd:string }?,
attribute KeyboardShortcut { list { xsd:short ,xsd:short } }?,
attribute OTFSlashedZero { xsd:boolean }?,
attribute OTFHistorical { xsd:boolean }?,
attribute OTFStylisticSets { xsd:int }?,
attribute GradientFillLength { xsd:double }?,
attribute GradientFillAngle { xsd:double }?,
attribute GradientStrokeLength { xsd:double }?,
attribute GradientStrokeAngle { xsd:double }?,
attribute GradientFillStart { UnitPointType_TypeDef }?,
attribute GradientStrokeStart { UnitPointType_TypeDef }?,
attribute OTFMark { xsd:boolean }?,
attribute OTFLocale { xsd:boolean }?,
attribute PositionalForm { PositionalForms_EnumValue }?,
attribute KerningValue { xsd:double }?,
attribute Name { xsd:string },
attribute MiterLimit { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
attribute StrokeAlignment { TextStrokeAlign_EnumValue }?,
attribute EndJoin { OutlineJoin_EnumValue }?,
attribute OTFOverlapSwash { xsd:boolean }?,
attribute OTFStylisticAlternate { xsd:boolean }?,
attribute OTFJustificationAlternate { xsd:boolean }?,
attribute OTFStretchedAlternate { xsd:boolean }?,
attribute CharacterDirection { CharacterDirectionOptions_EnumValue }?,
attribute KeyboardDirection { CharacterDirectionOptions_EnumValue }?,
IDML File Format Specification
361 IDML File Reference: Styles
attribute DigitsType { DigitsTypeOptions_EnumValue }?,
attribute Kashidas { KashidasOptions_EnumValue }?,
attribute DiacriticPosition { DiacriticPositionOptions_EnumValue }?,
attribute XOffsetDiacritic { xsd:double }?,
attribute YOffsetDiacritic { xsd:double }?,
attribute ParagraphBreakType { ParagraphBreakTypes_EnumValue }?,
attribute PageNumberType { PageNumberTypes_EnumValue }?,
attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
attribute Tsume { xsd:double }?,
attribute LeadingAki { xsd:double }?,
attribute TrailingAki { xsd:double }?,
attribute CharacterRotation { xsd:double }?,
attribute Jidori { xsd:short }?,
attribute ShataiMagnification { xsd:double }?,
attribute ShataiDegreeAngle { xsd:double }?,
attribute ShataiAdjustRotation { xsd:boolean }?,
attribute ShataiAdjustTsume { xsd:boolean }?,
attribute Tatechuyoko { xsd:boolean }?,
attribute TatechuyokoXOffset { xsd:double }?,
attribute TatechuyokoYOffset { xsd:double }?,
attribute KentenTint { xsd:double }?,
attribute KentenStrokeTint { xsd:double }?,
attribute KentenWeight { xsd:double }?,
attribute KentenOverprintFill { AdornmentOverprint_EnumValue }?,
attribute KentenOverprintStroke { AdornmentOverprint_EnumValue }?,
attribute KentenKind { KentenCharacter_EnumValue }?,
attribute KentenPlacement { xsd:double }?,
attribute KentenAlignment { KentenAlignment_EnumValue }?,
attribute KentenPosition { RubyKentenPosition_EnumValue }?,
attribute KentenFontSize { xsd:double }?,
attribute KentenXScale { xsd:double }?,
attribute KentenYScale { xsd:double }?,
attribute KentenCustomCharacter { xsd:string }?,
attribute KentenCharacterSet { KentenCharacterSet_EnumValue }?,
attribute RubyTint { xsd:double }?,
attribute RubyWeight { xsd:double }?,
attribute RubyOverprintFill { AdornmentOverprint_EnumValue }?,
attribute RubyOverprintStroke { AdornmentOverprint_EnumValue }?,
attribute RubyStrokeTint { xsd:double }?,
attribute RubyFontSize { xsd:double }?,
attribute RubyOpenTypePro { xsd:boolean }?,
attribute RubyXScale { xsd:double }?,
attribute RubyYScale { xsd:double }?,
attribute RubyType { RubyTypes_EnumValue }?,
attribute RubyAlignment { RubyAlignments_EnumValue }?,
attribute RubyPosition { RubyKentenPosition_EnumValue }?,
attribute RubyXOffset { xsd:double }?,
attribute RubyYOffset { xsd:double }?,
attribute RubyParentSpacing { RubyParentSpacing_EnumValue }?,
attribute RubyAutoAlign { xsd:boolean }?,
attribute RubyOverhang { xsd:boolean }?,
attribute RubyAutoScaling { xsd:boolean }?,
attribute RubyParentScalingPercent { xsd:double }?,
attribute RubyParentOverhangAmount { RubyOverhang_EnumValue }?,
IDML File Format Specification
362 IDML File Reference: Styles
attribute Warichu { xsd:boolean }?,
attribute WarichuSize { xsd:double }?,
attribute WarichuLines { xsd:short }?,
attribute WarichuLineSpacing { xsd:double }?,
attribute WarichuAlignment { WarichuAlignment_EnumValue }?,
attribute WarichuCharsAfterBreak { xsd:short }?,
attribute WarichuCharsBeforeBreak { xsd:short }?,
attribute OTFProportionalMetrics { xsd:boolean }?,
attribute OTFHVKana { xsd:boolean }?,
attribute OTFRomanItalics { xsd:boolean }?,
attribute ScaleAffectsLineHeight { xsd:boolean }?,
attribute CjkGridTracking { xsd:boolean }?,
attribute GlyphForm { AlternateGlyphForms_EnumValue }?,
attribute RubyAutoTcyDigits { xsd:short }?,
attribute RubyAutoTcyIncludeRoman { xsd:boolean }?,
attribute RubyAutoTcyAutoScale { xsd:boolean }?,
element Properties {
element BasedOn {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element AppliedFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element Leading {
(unit_type, xsd:double ) |
(enum_type, Leading_EnumValue )
}?&
element UnderlineColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element UnderlineGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element UnderlineType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element StrikeThroughColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element StrikeThroughGapColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element StrikeThroughType {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element PreviewColor {
IDML File Format Specification
363 IDML File Reference: Styles
(InDesignUIColorType_TypeDef ) |
(enum_type, NothingEnum_EnumValue )
}?&
element KentenFillColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element KentenStrokeColor {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element KentenFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element KentenFontStyle {
(string_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue )
}?&
element RubyFill {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RubyStroke {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RubyFont {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element RubyFontStyle {
(string_type, xsd:string ) |
(enum_type, NothingEnum_EnumValue )
}?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
)
}
StyleExportTagMap_Object*
Most of the attributes and elements of a <Character Style> element are shared with all other text
elements. Refer to “Common Text Properties.” The following tables describe the attributes and
elements of a <Character Style> element that are not shared with all text objects.
Table 175. Character Style Properties Represented as Attributes
Name Type Req Description
Imported Boolean no If true, the paragraph style was imported from
another "le.
IDML File Format Specification
364 IDML File Reference: Styles
Keyboard Shortcut string no The keyboard shortcut for the style.
Name string yes The name of the character style.
Table 176. Character Style Properties Represented as Elements
Name Type Req Description
BasedOn string no A reference to the character style that this char-
acter style is based on, as a unique I D (the value
of the Self attribute of the <Character Style>
element), or as a reference to the default “[No
character style]” element, in the form: $ID/[No
character style]. This is the default.
StyleExportTagMap
The <StyleExportTagMap> element maps an export type to an export tag.
Schema Example 155. StyleExportTagMap
StyleExportTagMap_Object = element StyleExportTagMap {
attribute Self { xsd:string },
attribute ExportType { xsd:string },
attribute ExportTag { xsd:string },
attribute ExportClass { xsd:string },
attribute ExportAttributes { xsd:string }
}
Table 177. StyleExportTagMap Properties Represented as Attributes
Name Type Req Description
ExportType string yes The type of export.
ExportTag string yes The tag to map.
ExportClass string yes The class to map.
ExportAttributes string yes The attributes to map.
6.4.5 Table Styles
A table style is a collection of table formatting attributes, such as table borders and row and
column strokes, that can be applied in a single step. Table styles can be organized into table
style groups. In an IDML package, <Table Style> elements are saved inside <Table Style Group>
elements. All <Table Style> and <Table Style Group> elements exist with the <Root Table Style-
Group> element. <Table Style Group> elements can contain both <Table Style> elements and
<Table Style Group> elements.
Schema Example 156. Table Style Group
TableStyleGroup_Object = element TableStyleGroup {
attribute Self { xsd:string },
attribute Name { xsd:string },
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
IDML File Format Specification
365 IDML File Reference: Styles
}?
}
?
,
(
TableStyle_Object*&
TableStyleGroup_Object*
)
}
Schema Example 157. Table Style
TableStyle_Object = element TableStyle {
attribute Self { xsd:string },
attribute Name { xsd:string },
attribute StrokeOrder { StrokeOrderTypes_EnumValue }?,
attribute TopBorderStrokeWeight { xsd:double }?,
attribute TopBorderStrokeType { xsd:string }?,
attribute TopBorderStrokeColor { xsd:string }?,
attribute TopBorderStrokeTint { xsd:double }?,
attribute TopBorderStrokeOverprint { xsd:boolean }?,
attribute TopBorderStrokeGapColor { xsd:string }?,
attribute TopBorderStrokeGapTint { xsd:double }?,
attribute TopBorderStrokeGapOverprint { xsd:boolean }?,
attribute LeftBorderStrokeWeight { xsd:double }?,
attribute LeftBorderStrokeType { xsd:string }?,
attribute LeftBorderStrokeColor { xsd:string }?,
attribute LeftBorderStrokeTint { xsd:double }?,
attribute LeftBorderStrokeOverprint { xsd:boolean }?,
attribute LeftBorderStrokeGapColor { xsd:string }?,
attribute LeftBorderStrokeGapTint { xsd:double }?,
attribute LeftBorderStrokeGapOverprint { xsd:boolean }?,
attribute BottomBorderStrokeWeight { xsd:double }?,
attribute BottomBorderStrokeType { xsd:string }?,
attribute BottomBorderStrokeColor { xsd:string }?,
attribute BottomBorderStrokeTint { xsd:double }?,
attribute BottomBorderStrokeOverprint { xsd:boolean }?,
attribute BottomBorderStrokeGapColor { xsd:string }?,
attribute BottomBorderStrokeGapTint { xsd:double }?,
attribute BottomBorderStrokeGapOverprint { xsd:boolean }?,
attribute RightBorderStrokeWeight { xsd:double }?,
attribute RightBorderStrokeType { xsd:string }?,
attribute RightBorderStrokeColor { xsd:string }?,
attribute RightBorderStrokeTint { xsd:double }?,
attribute RightBorderStrokeOverprint { xsd:boolean }?,
attribute RightBorderStrokeGapColor { xsd:string }?,
attribute RightBorderStrokeGapTint { xsd:double }?,
attribute RightBorderStrokeGapOverprint { xsd:boolean }?,
attribute SpaceBefore { xsd:double }?,
attribute SpaceAfter { xsd:double }?,
attribute SkipFirstAlternatingStrokeRows { xsd:int }?,
attribute SkipLastAlternatingStrokeRows { xsd:int }?,
attribute StartRowStrokeCount { xsd:int }?,
attribute StartRowStrokeColor { xsd:string }?,
attribute StartRowStrokeWeight { xsd:double }?,
IDML File Format Specification
366 IDML File Reference: Styles
attribute StartRowStrokeType { xsd:string }?,
attribute StartRowStrokeTint { xsd:double }?,
attribute StartRowStrokeGapOverprint { xsd:boolean }?,
attribute StartRowStrokeGapColor { xsd:string }?,
attribute StartRowStrokeGapTint { xsd:double }?,
attribute StartRowStrokeOverprint { xsd:boolean }?,
attribute EndRowStrokeCount { xsd:int }?,
attribute EndRowStrokeColor { xsd:string }?,
attribute EndRowStrokeWeight { xsd:double }?,
attribute EndRowStrokeType { xsd:string }?,
attribute EndRowStrokeTint { xsd:double }?,
attribute EndRowStrokeOverprint { xsd:boolean }?,
attribute EndRowStrokeGapColor { xsd:string }?,
attribute EndRowStrokeGapTint { xsd:double }?,
attribute EndRowStrokeGapOverprint { xsd:boolean }?,
attribute SkipFirstAlternatingStrokeColumns { xsd:int }?,
attribute SkipLastAlternatingStrokeColumns { xsd:int }?,
attribute StartColumnStrokeCount { xsd:int }?,
attribute StartColumnStrokeColor { xsd:string }?,
attribute StartColumnStrokeWeight { xsd:double }?,
attribute StartColumnStrokeType { xsd:string }?,
attribute StartColumnStrokeTint { xsd:double }?,
attribute StartColumnStrokeOverprint { xsd:boolean }?,
attribute StartColumnStrokeGapColor { xsd:string }?,
attribute StartColumnStrokeGapTint { xsd:double }?,
attribute StartColumnStrokeGapOverprint { xsd:boolean }?,
attribute EndColumnStrokeCount { xsd:int }?,
attribute EndColumnStrokeColor { xsd:string }?,
attribute EndColumnStrokeWeight { xsd:double }?,
attribute EndColumnLineStyle { xsd:string }?,
attribute EndColumnStrokeTint { xsd:double }?,
attribute EndColumnStrokeOverprint { xsd:boolean }?,
attribute EndColumnStrokeGapColor { xsd:string }?,
attribute EndColumnStrokeGapTint { xsd:double }?,
attribute EndColumnStrokeGapOverprint { xsd:boolean }?,
attribute ColumnFillsPriority { xsd:boolean }?,
attribute SkipFirstAlternatingFillRows { xsd:int }?,
attribute SkipLastAlternatingFillRows { xsd:int }?,
attribute StartRowFillColor { xsd:string }?,
attribute StartRowFillCount { xsd:int }?,
attribute StartRowFillTint { xsd:double }?,
attribute StartRowFillOverprint { xsd:boolean }?,
attribute EndRowFillCount { xsd:int }?,
attribute EndRowFillColor { xsd:string }?,
attribute EndRowFillTint { xsd:double }?,
attribute EndRowFillOverprint { xsd:boolean }?,
attribute SkipFirstAlternatingFillColumns { xsd:int }?,
attribute SkipLastAlternatingFillColumns { xsd:int }?,
attribute StartColumnFillCount { xsd:int }?,
attribute StartColumnFillColor { xsd:string }?,
attribute StartColumnFillTint { xsd:double }?,
attribute StartColumnFillOverprint { xsd:boolean }?,
attribute EndColumnFillCount { xsd:int }?,
attribute EndColumnFillColor { xsd:string }?,
IDML File Format Specification
367 IDML File Reference: Styles
attribute EndColumnFillTint { xsd:double }?,
attribute EndColumnFillOverprint { xsd:boolean }?,
attribute HeaderRegionSameAsBodyRegion { xsd:boolean }?,
attribute FooterRegionSameAsBodyRegion { xsd:boolean }?,
attribute LeftColumnRegionSameAsBodyRegion { xsd:boolean }?,
attribute RightColumnRegionSameAsBodyRegion { xsd:boolean }?,
attribute HeaderRegionCellStyle { xsd:string }?,
attribute FooterRegionCellStyle { xsd:string }?,
attribute LeftColumnRegionCellStyle { xsd:string }?,
attribute RightColumnRegionCellStyle { xsd:string }?,
attribute BodyRegionCellStyle { xsd:string }?,
attribute KeyboardShortcut { list { xsd:short ,xsd:short } }?,
element Properties {
element BasedOn {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Table 178. TableStyle Properties Represented as Attributes
Name Type Req Description
Body Region Cell-
Style
string no The cell style of the body (i.e., not header or
footer) region.
Bottom Border-
Stroke Color
string no The color, speci"ed as a swatch (color, gradient,
tint, or mixed ink), of the bottom border stroke.
Bottom Border-
Stroke Gap Color
string no The gap color, speci"ed as a swatch (color, gradi-
ent, tint, or mixed ink), of the bottom border
stroke. Note: Valid only when bottom border
stroke type is not solid.
Bottom Border-
Stroke Gap-
Overprint
boolean no If true, the gap of the bottom border stroke will
overprint. Note: Valid only when bottom border
stroke type is not solid.
Bottom Border-
Stroke Gap Tint
double no The tint (as a percentage) of the gap color of the
bottom border stroke. (Range: 0 to 100) Note:
Valid only when bottom border stroke type is
not solid.
Bottom Border-
Stroke Overprint
boolean no If true, the bottom border stroke will overprint.
Bottom Border-
Stroke Tint
double no The tint (as a percentage) of the bottom border
stroke. (Range: 0 to 100)
Bottom Border-
Stroke Type
string no The stroke type of the bottom border.
Bottom Border-
Stroke Weight
double no The stroke weight of the bottom border stroke.
IDML File Format Specification
368 IDML File Reference: Styles
Name Column Fills-
Priority
End Column Fill-
Color
End Column Fill-
Count
End Column Fill-
Overprint
End Column Fill Tint End Column Line-
Style
End Column Stroke-
Color
End Column Stroke-
Count
End Column Stroke-
Gap Color
End Column Stroke-
Gap Overprint
End Column Stroke-
Gap Tint
End Column Stroke-
Overprint
End Column Stroke-
Tint
Type Req Description
boolean no If true, hides alternating row "lls. If false, hides
alternating column "lls.
string no The "ll color, speci"ed as a swatch (color, gra-
dient, tint, or mixed ink), of columns in the
second alternating "ll group. Note: Valid when
alternating "lls are de"ned for table columns.
int no The number of columns in the second alternat-
ing "lls group. Note: Valid when alternating "lls
are de"ned for table columns.
boolean no If true, the columns in the second alternating
"lls group will overprint. Note: Valid when
alternating "lls are de"ned for table columns.
double no The tint (as a percentage) of the columns in the
second alternating "lls group. (Range: 0 to 100)
Note: Valid when alternating "lls are de"ned for
table columns.
string no The stroke type of columns in the second alter-
nating strokes group.
string no The stroke color, speci"ed as a swatch (color,
gradient, tint, or mixed ink), of column borders
in the second alternating column strokes group.
Note: Valid when end column stroke count is 1
or greater.
int no The number of columns in the second alternat-
ing column strokes group.
string no The stroke gap color, speci"ed as a swatch (color,
gradient, tint, or mixed ink), of column borders
in the second alternating column strokes group.
Note: Valid when end column stroke count is 1
or greater.
boolean no If true, the gap of the column border stroke in
the second alternating column strokes group
will overprint. Note: Valid when end column
stroke count is 1 or greater.
double no The tint (as a percentage) of the gap color of col-
umn borders in the second alternating column
strokes group. (Range: 0 to 100) Note: Valid
when end column stroke count is 1 or greater.
boolean no If true, the column borders in the second alter-
nating column strokes group will overprint.
Note: Valid when end column stroke count is 1
or greater.
double no The tint (as a percentage) of column borders in
the second alternating column strokes group.
(Range: 0 to 100) Note: Valid when end column
stroke count is 1 or greater.
IDML File Format Specification
369 IDML File Reference: Styles
Name End Column Stroke-
Weight
End Row Fill Color End Row Fill Count End Row Fill-
Overprint
End Row Fill Tint End Row Stroke Color End Row Stroke Count End Row Stroke Gap-
Color
End Row Stroke Gap-
Overprint
End Row Stroke Gap-
Tint
End Row Stroke-
Overprint
End Row Stroke Tint End Row Stroke Type End Row Stroke-
Weight
Type Req Description
double no The stroke weight of column borders in the
second alternating column strokes group. Note:
Valid when end column stroke count is 1 or
greater.
string no The "ll color, speci"ed as a swatch (color, gradi-
ent, tint, or mixed ink), of rows in the second
alternating "lls group. Note: Valid when alter-
nating "lls are de"ned for table rows.
int no The number of rows in the second alternating
"lls group. Note: Valid when alternating "lls are
de"ned for table rows.
boolean no If true, the rows in the second alternating "lls
group will overprint. Note: Valid when alternat-
ing "lls are de"ned for table rows.
double no The tint (as a percentage) of the rows in the
second alternating "lls group. (Range: 0 to 100)
Note: Valid when alternating "lls are de"ned for
table rows.
string no The stroke color, speci"ed as a swatch (color,
gradient, tint, or mixed ink), of row borders in
the second alternating row strokes group. Note:
Valid when end row stroke count is 1 or greater.
int no The number of rows in the second alternating
row strokes group.
string no The gap color, speci"ed as a swatch (color, gradi-
ent, tint, or mixed ink), of row borders in the
second alternating rows group. Note: Valid when
end row stroke count is 1 or greater.
boolean no If true, the gap of the row borders in the second
alternating rows group will overprint. Note:
Valid when end row stroke count is 1 or greater.
double no The tint (as a percentage) of the gap color of rows
in the second alternating strokes group. (Range:
0 to 100) Note: Valid when end row stroke count
is 1 or greater and end row stroke type is not
solid.
boolean no If true, the rows in the second alternating rows
group will overprint. Note: Valid when end row
stroke count is 1 or greater.
double no The tint (as a percentage) of the row borders in
the second alternating strokes group. (Range: 0
to 100) Note: Valid when end row stroke count is
1 or greater.
string no The stroke type of rows in the second alternating
strokes group.
double no The stroke weight of row borders in the second
alternating row strokes group. Note: Valid when
end row stroke count is 1 or greater.
IDML File Format Specification
370 IDML File Reference: Styles
Name Footer Region Cell-
Style
Footer Region Same-
As Body Region
Header Region Cell-
Style
Header Region Same-
As Body Region
Keyboard Shortcut Left Border Stroke-
Color
Left Border Stroke-
Gap Color
Left Border Stroke-
Gap Overprint
Left Border Stroke-
Gap Tint
Left Border Stroke-
Overprint
Left Border Stroke-
Tint
Left Border Stroke-
Type
Left Border Stroke-
Weight
Left Column Region-
Cell Style
Left Column Region-
Same As Body Region
Name Right Border-
Stroke Color
Right Border-
Stroke Gap Color
Right Border-
Stroke Gap-
Overprint
Right Border-
Stroke Gap Tint
Type Req Description
string no The cell style of the footer region.
boolean no If true, uses the cell style of the body region for
the footer region.
string no The cell style of the header region.
boolean no If true, use the cell style of the body region for
the header region.
no
string no The color, speci"ed as a swatch (color, gradient,
tint, or mixed ink), of the le% border stroke.
string no The gap color, speci"ed as a swatch (color, gradi-
ent, tint, or mixed ink), of the le% border stroke.
Note: Valid only when le% border stroke type is
not solid.
boolean no If true, the gap of the le% border stroke will
overprint. Note: Valid only when le% border
stroke type is not solid.
double no The tint (as a percentage) of the gap color of the
le% border stroke. (Range: 0 to 100) Note: Valid
only when le% border stroke type is not solid.
boolean no If true, the le% border stroke will overprint.
double no The tint (as a percentage) of the le% border
stroke. (Range: 0 to 100)
string no The stroke type of the le% border.
double no The stroke weight of the le% border stroke.
string no The cell style of the le% column region.
boolean no If true, uses the cell style of the body region for
the le% column region.
string yes The name of the Table Style.
string no The color, speci"ed as a swatch (color, gradient,
tint, or mixed ink), of the right border stroke.
string no The gap color, speci"ed as a swatch (color, gra-
dient, tint, or mixed ink), of the right border
stroke. Note: Valid only when right border
stroke type is not solid.
boolean no If true, the gap color of the right border stroke
will overprint. Note: Valid only when right bor-
der stroke type is not solid.
double no The tint (as a percentage) of the gap color of the
right border stroke. (Range: 0 to 100) Note: Valid
only when right border stroke type is not solid.
IDML File Format Specification
371 IDML File Reference: Styles
Name Right Border-
Stroke Overprint
Right Border-
Stroke Tint
Right Border-
Stroke Type
Right Border-
Stroke Weight
Right Column-
Region Cell Style
Right Column-
Region Same As Body-
Region
Skip First-
Alternating Fill-
Columns
Skip First-
Alternating Fill-
Rows
Skip First-
Alternating-
Stroke Columns
Skip First-
Alternating-
Stroke Rows
Skip Last-
Alternating Fill-
Columns
Skip Last-
Alternating Fill-
Rows
Skip Last-
Alternating-
Stroke Columns
Type Req Description
boolean no If true, the right border stroke will overprint.
double no The tint (as a percentage) of the right border
stroke. (Range: 0 to 100)
string no The stroke type of the right border.
double no The stroke weight of the right border stroke.
string no The cell style of the right column region.
boolean no If true, uses the cell style of the body region for
the right column region.
int no The number of columns on the le% side of the
table to skip before applying the column "ll col-
or. Note: Valid when alternating "lls are de"ned
for table columns.
int no The number of body rows at the beginning of the
table to skip before applying the row "ll color.
Note: Valid when alternating "lls are de"ned for
table rows. For information on body rows, see
body row count.
int no The number of columns on the le% of the table
in which to skip border stroke formatting. Note:
Valid when start column stroke count is 1 or
greater and/or end column stroke count is 1 or
greater.
int no The number of body rows at the beginning of
the table in which to skip border stroke format-
ting. Note: Valid when start row stroke count is
1 or greater and/or end row stroke count is 1 or
greater. For information on body rows, see body
row count.
int no The number columns on the right side of the
table in which to not apply the column "ll color.
Note: Valid when alternating "lls are de"ned for
table columns.
int no The number of body rows at the end of the table
in which to not apply the row "ll color. Note:
Valid when alternating "lls are de"ned for table
rows. For information on body rows, see body
row count.
int no The number of columns on the right side of the
table in which to skip border stroke formatting.
Note: Valid when start column stroke count is 1
or greater and/or end column stroke count is 1
or greater.
IDML File Format Specification
372 IDML File Reference: Styles
Name Skip Last-
Alternating-
Stroke Rows
Space After Space Before Start Column Fill-
Color
Start Column Fill-
Count
Start Column Fill-
Overprint
Start Column Fill-
Tint
Start Column-
Stroke Color
Start Column-
Stroke Count
Start Column-
Stroke Gap Color
Start Column-
Stroke Gap-
Overprint
Start Column-
Stroke Gap Tint
Start Column-
Stroke Overprint
Start Column-
Stroke Tint
Start Column-
Stroke Type
Type Req Description
int no The number of body rows at the end of the table
in which to skip border stroke formatting. Note:
Valid when start row stroke count is 1 or greater
and/or end row stroke count is 1 or greater. For
information on body rows, see body row count.
double no The space below the table.
double no The space above the table.
string no The "ll color, speci"ed as a swatch (color, gradi-
ent, tint, or mixed ink), of columns in the "rst
alternating "lls group. Note: Valid when alter-
nating "lls are de"ned for table columns.
int no The number of columns in the "rst alternating
"lls group. Note: Valid when alternating "lls are
de"ned for table columns.
boolean no If true, the columns in the "rst alternating "lls
group will overprint. Note: Valid when alternat-
ing "lls are de"ned for table columns.
double no The tint (as a percentage) of the columns in the
"rst alternating "lls group. (Range: 0 to 100)
Note: Valid when alternating "lls are de"ned for
table columns.
string no The stroke color, speci"ed as a swatch (color,
gradient, tint, or mixed ink), of column borders
in the "rst alternating column strokes group.
int no The number of columns in the "rst alternating
column strokes group.
string no The stroke gap color, speci"ed as a swatch (color,
gradient, tint, or mixed ink), of column borders
in the "rst alternating column strokes group.
Note: Valid when start column stroke count is 1
or greater.
boolean no If true, the gap of the column borders in the "rst
alternating column strokes group will overprint.
Note: Valid when start column stroke count is 1
or greater.
double no The tint (as a percentage) of the gap color of
column borders in the "rst alternating column
strokes group. (Range: 0 to 100) Note: Valid
when start column stroke count is 1 or greater.
boolean no If true, the column borders in the "rst alternat-
ing column strokes group will overprint. Note:
Valid when start column stroke count is 1 or
greater.
double no The tint (as a percentage) of column borders
in the "rst alternating column strokes group.
(Range: 0 to 100) Note: Valid when start column
stroke count is 1 or greater.
string no The stroke type of columns in the "rst alternat-
ing strokes group.
IDML File Format Specification
373 IDML File Reference: Styles
Name Start Column-
Stroke Weight
Start Row Fill Color Start Row Fill Count Start Row Fill-
Overprint
Start Row Fill Tint Start Row Stroke-
Color
Start Row Stroke-
Count
Start Row Stroke-
Gap Color
Start Row Stroke-
Gap Overprint
Start Row Stroke-
Gap Tint
Start Row Stroke-
Overprint
Start Row Stroke-
Tint
Start Row Stroke-
Type
Start Row Stroke-
Weight
Type Req Description
double no The stroke weight of column borders in the "rst
alternating column strokes group. Note: Valid
when start column stroke count is 1 or greater.
string no The "ll color, speci"ed as a swatch (color, gradi-
ent, tint, or mixed ink), of rows in the "rst alter-
nating "lls group. Note: Valid when alternating
"lls are de"ned for table rows.
int no The number of rows in the "rst alternating "lls
group. Note: Valid when alternating "lls are
de"ned for table rows.
boolean no If true, the rows in the "rst alternating "lls
group will overprint. Note: Valid when alternat-
ing "lls are de"ned for table rows.
double no The tint (as a percentage) of the rows in the "rst
alternating "lls group. (Range: 0 to 100) Note:
Valid when alternating "lls are de"ned for table
rows.
string no The color, speci"ed as a swatch (color, gradient,
tint, or mixed ink), of row borders in the "rst
alternating row strokes group. Note: Valid when
start row stroke count is 1 or greater.
int no The number of rows in the "rst alternating row
strokes group.
string no The stroke gap color of row borders in the "rst
alternating row strokes group, speci"ed as a
swatch (color, gradient, tint, or mixed ink). Note:
Valid when start row stroke count is 1 or greater.
boolean no If true, the gap color of the row border stroke in
the "rst alternating row strokes group will over-
print. Note: Valid when start row stroke count is
1 or greater.
double no The tint (as a percentage) of the gap color of
row borders in the "rst alternating rows group.
(Range: 0 to 100) Note: Valid when start row
stroke count is 1 or greater.
boolean no If true, the row borders in the "rst alternating
row strokes group will overprint. Note: Valid
when start row stroke count is 1 or greater.
double no The tint (as a percentage) of the borders in the
"rst alternating row strokes group. (Range: 0 to
100) Note: Valid when start row stroke count is
1 or greater.
string no The stroke type of rows in the "rst alternating
strokes group.
double no The stroke weight of row borders in the "rst
alternating row strokes group. Note: Valid when
start row stroke count is 1 or greater.
IDML File Format Specification
374 IDML File Reference: Styles
Name Type Req Description
Stroke Order Stroke Order Types_
Enum Value
no The order in which to display row and column
strokes at corners.Can be Row On Top (Places row
strokes in front of column strokes), Column-
On Top (Places column strokes in front of row
strokes), Best Joins (Places row strokes in
front of column strokes when row and col-
umn strokes are di&erent colors; joins striped
strokes and connects crossing points), or
Indesign2Compatibility (Places row strokes
in front when row and column strokes are dif-
ferent colors; joins striped strokes only at points
where strokes cross in a T-shape).
Top Border Stroke-
Color
string no The color, speci"ed as a swatch (color, gradi-
ent, tint, or mixed ink), of the table’s top border
stroke.
Top Border Stroke-
Gap Color
string no The gap color, speci"ed as a swatch (color, gradi-
ent, tint, or mixed ink), of the table’s top border
stroke. Note: Valid only when top border stroke
type is not solid.
Top Border Stroke-
Gap Overprint
boolean no If true, the gap of the top border stroke will
overprint. Note: Valid only when top border
stroke type is not solid.
Top Border Stroke-
Gap Tint
double no The tint (as a percentage) of the gap color of the
table’s top border stroke. (Range: 0 to 100) Note:
Valid only when top border stroke type is not
solid.
Top Border Stroke-
Overprint
boolean no If true, the top border strokes will overprint.
Top Border Stroke-
Tint
double no The tint (as a percentage) of the table’s top bor-
der stroke. (Range: 0 to 100)
Top Border Stroke-
Type
string no The stroke type of the top border.
Top Border Stroke-
Weight
double no The stroke weight of the table’s top border
stroke.
Table 179. TableStyle Properties Represented as Elements
Name Type Req Description
BasedOn string no The table style that the table style is based on.
Can be either:
type = "object"
A reference to the table style this table style is
based on, as a unique I D (as the value of the
Self attribute of the <Table Style> element).
or
type = "string"
A reference to the default “[No table style]” ele-
ment, in the form: $ID/[No table style].
This is the default.
IDML File Format Specification
375 IDML File Reference: Styles
6.4.6 Cell Styles
A cell style includes formatting such as cell insets, paragraph styles, and strokes and "lls. Cell
styles can be organized into cell style groups. In an IDML package, <Cell Style> elements are
saved inside <Cell Style Group> elements. All <Cell Style> and <Cell Style Group> elements exist
with the <Root Cell Style Group> element. <Cell Style Group> elements can contain both <Cell-
Style> elements and <Cell Style Group> elements.
Schema Example 158. Cell Style Group
CellStyleGroup_Object = element CellStyleGroup {
attribute Self { xsd:string },
attribute Name { xsd:string },
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
CellStyle_Object*&
CellStyleGroup_Object*
)
}
Schema Example 159. Cell Style
CellStyle_Object = element CellStyle {
attribute Self { xsd:string },
attribute AppliedParagraphStyle { xsd:string }?,
attribute GradientFillLength { xsd:double }?,
attribute GradientFillAngle { xsd:double }?,
attribute GradientFillStart { UnitPointType_TypeDef }?,
attribute TopInset { xsd:double }?,
attribute LeftInset { xsd:double }?,
attribute BottomInset { xsd:double }?,
attribute RightInset { xsd:double }?,
attribute FillColor { xsd:string }?,
attribute FillTint { xsd:double }?,
attribute OverprintFill { xsd:boolean }?,
attribute TopLeftDiagonalLine { xsd:boolean }?,
attribute TopRightDiagonalLine { xsd:boolean }?,
attribute DiagonalLineInFront { xsd:boolean }?,
attribute DiagonalLineStrokeWeight { xsd:double }?,
attribute DiagonalLineStrokeType { xsd:string }?,
attribute DiagonalLineStrokeColor { xsd:string }?,
attribute DiagonalLineStrokeTint { xsd:double }?,
attribute DiagonalLineStrokeOverprint { xsd:boolean }?,
attribute DiagonalLineStrokeGapColor { xsd:string }?,
attribute DiagonalLineStrokeGapTint { xsd:double }?,
attribute DiagonalLineStrokeGapOverprint { xsd:boolean }?,
attribute ClipContentToCell { xsd:boolean }?,
attribute FirstBaselineOffset { FirstBaseline_EnumValue }?,
attribute VerticalJustification { VerticalJustification_EnumValue }?,
attribute ParagraphSpacingLimit { xsd:double }?,
attribute MinimumFirstBaselineOffset { xsd:double {minInclusive="0"
IDML File Format Specification
376 IDML File Reference: Styles
maxInclusive="8640"} }?,
attribute RotationAngle { xsd:double }?,
attribute LeftEdgeStrokeWeight { xsd:double }?,
attribute LeftEdgeStrokeType { xsd:string }?,
attribute LeftEdgeStrokeColor { xsd:string }?,
attribute LeftEdgeStrokeTint { xsd:double }?,
attribute LeftEdgeStrokeOverprint { xsd:boolean }?,
attribute LeftEdgeStrokeGapColor { xsd:string }?,
attribute LeftEdgeStrokeGapTint { xsd:double }?,
attribute LeftEdgeStrokeGapOverprint { xsd:boolean }?,
attribute TopEdgeStrokeWeight { xsd:double }?,
attribute TopEdgeStrokeType { xsd:string }?,
attribute TopEdgeStrokeColor { xsd:string }?,
attribute TopEdgeStrokeTint { xsd:double }?,
attribute TopEdgeStrokeOverprint { xsd:boolean }?,
attribute TopEdgeStrokeGapColor { xsd:string }?,
attribute TopEdgeStrokeGapTint { xsd:double }?,
attribute TopEdgeStrokeGapOverprint { xsd:boolean }?,
attribute RightEdgeStrokeWeight { xsd:double }?,
attribute RightEdgeStrokeType { xsd:string }?,
attribute RightEdgeStrokeColor { xsd:string }?,
attribute RightEdgeStrokeTint { xsd:double }?,
attribute RightEdgeStrokeOverprint { xsd:boolean }?,
attribute RightEdgeStrokeGapColor { xsd:string }?,
attribute RightEdgeStrokeGapTint { xsd:double }?,
attribute RightEdgeStrokeGapOverprint { xsd:boolean }?,
attribute BottomEdgeStrokeWeight { xsd:double }?,
attribute BottomEdgeStrokeType { xsd:string }?,
attribute BottomEdgeStrokeColor { xsd:string }?,
attribute BottomEdgeStrokeTint { xsd:double }?,
attribute BottomEdgeStrokeOverprint { xsd:boolean }?,
attribute BottomEdgeStrokeGapColor { xsd:string }?,
attribute BottomEdgeStrokeGapTint { xsd:double }?,
attribute BottomEdgeStrokeGapOverprint { xsd:boolean }?,
attribute KeyboardShortcut { list { xsd:short ,xsd:short } }?,
attribute RotationRunsAgainstStory { xsd:boolean }?,
attribute Name { xsd:string },
element Properties {
element BasedOn {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Most of the properties of a cell style are shared with the properties of a cell, see “Cell Properties
Represented as Attributes.”
IDML File Format Specification
377 IDML File Reference: Styles
Table 180. Cell Style Properties Represented as Elements
Name Type Req Description
BasedOn string no A reference to the cell style that this cell style is
based on, as a unique I D (the value of the Self
attribute of the <CellStyle> element), or as a
reference to the default “[No cell style]” element,
in the form: $ID/[No cell style]. This is the
default.
6.4.7 Object Styles
Just as you use paragraph and character styles to quickly format text, you can use object styles to
quickly format graphics and frames. Object styles include settings for stroke, color, transparency,
drop shadows, paragraph styles, text wrap, and more. You can assign di&erent transparency
e&ects for the object, "ll, stroke, and text. Use object styles, rather than applying extensive local
formatting, to format page items.
You can apply object styles to objects, groups, and frames (including text frames). A style can
either clear and replace all object settings or it can replace only speci"c settings, leaving other
settings unchanged. You control which settings the style a&ects by including or excluding a
category of settings in the de"nition.
Object styles in an In Design document can be organized into object style groups.
All In Design documents contain a set of default object styles: “None,” “[Normal Graphics
Frame],” “[Normal Text Frame],” and “[Normal Grid].” Apart from “None,” which cannot be
edited, all of the default styles can be edited by the user, so you should de"ne these object styles in
your IDML if you plan to use them to format objects. The default object style “None” is an object
style that does not apply any formatting. Use this style when you want to apply local formatting to
page items.
For a description of the default objects styles, refer to the In Design documentation.
In an IDML package, the Styles.xml document contains a <Root Object Style Group> element,
which, in turn, contains all <Object Style> and <Object Style Group> elements. An <Object-
Style Group> element can contain other <Object Style Group> elements.
Schema Example 160. Object Style Group
ObjectStyleGroup_Object = element ObjectStyleGroup {
attribute Self { xsd:string },
attribute Name { xsd:string },
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
ObjectStyle_Object*&
ObjectStyleGroup_Object*
)
}
IDML File Format Specification
378 IDML File Reference: Styles
Schema Example 161. Object Style
ObjectStyle_Object = element ObjectStyle {
attribute Self { xsd:string },
attribute EnableTextFrameAutoSizingOptions { xsd:boolean }?,
attribute Name { xsd:string },
attribute AppliedParagraphStyle { xsd:string }?,
attribute ApplyNextParagraphStyle { xsd:boolean }?,
attribute EnableFill { xsd:boolean }?,
attribute EnableStroke { xsd:boolean }?,
attribute EnableParagraphStyle { xsd:boolean }?,
attribute EnableTextFrameGeneralOptions { xsd:boolean }?,
attribute EnableTextFrameBaselineOptions { xsd:boolean }?,
attribute EnableStoryOptions { xsd:boolean }?,
attribute EnableTextWrapAndOthers { xsd:boolean }?,
attribute EnableAnchoredObjectOptions { xsd:boolean }?,
attribute CornerRadius { xsd:double }?,
attribute FillColor { xsd:string }?,
attribute FillTint { xsd:double }?,
attribute OverprintFill { xsd:boolean }?,
attribute StrokeWeight { xsd:double }?,
attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
attribute EndCap { EndCap_EnumValue }?,
attribute EndJoin { EndJoin_EnumValue }?,
attribute StrokeType { xsd:string }?,
attribute LeftLineEnd { ArrowHead_EnumValue }?,
attribute RightLineEnd { ArrowHead_EnumValue }?,
attribute StrokeColor { xsd:string }?,
attribute StrokeTint { xsd:double }?,
attribute OverprintStroke { xsd:boolean }?,
attribute GapColor { xsd:string }?,
attribute GapTint { xsd:double }?,
attribute OverprintGap { xsd:boolean }?,
attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
attribute Nonprinting { xsd:boolean }?,
attribute GradientFillAngle { xsd:double }?,
attribute GradientStrokeAngle { xsd:double }?,
attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
attribute StrokeDashAndGap { list { xsd:double * } }?,
attribute AppliedNamedGrid { xsd:string }?,
attribute KeyboardShortcut { list { xsd:short ,xsd:short } }?,
attribute TopLeftCornerOption { CornerOptions_EnumValue }?,
attribute TopRightCornerOption { CornerOptions_EnumValue }?,
attribute BottomLeftCornerOption { CornerOptions_EnumValue }?,
attribute BottomRightCornerOption { CornerOptions_EnumValue }?,
attribute TopLeftCornerRadius { xsd:double }?,
attribute TopRightCornerRadius { xsd:double }?,
attribute BottomLeftCornerRadius { xsd:double }?,
attribute BottomRightCornerRadius { xsd:double }?,
attribute EnableFrameFittingOptions { xsd:boolean }?,
attribute CornerOption { CornerOptions_EnumValue }?,
attribute EnableStrokeAndCornerOptions { xsd:boolean }?,
element Properties {
element BasedOn {
(object_type, xsd:string ) |
IDML File Format Specification
379 IDML File Reference: Styles
(string_type, xsd:string )
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?&
}?
}
?
,
(
TextFramePreference_Object?&
BaselineFrameGridOption_Object?&
AnchoredObjectSetting_Object?&
TextWrapPreference_Object?&
StoryPreference_Object?&
FrameFittingOption_Object?&
TransparencySetting_Object?&
StrokeTransparencySetting_Object?&
FillTransparencySetting_Object?&
ContentTransparencySetting_Object?&
ObjectStyleObjectEffectsCategorySettings_Object?&
ObjectStyleStrokeEffectsCategorySettings_Object?&
ObjectStyleFillEffectsCategorySettings_Object?&
ObjectStyleContentEffectsCategorySettings_Object?
)
}
Most of the attributes and elements of an object style are shared with other elements. For more
on the <Text Frame Preference>, <Baseline Frame Grid Option>, <Text Wrap Preference>, <Frame-
Fitting Option>, <Transparency Setting>, <Stroke Transparency Setting>, and <Content-
Transparency Setting> elements, refer to the corresponding sections in the “Spreads and Master
Spreads” section. For more on the <Anchored Object Setting> and <Story Preference> elements,
see the corresponding sections in the “Stories” section.
The <Object Style Object Effects Category Settings>, <Object Style Stroke Effects Category-
Settings>, <Object Style Fill Effects Category Settings>, and <Object Style Content Effects-
Category Settings> elements are unique to an <Object Style> element. These elements contain
attributes that enable (when set to true) or disable (when false) sections of the <Object Style>. To
specify that the drop shadow settings of an object style does not a&ect the "ll of a page item, for
example you would set the value of the Enable Drop Shadow attribute of the <Object Style Stroke-
Effects Category Settings> element to false. When you do this, applying the object style will
have no e&ect on the "ll of the page item.
Schema Example 162. Object Style Object Effects Category Settings
ObjectStyleObjectEffectsCategorySettings_Object = element
ObjectStyleObjectEffectsCategorySettings {
attribute EnableTransparency { xsd:boolean }?,
attribute EnableDropShadow { xsd:boolean }?,
attribute EnableFeather { xsd:boolean }?,
attribute EnableInnerShadow { xsd:boolean }?,
attribute EnableOuterGlow { xsd:boolean }?,
attribute EnableInnerGlow { xsd:boolean }?,
attribute EnableBevelEmboss { xsd:boolean }?,
attribute EnableSatin { xsd:boolean }?,
attribute EnableDirectionalFeather { xsd:boolean }?,
attribute EnableGradientFeather { xsd:boolean }?
IDML File Format Specification
380 IDML File Reference: Styles
}
Schema Example 163. Object Style Stroke Effects Category Settings
ObjectStyleStrokeEffectsCategorySettings_Object = element
ObjectStyleStrokeEffectsCategorySettings {
attribute EnableTransparency { xsd:boolean }?,
attribute EnableDropShadow { xsd:boolean }?,
attribute EnableFeather { xsd:boolean }?,
attribute EnableInnerShadow { xsd:boolean }?,
attribute EnableOuterGlow { xsd:boolean }?,
attribute EnableInnerGlow { xsd:boolean }?,
attribute EnableBevelEmboss { xsd:boolean }?,
attribute EnableSatin { xsd:boolean }?,
attribute EnableDirectionalFeather { xsd:boolean }?,
attribute EnableGradientFeather { xsd:boolean }?
}
Schema Example 164. Object Style Fill Effects Category Settings
ObjectStyleFillEffectsCategorySettings_Object = element
ObjectStyleFillEffectsCategorySettings {
attribute EnableTransparency { xsd:boolean }?,
attribute EnableDropShadow { xsd:boolean }?,
attribute EnableFeather { xsd:boolean }?,
attribute EnableInnerShadow { xsd:boolean }?,
attribute EnableOuterGlow { xsd:boolean }?,
attribute EnableInnerGlow { xsd:boolean }?,
attribute EnableBevelEmboss { xsd:boolean }?,
attribute EnableSatin { xsd:boolean }?,
attribute EnableDirectionalFeather { xsd:boolean }?,
attribute EnableGradientFeather { xsd:boolean }?
}
Schema Example 165. Object Style Content Effects Category Settings
ObjectStyleContentEffectsCategorySettings_Object = element
ObjectStyleContentEffectsCategorySettings {
attribute EnableTransparency { xsd:boolean }?,
attribute EnableDropShadow { xsd:boolean }?,
attribute EnableFeather { xsd:boolean }?,
attribute EnableInnerShadow { xsd:boolean }?,
attribute EnableOuterGlow { xsd:boolean }?,
attribute EnableInnerGlow { xsd:boolean }?,
attribute EnableBevelEmboss { xsd:boolean }?,
attribute EnableSatin { xsd:boolean }?,
attribute EnableDirectionalFeather { xsd:boolean }?,
attribute EnableGradientFeather { xsd:boolean }?
}
Like character styles, object styles do not need to fully specify the formatting of an object.
An object style might apply only a drop shadow, while leaving the "ll color of the page item
unchanged. The following example <Object Style> element demonstrates this point—the only
di&erence between this object style and the object style it is based on is that the Mode attribute
of the <Transparency Setting> element is set to Drop (thereby turning the drop shadow on). For
more information on th e available attributes of the <Transparency Setting> element.
IDML File Format Specification
381 IDML File Reference: Styles
IDML Example 94. Object Style
<Object Style Self="Object Style\Drop Shadow" Name="Drop Shadow">
<Properties>
<Based On type="object">Object Style\[Normal Graphics Frame]</Based On>
</Properties>
<Transparency Setting Self="ud4Transparency Setting1">
<Drop Shadow Setting Self="ud4Transparency Setting1Drop Shadow Setting1"
Mode="Drop"/>
</Transparency Setting>
</Object Style>
Figure 59. Object Style
6.4.8 TOCStyles
A table of contents (TOC) can list the contents of an In Design document. A document can
contain multiple tables of contents—for example, a list of chapters and a list of illustrations. A
“TOC style” de"nes the way that a speci"c TOC is created and formatted.
In an IDML document, <TOCStyle> elements contain attributes that de"ne the properties of a
TOC. Inside a <TOCStyle> element, <TOCStyle Element> elements de"ne which paragraphs will
appear in the TOC and the formatting of each paragraph.
Schema Example 166. TOCStyle
TOCStyle_Object = element TOCStyle {
IDML File Format Specification
382 IDML File Reference: Styles
attribute Self { xsd:string },
attribute TitleStyle { xsd:string }?,
attribute Title { xsd:string }?,
attribute Name { xsd:string },
attribute RunIn { xsd:boolean }?,
attribute IncludeHidden { xsd:boolean }?,
attribute IncludeBookDocuments { xsd:boolean }?,
attribute CreateBookmarks { xsd:boolean }?,
attribute SetStoryDirection { HorizontalOrVertical_EnumValue }?,
attribute NumberedParagraphs { NumberedParagraphsOptions_EnumValue }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
,
(
)
}
TOCStyleEntry_Object*
Schema Example 167. TOCStyle Entry
TOCStyleEntry_Object = element TOCStyleEntry {
attribute Self { xsd:string },
attribute Name { xsd:string }?,
attribute Level { xsd:short }?,
attribute PageNumberPosition { PageNumberPosition_EnumValue }?,
attribute Separator { xsd:string }?,
attribute SortAlphabet { xsd:boolean }?,
element Properties {
element FormatStyle {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element PageNumberStyle {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?&
element SeparatorStyle {
(object_type, xsd:string ) |
(string_type, xsd:string )
}?
}
?
}
IDML File Format Specification
383 IDML File Reference: Styles
Table 181. TOCStyle Properties Represented as Attributes
Name Type Req Description
Create Bookmarks boolean no If true, creates bookmarks for T OC entries.
Include Book-
Documents
boolean no If true, includes the entire book in the T OC. If
false, includes only the T OC entries in the cur-
rent document. Note: Valid when the current
document is part of a book.
Include Hidden boolean no If true, the T OC includes entries from text on
hidden layers (this applies to the next TOC gen-
erated by a user, not to a TOC that has already
been placed in a document).
Name string no The name of the T OC Style.
Numbered-
Paragraphs
Numbered-
Paragraphs-
Options_Enum Value
no The format for importing numbered paragraphs
into the T OC. Can be Include Full Paragraph,
Include Numbers Only, or Exclude Numbers.
Run In boolean no If true, the lowest-level T OC entries are placed
on the same line as the previous entry.
Set Story Direction Horizontal Or-
Vertical_Enum-
Value
no The table of contents story direction. Can be
Left To Right Direction or Right To Left-
Direction.
Title string no The T OC title.
Title Style string no The paragraph style applied to the T OC title.
Table 182. TOCStyle Entry Properties Represented as Attributes
Name Type Req Description
Level short no The indent level of the entry in the T OC.
Name string no The name of the T OC Style Entry.
Page Number-
Position
Page Number-
Position_Enum-
Value
no The page number placement for the T OC entry
style. Can be After Entry, Before Entry, or
None.
Self string yes The unique I D of the object.
Separator string no The string to insert between the entry text and
the page numbers.
Sort Alphabet boolean no If true, sorts the T OC entries alphabetically.
Table 183. TOCStyle Entry Properties Represented as Elements
Name Type Req Description
IDML File Format Specification
384 IDML File Reference: Styles
Format Style string no The paragraph style applied to the T OC entry.
Can be either:
type = "object"
A reference to a paragraph style as a unique
I D (the value of the Self attribute of the
<Paragraph Style> element).
or
type = "string"
A reference to the default “[No paragraph style]”
element, in the form: $ID/[No paragraph
style]. This is the default.
Page Number Style string no The character style applied to the page number
of the entry.
Can be either:
type = "object"
A reference to a character style as a unique
I D (the value of the Self attribute of the
<Character Style> element).
or
type = "string"
A reference to the default “[No character style]”
element, in the form: $ID/[No character
style]. This is the default.
Separator Style string no The character style applied to the separator of
the entry.
Can be either:
type = "object"
A reference to a character style as a unique
I D (the value of the Self attribute of the
<Character Style> element).
or
type = "string"
A reference to the default “[No character style]”
element, in the form: $ID/[No character
style]. This is the default.
IDML Example 95. TOCStyle
<TOCStyle Self="TOCStyle\k Default TOCStyle Name" Title Style="Paragraph Style\k[No
paragraph style]" Title="Contents" Name="$ID/Default TOCStyle Name" Run In="false"
Include Hidden="false" Include Book Documents="false" Create Bookmarks="true" Set-
Story Direction="Horizontal" Numbered Paragraphs="Include Full Paragraph"/>
<TOCStyle Self="TOCStyle\c Example TOCStyle" Title Style="Paragraph Style\c Contents-
Title" Title="Contents" Name="Example TOCStyle" Run In="false" Include Hidden="false"
Include Book Documents="false" Create Bookmarks="true" Numbered Paragraphs="Include-
Full Paragraph">
<TOCStyle Entry Self="ue4TOCStyle Entry0" Name="Headings:Heading1" Level="1"
Page Number Position="After Entry" Separator="$ID/^t" Sort Alphabet="false">
<Properties>
<Format Style type="object">Paragraph Style\TOCHeading1</Format Style>
<Page Number Style type="object">Character Style\Page Number</Page Number Style>
<Separator Style type="object">Character Style\Dot Leader</Separator Style>
</Properties>
</TOCStyle Entry>
<TOCStyle Entry Self="ue4TOCStyle Entry1" Name="Headings:Heading2" Level="2"
Page Number Position="After Entry" Separator="$ID/^t" Sort Alphabet="false">
IDML File Format Specification
385 IDML File Reference: Styles
<Properties>
<Format Style type="object">Paragraph Style\TOCHeading2</Format Style>
<Page Number Style type="object">Character Style\Page Number</Page Number Style>
<Separator Style type="object">Character Style\Dot Leader</Separator Style>
</Properties>
</TOCStyle Entry>
<TOCStyle Entry Self="ue4TOCStyle Entry2" Name="Headings:Heading3" Level="3"
Page Number Position="After Entry" Separator="$ID/^t" Sort Alphabet="false">
<Properties>
<Format Style type="object">Paragraph Style\TOCHeading3</Format Style>
<Page Number Style type="object">Character Style\Page Number</Page Number Style>
<Separator Style type="object">Character Style\Dot Leader</Separator Style>
</Properties>
</TOCStyle Entry>
</TOCStyle>
Figure 60. TOCStyle
6.4.9 Trap Presets
A trap preset is a collection of trapping settings you can apply to a page or range of pages in an
In Design document. Trap presets can be applied to the entire document, to ranges of pages, or to
individual pages. If no trap preset is applied, In Design will use the [Default] trap preset to trap a
document.
Trap presets in an IDML package are stored as <Trap Preset> elements.
Schema Example 168. Trap Preset
TrapPreset_Object = element TrapPreset {
attribute Self { xsd:string },
attribute Name { xsd:string },
attribute DefaultTrapWidth { xsd:double {minInclusive="0" maxInclusive="8"} }?,
attribute BlackWidth { xsd:double {minInclusive="0" maxInclusive="8"} }?,
attribute TrapJoin { EndJoin_EnumValue }?,
attribute TrapEnd { TrapEndTypes_EnumValue }?,
IDML File Format Specification
386 IDML File Reference: Styles
attribute ObjectsToImages { xsd:boolean }?,
attribute ImagesToImages { xsd:boolean }?,
attribute InternalImages { xsd:boolean }?,
attribute OneBitImages { xsd:boolean }?,
attribute ImagePlacement { TrapImagePlacementTypes_EnumValue }?,
attribute StepThreshold { xsd:double {minInclusive="1" maxInclusive="100"} }?,
attribute BlackColorThreshold { xsd:double {minInclusive="0" maxInclusive="100"}
}?,
attribute BlackDensity { xsd:double {minInclusive="0" maxInclusive="10"} }?,
attribute SlidingTrapThreshold { xsd:double {minInclusive="0"
maxInclusive="100"} }?,
attribute ColorReduction { xsd:double {minInclusive="0" maxInclusive="100"} }?,
element Properties {
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
IDML Example 96. Trap Preset
<Trap Preset Self="Trap Preset\Example Trap Preset" Name="Example Trap Preset" Default-
Trap Width="0.25" Black Width="0.5" Trap Join="Miter End Join" Trap End="Miter Trap-
Ends" Objects To Images="true" Images To Images="true" Internal Images="false"
One Bit Images="true" Image Placement="Center Edges" Step Threshold="10" Black-
Color Threshold="100" Black Density="1.6" Sliding Trap Threshold="70" Color-
Reduction="100"/>
Table 184. Trap Preset Properties Represented as Attributes
Name Type Req Description
Black Color-
Threshold
double no The minimum amount (as a percentage) of black
ink required before the black width setting is
applied. (Range: 0 to 100)
Black Density double no The neutral density value at or above which an
ink is considered black. (Range: .001 to 10)
Black Width double no The black width. (Range: 0.0 to 8.0)
Color Reduction double no The degree (as a percentage) to which compo-
nents from abutting colors are used to reduce the
trap color. (Range: 0 to 100) Note: 0% creates a
trap whose neutral density is equal to the neutral
density of the darker color.
Default Trap Width double no The default width for trapping all colors except
those involving solid black. (Range: 0.0 to 8.0)
Image Placement Trap Image-
Placement Types_
Enum Value
no The trap placement between vector objects and
bitmap images. Can be Center Edges, Choke,
Image Neutral Density, or Images Over-
Spread.
Images To Images boolean no If true, turns on trapping along the boundary of
overlapping or abutting bitmap images.
Internal Images boolean no If true, turns on trapping among colors within
individual bitmap images.
IDML File Format Specification
387 IDML File Reference: Styles
Name Type Req Description
Name string no The name of the trap preset.
Objects To Images boolean no If true, ensures that vector objects overlap bit-
map images.
One Bit Images boolean no If true, ensures that one-bit images trap to abut-
ting objects.
Sliding Trap-
Threshold
double no The di&erence (as a percentage) between the neu-
tral densities of abutting colors at which the trap
is moved from the darker side of a color edge
toward the centerline. (Range: 0 to 100)
Step Threshold double no The amount (as a percentage) that components
of abutting colors must vary before a trap is cre-
ated. (Range: 1 to 100)
Trap End Trap End Types_
Enum Value
no The shape to use at the intersection of three-way
traps. Can be Miter Trap Ends or Overlap-
Trap Ends.
Trap Join End Join_Enum Value no The join type of the trap preset. Can be Miter-
End Join, Round End Join, or Bevel End Join.
IDML File Format Specification
388 IDML File Reference: XML Elements
6.5 XML Elements
This section discusses the way that XML elements in the XML structure of an InDesign
document are represented in an IDML document.
6.5.1 BackingStory.xml
The Backing Story.xml "le in an IDML package contains any XML content in the XML structure
of the InDesign document that has not been placed in the layout.
Schema Example 169. Backing Story
BackingStory_File = element idPkg:BackingStory {
attribute DOMVersion { "7.0" },
(
XmlStory_Object*
)
}
The following example shows the <idpkg:Backing Story> element for an IDML package in
which all XML content has been placed in the layout (see the Mapping Style To Tags example in
the “Stories” section). The XML structure contains one child of the root <XMLElement> element,
which has been associated with the <Story> element in the IDML package with the Self attribute
ud8.
IDML Example 97. Backing Story
<id Pkg:Backing Story xmlns:id Pkg="http://ns.adobe.com/Adobe In Design/idml/1.0/
packaging">
<Xml Story Self="u9c">
<Paragraph Style Range Applied Paragraph Style=
"Paragraph Style\k Normal Paragraph Style">
<Character Style Range Applied Character Style=
"Character Style\k[No character style]">
<Content></Content>
<XMLElement Self="di2" Markup Tag="XMLTag\c Root">
<XMLElement Self="di2i3" Markup Tag="XMLTag\c Story" XMLContent="ud8"/>
</XMLElement>
</Character Style Range>
</Paragraph Style Range>
</Xml Story>
</id Pkg:Backing Story>
6.5.2 XMLStory
An <XMLStory> element represents XML text content that has not yet been placed in a layout. The
<XMLStory> element is identical to the <Story> element; refer to “Stories.” An <XMLStory> element
can contain <Paragraph Style Range> elements, <Character Style Range> elements, <Table>
elements, anchored frames, and all of the other elements that can appear in a <Story> element.
IDML File Format Specification
389 IDML File Reference: XML Elements
6.5.3 XMLElement
The <XMLElement> elements in an IDML "le represent XML content in the structure of an
In Design document. For an example of an <XMLElement> element in text, see “Stories.” For
an example of an <XMLElement> element associated with a page item, see “Spreads and Master
Spreads.”
Schema Example 170. XMLElement
XMLElement_Object = element XMLElement {
attribute Self { xsd:string },
attribute MarkupTag { xsd:string }?,
attribute XMLContent { xsd:string }?,
attribute NoTextMarker { xsd:boolean }?,
(
XMLAttribute_Object*&
XMLElement_Object*&
XMLComment_Object*&
XMLInstruction_Object*&
Table_Object*&
Footnote_Object*&
Note_Object*&
GaijiOwnedItemObject_Object*&
TextVariableInstance_Object*&
HyperlinkTextDestination_Object*&
Change_Object*&
HiddenText_Object*&
DTD_Object*&
Oval_Object*&
Rectangle_Object*&
GraphicLine_Object*&
Polygon_Object*&
Group_Object*&
TextFrame_Object*&
Button_Object*&
FormField_Object*&
MultiStateObject_Object*&
EPSText_Object*&
HyperlinkTextSource_Object*&
ParagraphStyleRange_Object*&
CharacterStyleRange_Object*&
Link_Object*&
element Content {text}*&
element Br {empty}*
)
}
Table 185. XMLElement Properties Represented as Attributes
Name Type Req Description
Markup Tag string no A reference to the <XMLTag> of the XML ele-
ment (as a reference to the Self attribute of the
<XMLTag>).
IDML File Format Specification
390 IDML File Reference: XML Elements
Name Type Req Description
XMLContent string no A reference to the <Story> of the XML element
(as a reference to the Self attribute of the
<Story>). Only used by the top-level XML
element in a Story.
No Text Marker XMLNo Text Marker_
Enum Value
no Used for <Table> and <Cell> elements (these
elements do not have associated marker charac-
ters in the layout.
Schema Example 171. XMLAttribute
XMLAttribute_Object = element XMLAttribute {
attribute Self { xsd:string },
attribute Name { xsd:string },
attribute Value { xsd:string }
}
Table 186. XMLAttribute Properties Represented as Attributes
Name Type Req Description
Name string yes The name of the attribute.
Value string yes The value of the attribute.
Schema Example 172. XMLInstruction
XMLInstruction_Object = element XMLInstruction {
attribute Self { xsd:string },
attribute Target { xsd:string },
attribute Data { xsd:string }?
}
Table 187. XMLInstruction Properties Represented as Attributes
Name Type Req Description
Story Offset string no The location of the <XMLInstruction>,
as a reference to the Self attribute of a
<Character Style Range> element.
Target string yes The target of the <XMLInstruction>.
Data string no The contents of the <XMLInstruction>.
Schema Example 173. XMLComment
XMLComment_Object = element XMLComment {
attribute Self { xsd:string },
attribute Value { xsd:string }?
}
Table 188. XMLComment Properties Represented as Attributes
Name Type Req Description
Story Offset string no The location of the <XMLInstruction>,
as a reference to the Self attribute of a
<Character Style Range> element.
Value string no The contents of the <XMLComment>.
IDML File Format Specification
391 IDML File Reference: Mapping
Schema Example 174. DTD
DTD_Object = element DTD {
attribute Self { xsd:string },
element Properties {
element Contents {
(string_type, xsd:string ) |
(enum_type, SpecialCharacters_EnumValue ) |
(object_type, xsd:string )
}?
}
?
}
Table 189. DTD Properties Represented as Attributes
Name Type Req Description
Story Offset string no The location of the <XMLInstruction>,
as a reference to the Self attribute of a
<Character Style Range> element.
Table 190. DTD Properties Represented as Elements
Name Type Req Description
Contents string or
SpecialCharacters
enumeration
no The contents of the DTD.
6.6 Mapping
The <XMLExportMap> and <XMLImportMap> elements de"ne the tag to style and style to tag
mappings in an IDML document. For more on mapping XML tags to paragraph and character
styles, refer to the In Design online help.
Schema Example 175. XMLExport Map
XMLExportMap_Object = element XMLExportMap {
attribute Self { xsd:string },
attribute MarkupTag { xsd:string },
attribute MappedStyle { xsd:string },
attribute IncludeMasterPageStories { xsd:boolean }?,
attribute IncludePasteboardStories { xsd:boolean }?,
attribute IncludeEmptyStories { xsd:boolean }?
}
IDML File Format Specification
392 IDML File Reference: Mapping
Table 191. XMLExport Map Properties Represented as Attributes
Name Type Req Description
Markup Tag string yes A reference to an <XMLTag> element in the
IDML package (as a reference to its Self attri-
bute).
Mapped Style string yes A reference to a <Paragraph Style> or
<Character Style> element in the IDML
package (as a reference to its Self
attribute).
Include Master-
Page Stories
boolean no If true, map stories that appear only on master
spreads.
Include-
Pasteboard Stories
boolean no If true, map stories that appear only on the
pasteboard.
Include Empty-
Stories
boolean no If true, map the stories that have no content.
IDML Example 98. XMLExportMap
<XMLExport Map Self="dicd" Markup Tag="XMLTag\cheading_1"
Mapped Style="Paragraph Style\cheading 1" Include Master Page Stories="false"
Include Pasteboard Stories="false" Include Empty Stories="false"/>
Schema Example 176. XMLImport Map
XMLImportMap_Object = element XMLImportMap {
attribute Self { xsd:string },
attribute MarkupTag { xsd:string },
attribute MappedStyle { xsd:string }
}
Table 192. XMLImport Map Properties Represented as Attributes
Name Type Req Description
Markup Tag string yes A reference to an <XMLTag> element in the
IDML package (as a reference to its Self attri-
bute).
Mapped Style string yes A reference to a <Paragraph Style> or
<Character Style> element in the IDML pack-
age (as a reference to its Self attribute).
IDML Example 99. XMLImportMap
<XMLImport Map Self="dicd" Markup Tag="XMLTag\cheading_1"
Mapped Style="Paragraph Style\cheading 1"/>
IDML File Format Specification
393 IDML File Reference: XMLTags
6.7 XMLTags
The <XMLTag> element represents an XML tag in an In Design document. In an IDML package,
tags are de"ne in the Tags.xml "le inside the XML folder. For more on creating and applying
XML tags, refer to the In Design online help.
Schema Example 177. XMLTag
XMLTag_Object = element XMLTag {
attribute Self { xsd:string },
attribute Name { xsd:string },
element Properties {
element TagColor { InDesignUIColorType_TypeDef }?&
element Label { element KeyValuePair { KeyValuePair_TypeDef }*
}?
}
?
}
Table 193. XMLTag Properties Represented as Attributes
Name Type Req Description
Name string yes The name of the XML tag.
Table 194. XMLTag Properties Represented as Elements
Name Type Req Description
Tag Color In Design UIColor-
Type
no The color of the XML tag. Tag Color can be a
UIColor enumeration or an RGB color as a list
of three <List Item> elements (in the order R,
G, B).
IDML Example 100. XMLTag
<XMLTag Self="XMLTag\cbody_text" Name="body_text">
<Properties>
<Tag Color type="enumeration">Yellow</Tag Color>
</Properties>
</XMLTag>
IDML File Format Specification
394 Appendix A. UCF Container Format: Overview
Appendix A. UCF Container Format
1.1 Overview
1.1.1 Purpose and Scope
This appendix de"nes the Universal Container Format. UCF is a general-purpose container
technology. It is based on the packaging principles of OCF, the OEBSP Container Format,
created by the International Digital Publishing Forum. The OCF speci"cation describes a general-
purpose container technology in the context of encapsulating OEBPS publications. While the
OCF speci"cation anticipates that the general-purpose container technology it describes will
ultimately be used in other bundling applications, the speci"cation itself does not formally
separate the generic technology from its use in the context of OEBPS. This goal of this appendix
is to do just that, specifying a generic container format that can be used by many applications,
where OCF itself is one application.
As a general container format, UCF collects a related set of "les into a single-"le container. UCF
can be used to collect "les in various document and data formats and for classes of applications.
The single-"le container enables easy transport of, management of, and random access to, the
collection.
UCF de"nes rules for how to represent an abstract collection of "les (the “abstract container”)
into physical representation within a Zip archive (the “physical container”). The rules for Zip
containers build upon and are backward compatible with the Zip technology used by Open
Document Format (ODF) 1.0.
UCF is the RECOMMENDED single-"le container technology for all Zip-based Adobe formats.
It is designed to provide a set of lightweight constraints on the use of Zip. It includes a set of
optional features including digital signatures and encryption. If an UCF-based "le format
includes this optional functionality, it should follow the UCF speci"cations for use of these
features. For example, not all UCF-based formats will make use of digital signatures. However, if
a format does include support for signatures, it should follow the UCF rules for signatures.
This appendix borrows heavily from both the UCF speci"cation and the OCF speci"cation.
Where possible, the same language is used with the permission of the IDPF. Adobe and IDPF plan
to work with OASIS to develop an open standard container format based on OCF (and most likely
called Open Container Format) that will be the basis for future versions of OCF and the Open
Document Format.
1.1.2 Definitions
ASCII
American Standard Code for Information Interchange – a 7-bit character encoding based on the
English alphabet (ANSI X3.4-1986). When used in this document, ASCII refers to the printable
IDML File Format Specification
395 Appendix A. UCF Container Format: Overview
graphic characters in the range 33 (decimal) through 126 (decimal) and the nonprintable space
character 32 (decimal).
IDML
An XML representation of an InDesign document.
IRI
Internationalized Resource Identi"er (http://www.ietf.org/rfc/rfc3987.txt).
UCF
The Universal Container Format de"ned by this speci"cation.
UCF Container
A container "le that is compliant with the format de"ned in this speci"cation.
UCF User Agent
A combination of hardware and/or so%ware that accepts documents or data packaged in an UCF
Container and makes them available to consumer of the content.
ODF
Open Document Format (http://www.oasis-open.org/committees/download.php/12572/
OpenDocument-v1.0-os.pdf).
OEBPS
Open eBook Publication Structure (http://www.idpf.org/oebps/oebps1.2/index.htm).
MIME
Multipurpose Internet Mail Extensions (http://www.ietf.org/rfc/rfc2045.txt). “MIME media
types” provide a standard methodology for specifying the content type of objects.
RFC
Literally “Request For Comments,” but more generally a document published by the Internet
Engineering Task Force (IETF). See http://www.ietf.org/rfc.html.
IDML File Format Specification
396 Appendix A. UCF Container Format: Overview
Relax NG
A schema language for XML (http://www.relaxng.org/).
Rootfile
The top-level "le of a rendition of a publication; either the “root” from which all other
components can be found or the lone "le encapsulating the rendition. The OEBPS root"le is the
OEBPS Package "le. A PDF "le containing the PDF rendition could also be a root"le.
XML
Extensible Markup Language (http://www.w3.org/TR/xml/).
Zip
A de facto industry standard bundling and compression format (http://www.pkware.com/
support/zip-application-note).
1.1.3 Relationship of UCF to Other Specifications
UCF combines subsets and applications of other speci"cations. Together, these facilitate the
construction, organization, presentation, and unambiguous interchange of electronic documents:
The OEBPS Container Format speci"cation (http://www.idpf.org/ocf/ocf1.0/).
Zip format (http://www.pkware.com/support/zip-application-note)
The Extensible Markup Language (XML) 1.0 (Fourth Edition) speci"cation (http://www.w3.org/
TR/xml/)
The Namespaces in XML 1.0 (Second Edition) speci"cation ( http://www.w3.org/TR/xml-names/)
XML-Signature Syntax and Processing (http://www.w3.org/TR/2002/REC-xmldsig-
core-20020212)
XML Encryption Syntax and Processing (http://www.w3.org/TR/2002/REC-xmlenc-
core-20021210)
Extensible Metadata Platform (XMP) (http://www.adobe.com/products/xmp/)
The Unicode Consortium. The Unicode Standard, Version 5.0.0, de"ned by: The Unicode
Standard, Version 5.0 (Boston, MA, Addison-Wesley, 2007. ISBN 0-321-48091-0), as updated from
time to time by the publication of new versions. (See http://www.unicode.org/unicode/standard/
versions for the latest version and additional information on versions of the standard and of the
Unicode Character Database).
Particular MIME media types (http://www.ietf.org/rfc/rfc4288.txt and http://www.iana.org/
assignments/media-types/index.html)
IDML File Format Specification
397 Appendix A. UCF Container Format: Conformance
Open Document Format for Office Applications (Open Document) v1.0 (http://www.oasis-open.
org/committees/download.php/12572/OpenDocument-v1.0-os.pdf)
1.2 Conformance
The keywords “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“RECOMMENDED”, “MAY”, and “OPTIONAL” in this document MUST be interpreted as
described in (http://www.ietf.org/rfc/rfc2119.txt).
This section de"nes conformance requirements for UCF.
1.2.1 Conforming Containers
The term “Conforming UCF Abstract Container” indicates an UCF Abstract Container (See
Section 2.2) that conforms to all the relevant conformance criteria de"ned in this speci"cation.
The term “Conforming UCF Zip Container” indicates a Zip archive that conforms to the relevant
Zip container conformance criteria (See Section 4) and which implements an instance of a
Conforming UCF Abstract Container.
In addition to other conformance criteria de"ned in this speci"cation, a Conforming UCF
Abstract Container MUST meet the following conditions:
• All XML "les de"ned by this speci"cation MUST be well-formed (as de"ned in XML 1.0).
• All XML de"ned by this speci"cation "les MUST be compatible with the XML 1.0
speci"cation (http://www.w3.org/TR/2006/REC-xml-20060816) and the Namespaces in XML
speci"cation (http://www.w3.org/TR/REC-xml-names).
• These conditions do not apply to "les in the container that are not de"ned by this speci"cation
("les other than container.xml, manifest.xml, metadata.xml, signatures.xml, encryption.xml,
and rights.xml).
1.2.2 Conforming User Agents
The term “Conforming UCF User Agent” indicates an UCF User Agent that supports all of the
mandatory features de"ned by this speci"cation.
An UCF User Agent that does not support all of the features de"ned in this speci"cation MUST
NOT claim to be a Conforming UCF User Agent and SHOULD provide readily available
documentation of the subset of features it supports.
1.2.3 Future Directions
It is the intent of the contributors to this speci"cation that subsequent versions of this
speci"cation continue in the directions established by the 1.0 release. Speci"cally:
IDML File Format Specification
398 Appendix A. UCF Container Format: UCF Overview
• Future versions of this speci"cation are expected to improve alignment with OASIS/ODF and
IDPF/OCF.
• Any required functionality not present in relevant official standards shall be de"ned in a
manner consistent with its eventual submission to an appropriate standards body as extensions
to existing standards.
1.3 UCF Overview
1.3.1 UCF: A General Container Technology
UCF is designed as a general container technology. In particular, UCF is designed to be upwardly
compatible with the container technology used in ODF 1.0 such that a future version of ODF
might use UCF.
1.3.2 “Abstract Container” vs. “Physical Container”
An “Abstract Container” de"nes a "le system model for the contents of the container. The "le
system model MUST have a single common root directory for all of the contents of the container.
The special "les REQUIRED by UCF MUST be included within the META-INF directory that is a
direct child of the root directory.
A “Physical Container” holds the physical manifestation of an abstract container. UCF
de"nes how an abstract container MUST be mapped to the following two physical container
technologies:
• File System Container – The mapping of an Abstract Container to a "le system within
computer storage media on a speci"c platform (e.g., a hard disk on a computer or a data CD)
MUST be a one-to-one mapping where each directory and "le within the abstract container is
represented as a directory or "le within the "le system. Section 3.3 de"nes a set of restrictions
on "le system names intended to allow "les to be easily stored in most modern "le systems.
• Zip Container - The mapping of an Abstract Container to a Zip archive is de"ned in Section 4.
If a user agent processed both types of physical container, the contents of an OCF container
MUST be processed the same no matter whether using a File System Container or a Zip
Container. In both cases, the UCF User Agent ultimately opens the root"le, from which it can
determine how to process the container.
1.4 UCF Container Contents
1.4.1 File and directory structure
The virtual "le system for the UCF “Abstract Container” MUST have a single common root
directory for all of the contents of the container.
IDML File Format Specification
399 Appendix A. UCF Container Format: UCF Container Contents
The following "le names in the root directory are reserved:
• “mimetype”
• “META-INF”
The “mimetype” "le is discussed in Section 4. The META-INF/ directory contains the reserved
"les used by UCF. These reserved "les are described in the following sections. All other "les
within the Abstract Container MAY be in any location descendant from the root directory
except for “mimetype” at the root level or directly within the META-INF directory. An UCF
based-format may include "les in the META-INF directory as long as these "les are within
subdirectories in META-INF. The names of these subdirectories MUST NOT include the “.”
character. This avoids con$icts with "les speci"ed by future versions of the UCF speci"cation.
Any "le in the META-INF directory used by UCF will include a “.” character.
It is RECOMMENDED that the contents of individual documents or applications be stored
within dedicated sub-directories to minimize potential "le name collisions in the event that
multiple renditions are used or that multiple publications per container are supported in future
versions UCF.
1.4.2 Relative IRIs for referring to other components
Files within the Abstract Container refer to each other via Relative IRI References (http://www.
ietf.org/rfc/rfc3987.txt and http://www.ietf.org/rfc/rfc3986.txt), no matter what is used for the
physical container (e.g., File System Container or Zip Container). For example, if a "le named
“chapter1.html” refers to an image "le named “image1.jpg” that is located in the same directory,
then “chapter1.html” might contain the following as part of its content:
<img src="image1.jpg" alt="…" …/>
For Relative IRI References, the Base IRI (see RFC3986) is determined by the relevant language
speci"cations for the given "le formats. For example, the CSS speci"cation de"nes how relative
IRI references work in the context of CSS style sheets and property declarations.
Unlike many language speci"cations, the Base IRIs for all "les within the META-INF/ directory
use the root folder for the Abstract Container as the default Base IRI. For example, if META-INF/
container.xml has the following content:
<?xml version="1.0"?>
<container version="1.0" xmlns="urn:oasis:names:tc:opendocument:xmlns:container">
<rootfiles>
<rootfile full-path="OEBPS/Great Expectations.opf"
media-type="application/oebps-package+xml" />
</rootfiles>
</container>
the path “OEBPS/Great Expectations.opf” is relative to the root directory for the Abstract
Container and not relative to the META-INF/ directory.
If a Relative IRI Reference contains an absolute path (an IRI that has no schema or authority but
begins with a “/”), the reference is resolved relative to the root directory of the Abstract Container.
For example, in the example in Section 2.3.1, the IRI “/OEBPS/cover.html” will refer to the "le
OEBPS/cover.html no matter what "le the IRI is found in.
IDML File Format Specification
400 Appendix A. UCF Container Format: UCF Container Contents
1.4.3 File Names
The term File Name represents the name of any type of "le, either a directory or an ordinary
"le within a directory within an Abstract Container. For a given directory within the Abstract
Container, the Path Name is a string holding all directory names in the full path concatenated
together with a “/” character separating the directory names. For a given "le within the Abstract
Container, the Path Name is the string holding all directory names concatenated together with
a “/” character separating the directory names, followed by a “/” character and then the name of
the "le. The File Name restrictions described below are designed to allow directory names and
"le names to be used without modi"cation on most commonly used operating systems. The UCF
speci"cation does not specify how a UCF User Agent that is unable to represent UCF conforming
File Names would compensate for this incompatibility.
The following statements apply to Conforming UCF Content:
• File Names MUST be UTF-8 encoded with the restrictions below
• When represented as UTF-8, File Names MUST NOT exceed 255 bytes
• When represented as UTF-8, the Path Name for any directory or "le within the Abstract
Container MUST NOT exceed 65535 bytes
• File Names MUST NOT use the following characters (These characters are not be supported
always across commonly used operating systems):
• U+0022 “ QUOTATION MARK
• U+002A * ASTERISK
• U+002E . FULL STOP, as the last character
• U+002F / SOLIDUS
• U+003A : COLON
• U+003C < LESS-THAN SIGN
• U+003E > GREATER-THAN SIGN
• U+003F ? QUESTION MARK
• U+005C \ REVERSE SOLIDUS
• The C0 controls, U+0000 through U+001F and U+007F
• File Names are case sensitive.
• Two File Names within the same directory MUST NOT map to the same string following case
normalization (http://www.unicode.org/reports/tr21/tr21-5.html). Two File Names that di&er
only in case are disallowed within the same directory.
• Two File Names within the same directory MUST NOT be canonically equivalent in the
Unicode sense.
IDML File Format Specification
401 Appendix A. UCF Container Format: UCF Container Contents
Note that some commercial Zip tools do not support the full Unicode range and may only support
the ASCII range for File Names. Content creators who want to use Zip tools that have these
restrictions MAY "nd it is best to restrict their File Names to the ASCII range. If the names of
"les can not be preserved during the unzipping process, it will be necessary to compensate for any
name translation which took place when the "les are referred to by URI from within the content.
1.4.4 Container media type identification
It is frequently necessary for applications to determine the media type of a "le. This is usually
accomplished by looking at the "le extension of the "le. This gives applications a quick way to
determine the type of the "le without looking inside the "le. UCF Container "les SHOULD use
an extension speci"c to the kind of UCF Container it is.
Unfortunately, the identi"cation of "les through the use of "le extensions is notoriously
unreliable. As a result, it is desirable to have a more robust way of identifying "les independent
of their "le names or extensions. One mechanism that has evolved for doing this is to require the
placement of speci"c information at speci"c "le o&sets. A processing agent can then check a "xed
location to determine if the "le is a speci"c type of UCF Container.
The method that has evolved for doing this in Zip archives is the inclusion of an uncompressed,
unencrypted "le called “mimetype” as the "rst "le in the Zip archive. The contents of this "le
are the media type of the "le. UCF Containers MUST place the media type as an ASCII string
in the “mimetype” "le as the "rst "le in the Zip archive. See Section 4 for more detail on this
mechanism.
1.4.5 META-INF
All valid UCF Containers MAY include a directory called “META-INF” at the root level of the
container "le system. This directory contains the "les speci"ed below that describe the contents,
metadata, signatures, encryption, rights and other information about the contained publication.
The semantics of the following "les that MAY be present at the “META-INF/” level are speci"ed.
All other "les found at the “META-INF/” level MUST be ignored by conformant UCF User
Agents.
1.4.6 Container – META-INF/container.xml (Optional)
(This is normative.)
An UCF Container MAY include a "le called “container.xml” within the “META-INF” directory
at the root level of the container "le system. If present, the container.xml "le MAY identify the
MIME type of, and path to, the root"le for the container and any OPTIONAL alternate renditions
included within the container. An UCF-based format MUST either require container.xml to
identify the root"le or specify a format-speci"c method for initiating processing of the container.
The container.xml "le MAY specify implicit relationships in the container, as described in Section
3.5.1.2.
The container.xml "le MUST NOT be encrypted.
IDML File Format Specification
402 Appendix A. UCF Container Format: UCF Container Contents
The container.xml "le contains XML that uses the “urn:oasis:names:tc:opendocument:xmlns:co
ntainer” namespace for all of its elements and attributes. The “version=”1.0”” attribute MUST be
included for all containers that conform to this version of the speci"cation.
A RELAX NG UCF schema describing the <container> element that MUST be the root element of
container.xml can be found in the Appendix A.
Rootfiles (Optional)
The <root"les> element MUST contain at least one <root"le> element.
Each <root"le> element speci"es the root"le of a single rendition of the contained publication. A
root"le o%en includes an enumeration of the other "les needed by the rendition.
The values of the full-path attributes MUST contain a “path component” (as de"ned by RFC3986)
which MUST only take the form of a “path-rootless” (as de"ned by RFC3986). The path
components are relative to the root of the container in which they are used.
Conforming UCF User Agents MUST ignore unrecognized elements (and their contents) and
unrecognized attributes within a container.xml "le, including unrecognized elements and
unrecognized attributes from other namespaces.
Conforming container.xml "les MUST be valid according to the RELAX NG UCF schema with
the <container> element as the root element a%er removing all elements (and child nodes of these
elements) and attributes from other namespaces.
Relationships (Optional)
Container.xml MAY include information that identi"es implicit rela tionships between "les in a
container. Usually, one "le explicitly referrs to an other "le. For example, an SVG page description
may reference an image. At times, it is convenient to indirectly reference a "le. For example, one
"le may have metadata associated with it stored in a second "le. Using an indirect associ ation
makes it possible to add metadata by simply creating a metadata resource and not changing the
original resource or, in fact, any resource in the package.
Beyond convenience, indirect associations enable container "les to be digitally signed while
still permitting the addition of certain kinds of data such as metada ta or annotations. For
example, a document with no annotations can be signed. Annotations can then be added without
invalidating the signature.
UCF provides a generic mechanism for establishing a relationship between two container "les.
A relationship speci"es a relationship type and a mapping from a set of source names to target
names. For any given "le, this relationship can be used to determine the related "le. However,
UCF does not require that the related "le exist.
The root <con tainer> element MAY contain a child <relationships> element. This element
MAY contain one or more child <relationship> elements that describe speci"c relationships.
Each relationship element includes attributes type and target that specify a relationship type
and a pattern that maps source to target names. The type is a quali"ed name. UCF de"nes one
relationship type, “metadata.” UCF-based formats can add other types by specifying a namespace.
The target pattern is a string that may include the following variables that are substituted when a
relationship is resolved:
IDML File Format Specification
403 Appendix A. UCF Container Format: UCF Container Contents
Variable Definition Example
path the full path to the resource /a/b/c.d
dir the directory (without the "lename) /a/b
"lename the path without the directory c.d
basename the "lename without the extension c
ext the "lename extension d
These variables are speci"ed by enclosing their name in braces and preceding the opening brace
with a “$”. Braces may be omitted if the "rst character a%er the variable name is not a letter. A
target is resolved by copying the ordinary text in the pattern and replacing the variables with
their values.
Any "le in the example container can have an associated metadata "le with the same name as the
source "le followed by the “.xmp” extension.
Manifest – META-INF/manifest.xml (Optional)
An OPTIONAL "le with the reserved name “manifest.xml” within the “META-INF” directory
at the root level of the container may appear in a valid UCF container. If present, the "le’s content
MUST be as de"ned in the ODF 1.0 manifest schema (http://www.oasis-open.org/committees/
download.php/12570/OpenDocument-manifest-schema-v1.0-os.rng).
The manifest.xml "le, if present, MUST NOT be encrypted.
Metadata – META-INF/metadata.xml (Optional)
A "le with the reserved name “metadata.xml” within the “META-INF” directory at the root level
of the container "le system may appear in a valid UCF container. This "le, if present, MUST be
used for container-level metadata. In version 1.0 of OCF, no such container-level metadata is
speci"ed.
If the “META-INF/metadata.xml” "le exists, its contents MUST be valid XML with namespace-
quali"ed elements to avoid collision with future versions of OCF that MAY specify a particular
grammar and namespace for elements and attributes within this "le.
Adobe-de"ned formats based on UCF MUST use XMP to specify metadata (http://www.adobe.
com/products/xmp/).
Digital Signatures – META-INF/signatures.xml (Optional)
An OPTIONAL “signatures.xml” "le within the “META-INF” directory at the root level of the
container "le system holds digital signatures of the container and its contents. The contents of this
"le is not speci"ed in UCF 1.0. However, a future revision of UCF will de"ne the format for this
"le. See Appendix D for the likely de"nition.
IDML File Format Specification
404 Appendix A. UCF Container Format: Zip Container
Encryption – META-INF/encryption.xml (Optional)
An OPTIONAL “encryption.xml” "le within the “META-INF” directory at the root level of
the container "le system holds all encryption information on the contents of the container. The
contents of this "le is not speci"ed in UCF 1.0. However, a future revision of UCF will de"ne the
format for this "le. See Appendix E for the likely de"nition.
Rights Management – META-INF/rights.xml (Optional)
An OPTIONAL "le with the name “rights.xml” within the “META-INF” directory at the root
level of the container "le system is a reserved name in a valid UCF container. This location is
reserved for digital rights management (DRM) information for trusted exchange of Publications
among rights holders, intermediaries, and users. In version 1.0 of UCF, there is not a REQUIRED
format for DRM information, but a future version of the UCF speci"cation MAY specify a
particular format for DRM information.
If the “META-INF/rights.xml” "le exists, it MUST be a well-formed XML document which
uses and conforms to XML Namespaces it uses, and its contents SHOULD be valid XML with
namespace-quali"ed elements to avoid collision with future versions of UCF that MAY specify a
particular format this "le.
The rights.xml "le MUST NOT be encrypted.
When the rights.xml "le is not present, the UCF container provides no information indicating
any part of the container is rights governed.
1.5 Zip Container
UCF’s Zip Container supports the Zip format as speci"ed by the application note at http://www.
pkware.com/support/zip-application-note, but with the following constraints and clari"cations:
Conforming UCF Zip Containers MUST NOT use the features in the Zip application note that
allow Zip "les to be split across multiple storage media. Conforming UCF User Agents MUST
treat any UCF "les that specify that the Zip "le is split across multiple storage media as being in
error.
Conforming UCF Zip Containers MUST only include uncompressed "les or Flate-compressed
"les within the Zip archive. Conforming UCF User Agents MUST treat any UCF Containers that
use compression techniques other than Flate as being in error.
Conforming UCF Zip Containers MAY use the Zip64 extensions and SHOULD only use those
extensions when the content requires them. Conforming UCF User Agents MUST support the
Zip64 extensions.
Conforming UCF Zip Containers MUST NOT use the encryption features de"ned by the
Zip format; instead, encryption MUST be done using the features described in Section 3.5.5.
Conforming UCF User Agents MUST treat any other UCF Zip Containers that use Zip
encryption features as being in error.
IDML File Format Specification
405 Appendix A. UCF Container Format: RELAX NG UCF Schema
It is not a requirement that Conforming UCF User Agents preserve information from an UCF
Zip Container through load and save operations that do not map to corresponding representation
within the UCF Abstract Container; in particular, a Conforming UCF User Agent does not have
to preserve CRC values, comment "elds or "elds that hold "le system information corresponding
to a particular operating system (e.g., “External "le attributes” and “Extra "eld”)
Conforming UCF Zip Containers MUST encode File System Names using UTF-8.
Here are some details about particular "elds in the Zip archive:
On the local "le header table, Conforming UCF Zip Containers MUST set the ‘version needed to
extract’ "elds to the values 10, 20 or 45 in order to match the maximum version level needed by
the given "le (e.g., 20 if De$ate is needed, 45 if Zip64 is needed). Conforming UCF User Agents
MUST treat any other values as being in error.
On the local "le header table, Conforming UCF Zip Containers MUST set the ‘compression’
method "eld to the values 0 or 8. Conforming UCF User Agents MUST treat any other values as
being in error.
Conforming UCF User Agents MUST treat UCF Zip Containers with an “Archive decryption
header” or an “Archive extra data record” as being in error.
The "rst "le in the Zip Container MUST be a "le by the ASCII name of ‘mimetype’ which
holds the MIME type for the Zip Container (i.e., “application/epub+zip” as an ASCII string; no
padding, white-space or case change). The "le MUST be neither compressed nor encrypted and
there MUST NOT be an extra "eld in its Zip header. If this is done, then the Zip Container o&ers
convenient “magic number” support as described in RFC 2048 and the following will hold true:
The bytes “PK” will be at the beginning of the "le
The bytes “mimetype” will be at position 30
The actual MIME type (i.e., the ASCII string “application/epub+zip”) will begin at position 38
1.6 RELAX NG UCF Schema
<?xml version="1.0" encoding="UTF-8"?>
<choice xmlns="http://relaxng.org/ns/structure/1.0">
<element name="container">
<attribute name="version">
<value>1.0</value>
</attribute>
<attribute name="xmlns">
<value>urn:oasis:names:tc:opendocument:xmlns:container
</value>
</attribute>
<optional>
<element name="rootfiles">
<oneOrMore>
<element name="rootfile">
<attribute name="full-path">
IDML File Format Specification
406 Appendix A. UCF Container Format: RELAX NG UCF Schema
<text/>
</attribute>
<attribute name="media-type">
<text/>
</attribute>
</element>
</oneOrMore>
</element>
</optional>
<optional>
<element name="relationships">
<oneOrMore>
<element name="relationship">
<attribute name="type">
<text/>
</attribute>
<attribute name="target">
<text/>
</attribute>
</element>
</oneOrMore>
</element>
</optional>
</element>
<element name="signatures">
<attribute name="xmlns">
<value>urn:oasis:names:tc:opendocument:xmlns:container</
value>
</attribute>
<oneOrMore>
<element name="Signature" ns="http://www.w3.org/2001/04/xmldsig#">
<externalRef
href="http://www.w3.org/Signature/2002/07/xmldsig-core-schema.rng"/>
</element>
</oneOrMore>
</element>
<element name="encryption">
<attribute name="xmlns">
<value>urn:oasis:names:tc:opendocument:xmlns:container</
value>
</attribute>
<oneOrMore>
<choice>
<element name="EncryptedData"
ns="http://www.w3.org/2001/04/xmlenc#">
<externalRef
href="http://www.w3.org/Encryption/2002/07/xenc-schema.rng"/>
</element>
<element name="EncryptedKey"
ns="http://www.w3.org/2001/04/xmlenc#">
<externalRef
href="http://www.w3.org/Encryption/2002/07/xenc-schema.rng"/>
IDML File Format Specification
407 Appendix A. UCF Container Format: RELAX NG UCF Schema
</element>
</choice>
</oneOrMore>
</element>
</choice>
The following example demonstrates the use of this UCF format to contain a signed and
encrypted OEBPS publication with an alternate PDF rendition within a Zip Container.
Ordered list of "les in the Zip Container:
mimetype
META-INF/container.xml
META-INF/signatures.xml
META-INF/encryption.xml
OEBPS/As You Like It.opf
OEBPS/book.html
OEBPS/images/cover.png
PDF/As You Like It.pdf
The mimetype "le:
application/epub+zip
The META-INF/container.xml "le:
<?xml version="1.0"?>
<container version="1.0" xmlns="urn:oasis:names:tc:opendocument:xmlns:container">
<rootfiles>
<rootfile full-path="OEBPS/As You Like It.opf"
media-type="application/oebps-package+xml" />
<rootfile full-path="OEBPS/As You Like It.pdf"
media-type="application/pdf" />
</rootfiles>
</container>
The META-INF/signatures.xml "le:
<?xml version="1.0"?>
<signatures xmlns="urn:oasis:names:tc:opendocument:xmlns:container">
<Signature Id="AsYouLikeItSignature" xmlns="http://www.w3.org/2000/09/xmldsig#">
<!-- SignedInfo is the information that is actually signed. In this case -->
<!-- the SHA1 algorithm is used to sign the canonical form of the XML <!-- documents enumerated in the Object element below -->
-->
<SignedInfo>
<CanonicalizationMethod
Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>
<SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#dsa-sha1"/>
<Reference URI="#AsYouLikeIt">
<DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<DigestValue>j6lwx3rvEPO0vKtMup4NbeVu8nk=</DigestValue>
</Reference>
</SignedInfo>
IDML File Format Specification
408 Appendix A. UCF Container Format: RELAX NG UCF Schema
<!-- The signed value of the digest above using the DSA algorithm -->
<SignatureValue>MC0CFFrVLtRlk=...</SignatureValue>
<!-- The key to use to validate the signature -->
<KeyInfo>
<KeyValue>
<DSAKeyValue>
<P>...</P><Q>...</Q><G>...</G><Y>...</Y>
</DSAKeyValue>
</KeyValue>
</KeyInfo>
<!-- The list documents to sign. Note that the canonical form of XML -->
<!-- documents is signed while the binary form of the other documents -->
<!-- is used -->
<Object>
<Manifest Id="AsYouLikeIt">
<Reference URI="OEBPS/As You Like It.opf">
<Transforms>
<Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-
c14n-20010315"/>
</Transforms>
</Reference>
<Reference URI="OEBPS/book.html">
<Transforms>
<Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-
c14n-20010315"/>
</Transforms>
</Reference>
<Reference URI="OEBPS/images/cover.png" />
<Reference URI="PDF/As You Like It.pdf" />
</Manifest>
</Object>
</Signature>
</signatures>
The META-INF/encryption.xml "le:
<?xml version="1.0"?>
<encryption
xmlns="urn:oasis:names:tc:opendocument:xmlns:container"
xmlns:enc="http://www.w3.org/2001/04/xmlenc#"
xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<-- The RSA encrypted AES-128 symmetric key used to encrypt the data -->
<enc:EncryptedKey Id="EK">
<enc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#rsa-1_5"/>
<ds:KeyInfo>
<ds:KeyName>John Smith</ds:KeyName>
</ds:KeyInfo>
<enc:CipherData>
<enc:CipherValue>xyzabc...</enc:CipherValue>
IDML File Format Specification
409 Appendix A. UCF Container Format: RELAX NG UCF Schema
</enc:CipherData>
</enc:EncryptedKey>
<!-- Each EncryptedData block identifies a single document that has been <!-- encrypted using the AES-128 algorithm. The data remains stored in it’s -->
<!-- encrypted form in the original file within the container. -->
-->
<enc:EncryptedData Id="ED1">
<enc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#kw-aes128"/>
<ds:KeyInfo>
<ds:RetrievalMethod URI="#EK"
Type="http://www.w3.org/2001/04/xmlenc#EncryptedKey"/>
</ds:KeyInfo>
<enc:CipherData>
<enc:CipherReference URI="OEBPS/book.html"/>
</enc:CipherData>
</enc:EncryptedData>
<enc:EncryptedData Id="ED2">
<enc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#kw-aes128"/>
<ds:KeyInfo>
<ds:RetrievalMethod URI="#EK"
Type="http://www.w3.org/2001/04/xmlenc#EncryptedKey"/>
</ds:KeyInfo>
<enc:CipherData>
<enc:CipherReference URI="OEBPS/images/cover.png"/>
</enc:CipherData>
</enc:EncryptedData>
<enc:EncryptedData Id="ED3">
<enc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#kw-aes128"/>
<enc:KeyInfo>
<enc:RetrievalMethod URI="#EK"
Type="http://www.w3.org/2001/04/xmlenc#EncryptedKey"/>
</enc:KeyInfo>
<enc:CipherData>
<enc:CipherReference URI="PDF/As You Like It.pdf"/>
</enc:CipherData>
</enc:EncryptedData>
</encryption>
The OEBPS/As You Like It.opf "le:
<?xml version="1.0"?>
<!DOCTYPE package PUBLIC "+//ISBN 0-9673008-1-9//DTD OEB 1.2 Package//EN"
"http://openebook.org/dtds/oeb-1.2/oebpkg12.dtd">
<package unique-identifier="Package-ID">
<metadata>
<dc-metadata xmlns:dc="http://purl.org/dc/elements/1.0"
xmlns:oebpackage="http://openebook.org/namespaces/oeb-
package/1.0">
<dc:Identifier id="Package-ID">ebook:guid-6B2DF0030656ED9D8</dc:Identifier>
<dc:Title>As You Like It</dc:Title>
<dc:Creator role="aut">William Shakespeare</dc:Creator>
IDML File Format Specification
410 Appendix A. UCF Container Format: RELAX NG UCF Schema
<dc:Identifier>0-7410-1455-6</dc:Identifier>
<dc:Subject></dc:Subject>
<dc:Type></dc:Type>
<dc:Date event="publication">3/24/2000</dc:Date>
<dc:Date event="copyright">1/1/9999</dc:Date>
<dc:Identifier scheme="ISBN">0-7410-1455-6</dc:Identifier>
<dc:Publisher>Project Gutenberg</dc:Publisher>
<dc:Language></dc:Language>
</dc-metadata>
</metadata>
<manifest>
<item id="4915" href="book.html" media-type="text/x-oeb1-document"/>
<item id="7184" href="images/cover.png" media-type="image/png" />
</manifest>
<spine>
<itemref idref="4915"/>
</spine>
</package>
The OEBPS/book.html "le:
This "le would be binary and be encrypted. Its decrypted contents might look something like:
<?xml version="1.0" ?>
<!DOCTYPE html PUBLIC
"+//ISBN 0-9673008-1-9//DTD OEB 1.2 Document//EN"
"http://openebook.org/dtds/oeb-1.2/oebdoc12.dtd">
<html>
<head>
...
</head>
<body>
...
<img src="images/cover.png" alt="Cover image: a picture of the Bard of Avon" />
...
</body>
</html>
The OEBPS/images/cover.png "le:
This "le contains the encrypted binary bytes of the cover.png "le.
The OEBPS/As You Like It.pdf "le:
This "le contains the encrypted binary bytes of the PDF "le.
IDML File Format Specification
411 Appendix A. UCF Container Format: Comparison of UCF and OCF
1.7 Comparison of UCF and OCF
As described in the introduction, UCF is OCF without the OEBPS dependencies. There are only a
few signi"cant di&erences:
The OCF speci"cation states that the media type of the container must be application/epub+zip,
while UCF speci"es that UCF-based formats should choose an appropriate media type. OCF
implicitly encourages the use of “+zip” to identify Zip-based formats.
OCF requires all XML documents in a container to be compatible with XML 1.1. UCF requires
all XML documents to be compatible with XML 1.0. (The use of XML 1.0 follows generally
recommended practice to use XML 1.0 rather than XML 1.1 unless XML 1.1 features are
required.)
OCF forbids certain characters in names. In addition to those characters, UCF also disallows
characters corresponding to the non-printing ASCII codes. While the OCF speci"cations lists
forbidden characters by ASCII names, the UCF speci"cation lists Unicode code points.
OCF requires that two "le names in a container be unique a%er case normalization. UCF also
requires that names be unique a%er character normalization using Unicode normalization form
C (canonical decomposition followed by canonical composition).
OCF requires container.xml which in turn requires speci"cation of a root"le. UCF does not
require container.xml. The rationale is that an UCF-based format can specify how to begin
processing the container.
UCF adds "le relationships, providing an application-independent method for storing and "nding
metadata associated with container "les.
OCF speci"es that the metadata.xml "le must not be encrypted, while UCF allows this. Even
when a publication is protected with encryption (usually to support digital rights management),
the IDPF wants reading systems to be able to provide users with useful metadata. IDML (and
possibly other UCF formats as well) has more general requirements and needs to leave this as an
option for the container creator.
OCF encourages but does not require each publication (in UCF, generalized to document or
application) to reside in its own directory within the container. This makes it easier to contain
multiple renditions of the publication in the container.
The UCF speci"cation has deferred the de"nition of encryption and digital signature features to a
future revision. This will provide implementers more time to evaluate the proposed de"nition.
1.8 Digital Signatures
Support of digital signatures in UCF has been deferred until a future revision of the speci"cation.
However, it is likely that the speci"cation of this feature will match the OCF speci"cation, which
follows:
An OPTIONAL “signatures.xml” "le within the “META-INF” directory at the root level of the
container "le system holds digital signatures of the container and its contents. This "le is an XML
IDML File Format Specification
412 Appendix A. UCF Container Format: Digital Signatures
document whose root element is <signatures>. The <signatures> element contains child elements
of type <Signature> as de"ned by “XML-Signature Syntax and Processing” (http://www.w3.org/
TR/2002/REC-xmldsig-core-20020212). Signatures can be applied to the publication and any
alternate renditions as a whole or to parts of the publication and renditions. XML Signature can
specify the signing of any kind of data, not just XML.
The signatusres.xml "le MUST NOT be encrypted.
When the signatures.xml "le is not present, the UCF container provides no information
indicating any part of the container is digitally signed at the container level. It is however possible
that digital signing exists within any optional alternate contained renditions.
A RELAX NG UCF schema describing the <signature> element that MUST be the root element of
signatures.xml can be found in the Appendix A.
When an UCF agent creates a signature of data in a container, it SHOULD add the new signature
as the last child <Signature> element of the <signatures> element in the signatures.xml "le.
Each <Signature> in the signatures.xml "le identi"es by IRI the data to which the signature
applies, using the XML Signature <Manifest> element and its <Reference> sub-elements.
Individual contained "les MAY be signed separately or together. Separately signing each "le
creates a digest value for the resource that can be validated independently. This approach MAY
make a Signature element larger. If "les are signed together, the set of signed "les can be listed in a
single XML Signature <Manifest> element and referred to by one or more <Signature> elements.
Any or all "les in the container can be signed in their entirety with the exception of the
signatures.xml "le since that "le will contain the computed signature information. Whether and
how the signatures.xml "le SHOULD be signed depends on the objective of the signer.
If the signer wants to allow signatures to be added or removed from the container without
invalidating the signer’s signature, the signatures.xml "le SHOULD NOT be signed.
If the signer wants any addition or removal of a signature to invalidate the signer’s signature,
the Enveloped Signature transform (de"ned in Section 6.6.4 of XML Signa ture) can be used to
sign the entire preexisting signature "le excluding the <Signature> being created. This transform
would sign all previous signatures, and it would become invalid if a subsequent signature was
added to the package.
If the signer wants the removal of an existing signature to invalidate the signer’s signature but
also wants to allow the addition of signatures, an XPath transform can be used to sign just the
existing signatures. (This is only a suggestion. The particular XPath transform is not a part of
UCF speci"cation.)
XML-Signature does not associate any semantics with a signature, however an agent MAY
include semantic information, for example, by adding information to the Signature element that
describes the signature. XML Signature describes how additional information can be added to a
signature (for example, by using the SignatureProperties element).
(This example is informative.)
The following XML expression shows the content of an example “signatures.xml” "le, and is
based on the examples found in Section 2 of “XML-Signature Syntax and Processing.” It contains
one signature, and the signature applies to two resources, OEBFPS/book.html and OEBFPS/
images/cover.jpeg, in the container.
IDML File Format Specification
413 Appendix A. UCF Container Format: Encryption
<signatures>
<SignedInfo>
<CanonicalizationMethod
<Signature Id="MyFirstSignature" xmlns="http://www.w3.org/2000/09/xmldsig#">
Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>
<SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#dsa-sha1"/>
<Reference URI="#Manifest1">
<DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<DigestValue>j6lwx3rvEPO0vKtMup4NbeVu8nk=</DigestValue>
</Reference>
</SignedInfo>
<SignatureValue>MC0CFFrVLtRlk=...</SignatureValue>
<KeyInfo>
<KeyValue>
<DSAKeyValue>
<P>...</P><Q>...</Q><G>...</G><Y>...</Y>
</DSAKeyValue>
</KeyValue>
</KeyInfo>
<Object>
<Manifest Id="Manifest1">
<Reference URI="OEBFPS/book.xml">
<Transforms>
<Transform
Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>
</Transforms>
</Reference>
<Reference URI="OEBFPS/images/cover.jpeg"/>
</Manifest>
</Object>
</Signature>
</signatures>
1.9 Encryption
Support of encryption in UCF has been deferred until a future revision of the speci"cation. With
one exception, it is likely that the speci"cation of this feature will match the OCF speci"cation,
which follows this paragraph. The exception is that it will be possible to specify that a particular
algorithm does not require Flate compression of data before encryption.
An OPTIONAL “encryption.xml” "le within the “META-INF” directory at the root level of the
container "le system holds all encryption information on the contents of the container. This "le is
an XML document whose root element is <encryption>. The <encryption> element contains child
elements of type <EncryptedKey> and <EncryptedData> as de"ned by “XML Encryption Syntax
and Processing” (http://www.w3.org/TR/2002/REC-xmlenc-core-20021210). Each EncryptedKey
element describes how one or more container "les are encrypted. Consequently, if any resource
within the container is encrypted, “encryption.xml” MUST be present to indicate that the
resource is encrypted and provide information on how it is encrypted.
An <EncryptedKey> element describes each encryption key used in the container, while an
<EncryptedData> element describes each encrypted "le. Each <EncryptedData> element refers to
an <EncryptedKey> element, as described in XML Encryption.
IDML File Format Specification
414 Appendix A. UCF Container Format: Encryption
A RELAX NG UCF schema describing the <encryption> element that MUST be the root element
of encryption.xml can be found in the Appendix A.
When the encryption.xml "le is not present, the UCF container provides no information
indicating any part of the container is encrypted.
UCF encrypts individual "les independently, trading o& some security for improved
performance, allowing the container contents to be incrementally decrypted. Encryption in this
way still exposes the directory structure and "le naming of the whole package.
UCF uses XML Encryption to provide a framework for encryption, allowing a variety of algo-
rithms to be used. XML Encryption speci"es a process for encrypting arbitrary data and
representing the result in XML. Even though an UCF container MAY contain non-XML data,
XML Encryption can be used to encrypt all data in an UCF container. UCF encryption sup ports
only encryption of whole "les. The encryption.xml "le, if present, MUST NOT be encrypted.
Encrypted data replaces unencrypted data in an UCF container. For example, if an image named
“photo.jpeg” is encrypted, the contents of the photo.jpeg resource SHOULD be replaced by its
encrypted contents. When stored in a Zip container, "les MUST be compressed before they
are encrypted; Flate compression MUST be used. Within the Zip local "le header and central
directory, encrypted "les SHOULD be listed as stored rather than Flate-compressed.
The following "les MUST never be encrypted (regardless of whether default or speci"c encryption
is requested):
• mimetype
• META-INF/container.xml
• META-INF/manifest.xml
• META-INF/metadata.xml
• META-INF/signatures.xml
• META-INF/encryption.xml
• META-INF/rights.xml
Signed resources MAY subsequently be encrypted by using the Decryption Transform for XML
Signature. This feature enables an application such as an UCF agent to distinguish data that
was encrypted before signing from data that was encrypted a%er signing. Only data that was
encrypted a%er signing MUST be decrypted before computing the digest used to validate the
signature.
(This example is informative.)
In the following example, adapted from Section 2.2.1 of “XML Encryption Syntax and
Processing,” the resource image.jpeg is encrypted using a symmetric key algorithm (AES) and the
symmetric key is further encrypted using an asymmetric key algorithm (RSA) with a key of John
Smith.
<encryption
xmlns ="urn:oasis:names:tc:opendocument:xmlns:container"
IDML File Format Specification
415 Appendix A. UCF Container Format: Encryption
xmlns:enc="http://www.w3.org/2001/04/xmlenc#"
xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<enc:EncryptedKey Id="EK">
<enc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#rsa-1_5"/>
<ds:KeyInfo>
<ds:KeyName>John Smith</ds:KeyName>
</ds:KeyInfo>
<enc:CipherData>
<enc:CipherValue>xyzabc</enc:CipherValue>
</enc:CipherData>
</enc:EncryptedKey>
<enc:EncryptedData Id="ED1">
<enc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#kw-aes128"/>
<ds:KeyInfo>
<ds:RetrievalMethod URI="#EK"
Type="http://www.w3.org/2001/04/xmlenc#EncryptedKey"/>
</ds:KeyInfo>
<enc:CipherData>
<enc:CipherReference URI="image.jpeg"/>
</enc:CipherData>
</enc:EncryptedData>
</encryption>
IDML File Format Specification
416 Appendix B. IDML Variants: InDesign Snippets (.idms files)
Appendix B. IDML Variants
This appendix discusses the variants of IDML.
The following are variants of IDML that can be written by InDesign CS5 and InCopy CS5:
• InDesign Snippets (.idms "les)
• InCopy ICML
• InCopy Assignment (.icma "les)
All of the above "le variants produce “standalone” XML "les, rather than the Zip package format
used by IDML.
Snippets and ICML "les can be distinguished by the SnippetType attribute of an <?aid> element
at the beginning of the "le:
Snippet "le <?aid SnippetType="PageItem"?>
ICML "le <?aid SnippetType="InCopyInterchange"?>
An InCopy assignment "le can be distringuished by the type attribute of an <?aid> element at the
beginning of the "le.
Assignment "le <?aid type="assignment"?>
1.1 InDesign Snippets (.idms files)
When you export the contents of a page as an InDesign snippet, InDesign creates a single XML
"le that contains the elements on the page and any style, color, layer, or other elements that might
be needed to correctly re-create and format the elements in the snippet "le when it is imported
into an InDesign document.
InDesign snippet "les are also used by InDesign’s Library feature—the library items themselves
are InDesign snippets.
When you place (import) an InDesign Snippet into an InDesign document, InDesign makes
a variety of decisions based on the formatting speci"ed in the Snippet document and the
formatting of the document itself. If a color used in a Snippet "le already exists in the InDesign
document, for example, InDesign applies the color in the document to the incoming snippet
objects, rather than using the color de"nition in the Snippet "le. This matching is based on the
name of the color. If the color does not exist in the document, however, InDesign will add the
color de"ned in the Snippet "le to the list of colors in the document, and will apply that color to
the incoming objects.
An InDesign Snippet "le contains the same elements as you would "nd in <Spread> and <Story>
elements in an IDML "le, and also contains any <ParagraphStyle>, <CharacterStyle>, <Color>,
and other elements required to support the formatting speci"ed by the elements in the "le. An
IDML File Format Specification
417 Appendix B. IDML Variants: InDesign Snippets (.idms files)
InDesign Snippet "le does not contain most of the preferences and defaults elements found in an
IDML document. The following table describes a number of points speci"c to InDesign snippets.
Table 1. Snippet Export Policies
Element Export Policy
Text frames and stories If all of the frames of a story are selected when you
export the snippet, the entire story will be exported
with the entire text contents, notes, tables, changes,
etc., as child elements of the <Story> element. If all
of the frames are not selected, then only the selected
frames are exported. Text contents, notes, tables,
changes, etc., that appear within the text frame are
exported as child elements of the <TextFrame>
element.
Hyperlink sources Hyperlink sources are exported if the hyperlink
source exists in/on an exported page item.
Hyperlink destinations Hyperlink destinations are exported if the hyper-
link destination exists in/on an exported page item.
Hyperlink page destinations Not exported.
Hyperlinks Hyperlinks are exported if the associated hyperlink
source is exported. Hyperlink destination refer-
ences are set to nothing if the hyperlink destination
itself is not exported.
Bookmarks Bookmarks are exported if the associated hyperlink
destination is exported.
XML items If the parent of the XML item (an element, process-
ing instruction, comment, etc.) is not exported,
the StoryOffset attribute of the XML item is
removed. This way, the XML item will be added
as the last child element of the root XML element
when the snippet is placed in an InDesign docu-
ment.
The following is an example InDesign Snippet "le containing a simple rectangle (thumbnail
image data was removed to save space).
IDML Example 1. InDesign Snippet Example
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<?aid style="50" type="snippet" readerVersion="7.0" featureSet="257"
product="7.0(232)" ?>
<?aid SnippetType="PageItem"?>
<Document DOMVersion="7.0" Self="d">
<Color Self="Color/Black" Model="Process" Space="CMYK"
ColorValue="0 0 0 100" ColorOverride="Specialblack"
AlternateSpace="NoAlternateColor" AlternateColorValue="" Name="Black"
ColorEditable="false" ColorRemovable="false" Visible="true"
SwatchCreatorID="7937"/>
<Swatch Self="Swatch/None" Name="None" ColorEditable="false"
ColorRemovable="false" Visible="true" SwatchCreatorID="7937"/>
<StrokeStyle Self="StrokeStyle/$ID/Solid" Name="$ID/Solid"/>
<RootCharacterStyleGroup Self="u6a">
IDML File Format Specification
418 Appendix B. IDML Variants: InDesign Snippets (.idms files)
<CharacterStyle Self="CharacterStyle/$ID/[No character style]"
Imported="false" Name="$ID/[No character style]"/>
</RootCharacterStyleGroup>
<NumberingList Self="NumberingList/$ID/[Default]" Name="$ID/[Default]"
ContinueNumbersAcrossStories="false" ContinueNumbersAcrossDocuments="false"/>
<RootParagraphStyleGroup Self="u69">
<ParagraphStyle Self="ParagraphStyle/$ID/[No paragraph style]"
Name="$ID/[No paragraph style]" Imported="false" FillColor="Color/Black"
FontStyle="Regular" PointSize="12" HorizontalScale="100"
KerningMethod="$ID/Metrics" Ligatures="true" PageNumberType="AutoPageNumber"
StrokeWeight="1" Tracking="0" Composer="HL Composer" DropCapCharacters="0"
DropCapLines="0" BaselineShift="0" Capitalization="Normal"
StrokeColor="Swatch/None" HyphenateLadderLimit="3" VerticalScale="100"
LeftIndent="0" RightIndent="0" FirstLineIndent="0" AutoLeading="120"
AppliedLanguage="$ID/English: USA" Hyphenation="true"
HyphenateAfterFirst="2" HyphenateBeforeLast="2"
HyphenateCapitalizedWords="true" HyphenateWordsLongerThan="5" NoBreak="false"
HyphenationZone="36" SpaceBefore="0" SpaceAfter="0" Underline="false"
OTFFigureStyle="Default" DesiredWordSpacing="100" MaximumWordSpacing="133"
MinimumWordSpacing="80" DesiredLetterSpacing="0" MaximumLetterSpacing="0"
MinimumLetterSpacing="0" DesiredGlyphScaling="100" MaximumGlyphScaling="100"
MinimumGlyphScaling="100" StartParagraph="Anywhere"
KeepAllLinesTogether="false" KeepWithNext="0" KeepFirstLines="2"
KeepLastLines="2" Position="Normal" StrikeThru="false"
CharacterAlignment="AlignEmCenter" KeepLinesTogether="false"
StrokeTint="-1" FillTint="-1" OverprintStroke="false" OverprintFill="false"
GradientStrokeAngle="0" GradientFillAngle="0" GradientStrokeLength="-1"
GradientFillLength="-1" GradientStrokeStart="0 0"
GradientFillStart="0 0" Skew="0" RuleAboveLineWeight="1" RuleAboveTint="-1"
RuleAboveOffset="0" RuleAboveLeftIndent="0" RuleAboveRightIndent="0"
RuleAboveWidth="ColumnWidth" RuleBelowLineWeight="1" RuleBelowTint="-1"
RuleBelowOffset="0" RuleBelowLeftIndent="0" RuleBelowRightIndent="0"
RuleBelowWidth="ColumnWidth" RuleAboveOverprint="false"
RuleBelowOverprint="false" RuleAbove="false" RuleBelow="false"
LastLineIndent="0" HyphenateLastWord="true" ParagraphBreakType="Anywhere"
SingleWordJustification="FullyJustified" OTFOrdinal="false"
OTFFraction="false" OTFDiscretionaryLigature="false" OTFTitling="false"
RuleAboveGapTint="-1" RuleAboveGapOverprint="false" RuleBelowGapTint="-1"
RuleBelowGapOverprint="false" Justification="LeftAlign"
DropcapDetail="0" PositionalForm="None" OTFMark="true" HyphenWeight="5"
OTFLocale="true" HyphenateAcrossColumns="true" KeepRuleAboveInFrame="false"
IgnoreEdgeAlignment="false" OTFSlashedZero="false" OTFStylisticSets="0"
OTFHistorical="false" OTFContextualAlternate="true"
UnderlineGapOverprint="false" UnderlineGapTint="-1" UnderlineOffset="-9999"
UnderlineOverprint="false" UnderlineTint="-1" UnderlineWeight="-9999"
StrikeThroughGapOverprint="false" StrikeThroughGapTint="-1"
StrikeThroughOffset="-9999" StrikeThroughOverprint="false"
StrikeThroughTint="-1" StrikeThroughWeight="-9999" MiterLimit="4"
StrokeAlignment="OutsideAlignment" EndJoin="MiterEndJoin" OTFSwash="false"
Tsume="0" LeadingAki="-1" TrailingAki="-1"
KinsokuType="KinsokuPushInFirst" KinsokuHangType="None" BunriKinshi="true"
RubyOpenTypePro="true" RubyFontSize="-1" RubyAlignment="RubyJIS"
RubyType="PerCharacterRuby" RubyParentSpacing="RubyParent121Aki"
RubyXScale="100" RubyYScale="100" RubyXOffset="0" RubyYOffset="0"
IDML File Format Specification
419 Appendix B. IDML Variants: InDesign Snippets (.idms files)
RubyPosition="AboveRight" RubyAutoAlign="true"
RubyParentOverhangAmount="RubyOverhangOneRuby" RubyOverhang="false"
RubyAutoScaling="false" RubyParentScalingPercent="66" RubyTint="-1"
RubyOverprintFill="Auto" RubyStrokeTint="-1" RubyOverprintStroke="Auto"
RubyWeight="-1" KentenKind="None" KentenFontSize="-1" KentenXScale="100"
KentenYScale="100" KentenPlacement="0" KentenAlignment="AlignKentenCenter"
KentenPosition="AboveRight" KentenCustomCharacter=""
KentenCharacterSet="CharacterInput" KentenTint="-1"
KentenOverprintFill="Auto" KentenStrokeTint="-1" KentenOverprintStroke="Auto"
KentenWeight="-1" Tatechuyoko="false" TatechuyokoXOffset="0"
TatechuyokoYOffset="0" AutoTcy="0" AutoTcyIncludeRoman="false" Jidori="0"
GridGyoudori="0" GridAlignFirstLineOnly="false" GridAlignment="None"
CharacterRotation="0" RotateSingleByteCharacters="false" Rensuuji="true"
ShataiMagnification="0" ShataiDegreeAngle="4500" ShataiAdjustTsume="true"
ShataiAdjustRotation="false" Warichu="false" WarichuLines="2" WarichuSize="50"
WarichuLineSpacing="0" WarichuAlignment="Auto" WarichuCharsBeforeBreak="2"
WarichuCharsAfterBreak="2" OTFHVKana="false" OTFProportionalMetrics="false"
OTFRomanItalics="false" LeadingModel="LeadingModelAkiBelow"
ScaleAffectsLineHeight="false" ParagraphGyoudori="false"
CjkGridTracking="false" GlyphForm="None" RubyAutoTcyDigits="0"
RubyAutoTcyIncludeRoman="false" RubyAutoTcyAutoScale="true"
TreatIdeographicSpaceAsSpace="false" AllowArbitraryHyphenation="false"
BulletsAndNumberingListType="NoList" NumberingStartAt="1"
NumberingLevel="1" NumberingContinue="true" NumberingApplyRestartPolicy="true"
BulletsAlignment="LeftAlign" NumberingAlignment="LeftAlign"
NumberingExpression="^#.^t" BulletsTextAfter="^t" DigitsType="DefaultDigits"
Kashidas="DefaultKashidas" DiacriticPosition="OpentypePosition"
CharacterDirection="DefaultDirection"
ParagraphDirection="LeftToRightDirection"
ParagraphJustification="DefaultJustification" XOffsetDiacritic="0"
YOffsetDiacritic="0" OTFOverlapSwash="false" OTFStylisticAlternate="false"
OTFJustificationAlternate="false" OTFStretchedAlternate="false"
KeyboardDirection="DefaultDirection">
<Properties>
<Leading type="enumeration">Auto</Leading>
<AppliedFont type="string">Times New Roman</AppliedFont>
<RuleAboveColor type="string">Text Color</RuleAboveColor>
<RuleBelowColor type="string">Text Color</RuleBelowColor>
<RuleAboveType type="object">StrokeStyle/$ID/Solid</RuleAboveType>
<RuleBelowType type="object">StrokeStyle/$ID/Solid</RuleBelowType>
<BalanceRaggedLines type="enumeration">NoBalancing</BalanceRaggedLines>
<RuleAboveGapColor type="object">Swatch/None</RuleAboveGapColor>
<RuleBelowGapColor type="object">Swatch/None</RuleBelowGapColor>
<UnderlineColor type="string">Text Color</UnderlineColor>
<UnderlineGapColor type="object">Swatch/None</UnderlineGapColor>
<UnderlineType type="object">StrokeStyle/$ID/Solid</UnderlineType>
<StrikeThroughColor type="string">Text Color</StrikeThroughColor>
<StrikeThroughGapColor type="object">Swatch/None</StrikeThroughGapColor>
<StrikeThroughType type="object">StrokeStyle/$ID/Solid
</StrikeThroughType>
<Mojikumi type="enumeration">Nothing</Mojikumi>
<KinsokuSet type="enumeration">Nothing</KinsokuSet>
<RubyFont type="string">$ID/</RubyFont>
<RubyFontStyle type="enumeration">Nothing</RubyFontStyle>
IDML File Format Specification
420 Appendix B. IDML Variants: InDesign Snippets (.idms files)
<RubyFill type="string">Text Color</RubyFill>
<RubyStroke type="string">Text Color</RubyStroke>
<KentenFont type="string">$ID/</KentenFont>
<KentenFontStyle type="enumeration">Nothing</KentenFontStyle>
<KentenFillColor type="string">Text Color</KentenFillColor>
<KentenStrokeColor type="string">Text Color</KentenStrokeColor>
<BulletChar BulletCharacterType="UnicodeOnly"
BulletCharacterValue="8226"/>
<NumberingFormat type="string">1, 2, 3, 4...</NumberingFormat>
<BulletsFont type="string">$ID/</BulletsFont>
<BulletsFontStyle type="enumeration">Nothing</BulletsFontStyle>
<AppliedNumberingList type="object">NumberingList/$ID/[Default]
</AppliedNumberingList>
<NumberingRestartPolicies RestartPolicy="AnyPreviousLevel"
LowerLevel="0" UpperLevel="0"/>
<BulletsCharacterStyle type="object">CharacterStyle/$ID/[No character
style]</BulletsCharacterStyle>
<NumberingCharacterStyle type="object">CharacterStyle/$ID/[No character
style]</NumberingCharacterStyle>
</Properties>
</ParagraphStyle>
</RootParagraphStyleGroup>
<RootObjectStyleGroup Self="u83">
<ObjectStyle Self="ObjectStyle/$ID/[None]" Name="$ID/[None]"
AppliedParagraphStyle="ParagraphStyle/$ID/[No paragraph style]"
FillColor="Swatch/None" FillTint="-1" StrokeWeight="0" MiterLimit="4"
EndCap="ButtEndCap" EndJoin="MiterEndJoin" StrokeType="StrokeStyle/$ID/Solid"
LeftLineEnd="None" RightLineEnd="None" StrokeColor="Swatch/None"
StrokeTint="-1" CornerRadius="12" GapColor="Swatch/None" GapTint="-1"
StrokeAlignment="CenterAlignment" Nonprinting="false" GradientFillAngle="0"
GradientStrokeAngle="0" AppliedNamedGrid="n" CornerOption="None">
<TextFramePreference TextColumnCount="1" TextColumnGutter="12"
TextColumnFixedWidth="144" UseFixedColumnWidth="false"
FirstBaselineOffset="AscentOffset" MinimumFirstBaselineOffset="0"
VerticalJustification="TopAlign" VerticalThreshold="0" IgnoreWrap="false">
<Properties>
<InsetSpacing type="list">
<ListItem type="unit">0</ListItem>
<ListItem type="unit">0</ListItem>
<ListItem type="unit">0</ListItem>
<ListItem type="unit">0</ListItem>
</InsetSpacing>
</Properties>
</TextFramePreference>
<BaselineFrameGridOption UseCustomBaselineFrameGrid="false"
StartingOffsetForBaselineFrameGrid="0"
BaselineFrameGridRelativeOption="TopOfInset"
BaselineFrameGridIncrement="12">
<Properties>
<BaselineFrameGridColor type="enumeration">LightBlue
</BaselineFrameGridColor>
</Properties>
</BaselineFrameGridOption>
<AnchoredObjectSetting AnchoredPosition="InlinePosition"
IDML File Format Specification
421 Appendix B. IDML Variants: InDesign Snippets (.idms files)
SpineRelative="false" LockPosition="false" PinPosition="true"
AnchorPoint="BottomRightAnchor" HorizontalAlignment="LeftAlign"
HorizontalReferencePoint="TextFrame" VerticalAlignment="BottomAlign"
VerticalReferencePoint="LineBaseline" AnchorXoffset="0" AnchorYoffset="0"
AnchorSpaceAbove="0"/>
<TextWrapPreference Inverse="false" ApplyToMasterPageOnly="false"
TextWrapSide="BothSides" TextWrapMode="None">
<Properties>
<TextWrapOffset Top="0" Left="0" Bottom="0" Right="0"/>
</Properties>
<ContourOption ContourType="SameAsClipping" IncludeInsideEdges="false"
ContourPathName="$ID/"/>
</TextWrapPreference>
<StoryPreference OpticalMarginAlignment="false" OpticalMarginSize="12"
FrameType="TextFrameType" StoryOrientation="Horizontal"
StoryDirection="UnknownDirection"/>
<FrameFittingOption LeftCrop="0" TopCrop="0" RightCrop="0" BottomCrop="0"
FittingOnEmptyFrame="None" FittingAlignment="TopLeftAnchor"/>
</ObjectStyle>
</RootObjectStyleGroup>
<TransparencyDefaultContainerObject>
<TransparencySetting>
<BlendingSetting BlendMode="Normal" Opacity="100" KnockoutGroup="false"
IsolateBlending="false"/>
<DropShadowSetting Mode="None" BlendMode="Multiply" Opacity="75" XOffset="7"
YOffset="7" Size="5" EffectColor="n" Noise="0" Spread="0"
UseGlobalLight="false" KnockedOut="true" HonorOtherEffects="false"/>
<FeatherSetting Mode="None" Width="9" CornerType="Diffusion" Noise="0"
ChokeAmount="0"/>
<InnerShadowSetting Applied="false" EffectColor="n" BlendMode="Multiply"
Opacity="75" Angle="120" Distance="7" UseGlobalLight="false" ChokeAmount="0"
Size="7" Noise="0"/>
<OuterGlowSetting Applied="false" BlendMode="Screen" Opacity="75" Noise="0"
EffectColor="n" Technique="Softer" Spread="0" Size="7"/>
<InnerGlowSetting Applied="false" BlendMode="Screen" Opacity="75" Noise="0"
EffectColor="n" Technique="Softer" Spread="0" Size="7"
Source="EdgeSourced"/>
<BevelAndEmbossSetting Applied="false" Style="InnerBevel"
Technique="SmoothContour" Depth="100" Direction="Up" Size="7"
Soften="0" Angle="120" Altitude="30" UseGlobalLight="false"
HighlightColor="n" HighlightBlendMode="Screen" HighlightOpacity="75"
ShadowColor="n" ShadowBlendMode="Multiply" ShadowOpacity="75"/>
<SatinSetting Applied="false" EffectColor="n" BlendMode="Multiply"
Opacity="50" Angle="120" Distance="7" Size="7" InvertEffect="false"/>
<DirectionalFeatherSetting Applied="false" LeftWidth="0"
RightWidth="0" TopWidth="0" BottomWidth="0" ChokeAmount="0" Angle="0"
FollowShapeMode="LeadingEdge" Noise="0"/>
<GradientFeatherSetting Applied="false" Type="Linear" Angle="0" Length="0"
GradientStart="0 0" HiliteAngle="0" HiliteLength="0"/>
</TransparencySetting>
<StrokeTransparencySetting>
<BlendingSetting BlendMode="Normal" Opacity="100" KnockoutGroup="false"
IsolateBlending="false"/>
<DropShadowSetting Mode="None" BlendMode="Multiply" Opacity="75" XOffset="7"
IDML File Format Specification
422 Appendix B. IDML Variants: InDesign Snippets (.idms files)
YOffset="7" Size="5" EffectColor="n" Noise="0" Spread="0"
UseGlobalLight="false" KnockedOut="true" HonorOtherEffects="false"/>
<FeatherSetting Mode="None" Width="9" CornerType="Diffusion" Noise="0"
ChokeAmount="0"/>
<InnerShadowSetting Applied="false" EffectColor="n" BlendMode="Multiply"
Opacity="75" Angle="120" Distance="7" UseGlobalLight="false" ChokeAmount="0"
Size="7" Noise="0"/>
<OuterGlowSetting Applied="false" BlendMode="Screen" Opacity="75" Noise="0"
EffectColor="n" Technique="Softer" Spread="0" Size="7"/>
<InnerGlowSetting Applied="false" BlendMode="Screen" Opacity="75" Noise="0"
EffectColor="n" Technique="Softer" Spread="0" Size="7"
Source="EdgeSourced"/>
<BevelAndEmbossSetting Applied="false" Style="InnerBevel"
Technique="SmoothContour" Depth="100" Direction="Up" Size="7"
Soften="0" Angle="120" Altitude="30" UseGlobalLight="false"
HighlightColor="n" HighlightBlendMode="Screen" HighlightOpacity="75"
ShadowColor="n" ShadowBlendMode="Multiply" ShadowOpacity="75"/>
<SatinSetting Applied="false" EffectColor="n" BlendMode="Multiply"
Opacity="50" Angle="120" Distance="7" Size="7" InvertEffect="false"/>
<DirectionalFeatherSetting Applied="false" LeftWidth="0"
RightWidth="0" TopWidth="0" BottomWidth="0" ChokeAmount="0" Angle="0"
FollowShapeMode="LeadingEdge" Noise="0"/>
<GradientFeatherSetting Applied="false" Type="Linear" Angle="0" Length="0"
GradientStart="0 0" HiliteAngle="0" HiliteLength="0"/>
</StrokeTransparencySetting>
<FillTransparencySetting>
<BlendingSetting BlendMode="Normal" Opacity="100" KnockoutGroup="false"
IsolateBlending="false"/>
<DropShadowSetting Mode="None" BlendMode="Multiply" Opacity="75" XOffset="7"
YOffset="7" Size="5" EffectColor="n" Noise="0" Spread="0"
UseGlobalLight="false" KnockedOut="true" HonorOtherEffects="false"/>
<FeatherSetting Mode="None" Width="9" CornerType="Diffusion" Noise="0"
ChokeAmount="0"/>
<InnerShadowSetting Applied="false" EffectColor="n" BlendMode="Multiply"
Opacity="75" Angle="120" Distance="7" UseGlobalLight="false" ChokeAmount="0"
Size="7" Noise="0"/>
<OuterGlowSetting Applied="false" BlendMode="Screen" Opacity="75" Noise="0"
EffectColor="n" Technique="Softer" Spread="0" Size="7"/>
<InnerGlowSetting Applied="false" BlendMode="Screen" Opacity="75" Noise="0"
EffectColor="n" Technique="Softer" Spread="0" Size="7"
Source="EdgeSourced"/>
<BevelAndEmbossSetting Applied="false" Style="InnerBevel"
Technique="SmoothContour" Depth="100" Direction="Up" Size="7"
Soften="0" Angle="120" Altitude="30" UseGlobalLight="false"
HighlightColor="n" HighlightBlendMode="Screen" HighlightOpacity="75"
ShadowColor="n" ShadowBlendMode="Multiply" ShadowOpacity="75"/>
<SatinSetting Applied="false" EffectColor="n" BlendMode="Multiply"
Opacity="50" Angle="120" Distance="7" Size="7" InvertEffect="false"/>
<DirectionalFeatherSetting Applied="false" LeftWidth="0"
RightWidth="0" TopWidth="0" BottomWidth="0" ChokeAmount="0" Angle="0"
FollowShapeMode="LeadingEdge" Noise="0"/>
<GradientFeatherSetting Applied="false" Type="Linear" Angle="0" Length="0"
GradientStart="0 0" HiliteAngle="0" HiliteLength="0"/>
</FillTransparencySetting>
IDML File Format Specification
423 Appendix B. IDML Variants: InDesign Snippets (.idms files)
<ContentTransparencySetting>
<BlendingSetting BlendMode="Normal" Opacity="100" KnockoutGroup="false"
IsolateBlending="false"/>
<DropShadowSetting Mode="None" BlendMode="Multiply" Opacity="75" XOffset="7"
YOffset="7" Size="5" EffectColor="n" Noise="0" Spread="0"
UseGlobalLight="false" KnockedOut="true" HonorOtherEffects="false"/>
<FeatherSetting Mode="None" Width="9" CornerType="Diffusion" Noise="0"
ChokeAmount="0"/>
<InnerShadowSetting Applied="false" EffectColor="n" BlendMode="Multiply"
Opacity="75" Angle="120" Distance="7" UseGlobalLight="false" ChokeAmount="0"
Size="7" Noise="0"/>
<OuterGlowSetting Applied="false" BlendMode="Screen" Opacity="75" Noise="0"
EffectColor="n" Technique="Softer" Spread="0" Size="7"/>
<InnerGlowSetting Applied="false" BlendMode="Screen" Opacity="75" Noise="0"
EffectColor="n" Technique="Softer" Spread="0" Size="7"
Source="EdgeSourced"/>
<BevelAndEmbossSetting Applied="false" Style="InnerBevel"
Technique="SmoothContour" Depth="100" Direction="Up" Size="7"
Soften="0" Angle="120" Altitude="30" UseGlobalLight="false"
HighlightColor="n" HighlightBlendMode="Screen" HighlightOpacity="75"
ShadowColor="n" ShadowBlendMode="Multiply" ShadowOpacity="75"/>
<SatinSetting Applied="false" EffectColor="n" BlendMode="Multiply"
Opacity="50" Angle="120" Distance="7" Size="7" InvertEffect="false"/>
<DirectionalFeatherSetting Applied="false" LeftWidth="0"
RightWidth="0" TopWidth="0" BottomWidth="0" ChokeAmount="0" Angle="0"
FollowShapeMode="LeadingEdge" Noise="0"/>
<GradientFeatherSetting Applied="false" Type="Linear" Angle="0" Length="0"
GradientStart="0 0" HiliteAngle="0" HiliteLength="0"/>
</ContentTransparencySetting>
</TransparencyDefaultContainerObject>
<Layer Self="ub6" Name="Layer 1" Visible="true" Locked="false" IgnoreWrap="false"
ShowGuides="true" LockGuides="false" UI="true" Expendable="true"
Printable="true">
<Properties>
<LayerColor type="enumeration">LightBlue</LayerColor>
</Properties>
</Layer>
<Spread Self="ub9">
<Rectangle Self="ud0" StoryTitle="$ID/" ContentType="GraphicType"
GradientFillStart="0 0" GradientFillLength="0" GradientFillAngle="0"
GradientStrokeStart="0 0" GradientStrokeLength="0" GradientStrokeAngle="0"
ItemLayer="ub6" Locked="false" LocalDisplaySetting="Default"
GradientFillHiliteLength="0" GradientFillHiliteAngle="0"
GradientStrokeHiliteLength="0" GradientStrokeHiliteAngle="0"
AppliedObjectStyle="ObjectStyle/$ID/[None]" ItemTransform="1 0 0 1 0 0">
<Properties>
<PathGeometry>
<GeometryPathType PathOpen="false">
<PathPointArray>
<PathPointType Anchor="72 -324" LeftDirection="72 -324"
RightDirection="72 -324"/>
<PathPointType Anchor="72 -252" LeftDirection="72 -252"
RightDirection="72 -252"/>
<PathPointType Anchor="144 -252" LeftDirection="144 -252"
IDML File Format Specification
424 Appendix B. IDML Variants: InDesign Snippets (.idms files)
RightDirection="144 -252"/>
<PathPointType Anchor="144 -324" LeftDirection="144 -324"
RightDirection="144 -324"/>
</PathPointArray>
</GeometryPathType>
</PathGeometry>
</Properties>
<TextWrapPreference Inverse="false" ApplyToMasterPageOnly="false"
TextWrapSide="BothSides" TextWrapMode="None">
<Properties>
<TextWrapOffset Top="0" Left="0" Bottom="0" Right="0"/>
</Properties>
</TextWrapPreference>
<InCopyExportOption IncludeGraphicProxies="true"
IncludeAllResources="false"/>
</Rectangle>
</Spread>
<?xpacket begin="ï»¿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624,
2008/07/30-18:12:18 ">
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
<rdf:Description rdf:about=""
xmlns:dc="http://purl.org/dc/elements/1.1/">
<dc:format>application/x-indesign</dc:format>
</rdf:Description>
<rdf:Description rdf:about=""
xmlns:xmp="http://ns.adobe.com/xap/1.0/"
xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
<xmp:CreatorTool>Adobe InDesign 6.0</xmp:CreatorTool>
<xmp:CreateDate>2008-09-22T13:45:04-07:00</xmp:CreateDate>
<xmp:MetadataDate>2008-09-22T13:45:04-07:00</xmp:MetadataDate>
<xmp:ModifyDate>2008-09-22T13:45:04-07:00</xmp:ModifyDate>
<xmp:Thumbnails>
<rdf:Alt>
<rdf:li rdf:parseType="Resource">
<xmpGImg:format>JPEG</xmpGImg:format>
<xmpGImg:width>512</xmpGImg:width>
<xmpGImg:height>512</xmpGImg:height>
<xmpGImg:image></xmpGImg:image>
</rdf:li>
</rdf:Alt>
</xmp:Thumbnails>
</rdf:Description>
<rdf:Description rdf:about=""
xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
<xmpMM:InstanceID>xmp.iid:60DDA861CE88DD11AB59D86C578039DD
</xmpMM:InstanceID>
<xmpMM:DocumentID>xmp.did:60DDA861CE88DD11AB59D86C578039DD
</xmpMM:DocumentID>
<xmpMM:OriginalDocumentID>xmp.did:60DDA861CE88DD11AB59D86C578039DD
</xmpMM:OriginalDocumentID>
<xmpMM:History>
<rdf:Seq>
IDML File Format Specification
425 Appendix B. IDML Variants: ICML
<rdf:li rdf:parseType="Resource">
<stEvt:action>created</stEvt:action>
<stEvt:instanceID>xmp.iid:60DDA861CE88DD11AB59D86C578039DD
</stEvt:instanceID>
<stEvt:when>2008-09-22T13:45:04-07:00</stEvt:when>
<stEvt:softwareAgent>Adobe InDesign 6.0</stEvt:softwareAgent>
</rdf:li>
</rdf:Seq>
</xmpMM:History>
</rdf:Description>
</rdf:RDF>
</x:xmpmeta>
<?xpacket end="r"?>
</Document>
1.2 ICML
ICML is the native format for InCopy standalone documents. ICML is a standalone XML "le, not
a Zip archive as used by IDML. InCopy can and open ICML "les, InDesign can place ICML "les
in a layout, but cannot export as ICML.
Inside the ICML "le, however, you’ll "nd elements that are identical to the corresponding
elements in an IDML "le. At base, an ICML document contains a <Story> element and
<ParagraphStyle>, <CharacterStyle>, <Color>, and other elements required to support the
formatting used in the <Story> element.
For more on placing ICML documents in an InDesign document, refer to the online help.
The structure of a very simpli"ed ICML document is shown below (in this example, “...” indicates
that there can be more of the preceding element).
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<?aid style="50" type="snippet" readerVersion="7.0" featureSet="513"
product="7.0(292)" ?>
<?aid SnippetType="InCopyInterchange"?>
<Document DOMVersion="7.0" Self="d">
<Color/>
...
<Ink/>
...
<Swatch/>
...
<StrokeStyle/>
...
<FontFamily>
<Font/>
...
</FontFamily>
...
<CompositeFont>
<CompositeFontEntry>
IDML File Format Specification
426 Appendix B. IDML Variants: ICML
...
</CompositeFont>
...
<RootCharacterStyleGroup>
<CharacterStyle/>
...
</RootCharacterStyleGroup>
<NumberingList/>
<RootParagraphStyleGroup>
<ParagraphStyle/>
...
</RootParagraphStyleGroup>
<RootCellStyleGroup>
<CellStyle/>
...
</RootCellStyleGroup>
<RootTableStyleGroup>
<TableStyle/>
...
</RootTableStyleGroup>
<ParagraphStyleGroup>
<ParagraphStyle/>
...
</ParagraphStyleGroup>
...
<CharacterStyleGroup>
<CharacterStyle/>
...
</CharacterStyleGroup>
...
<TableStyleGroup>
<TableStyle/>
...
</TableStyleGroup>
...
<CellStyleGroup>
<CellStyle/>
...
</CellStyleGroup>
...
<FootnoteOption/>
<ConditionalTextPreference/>
<TextVariable/>
...
<XMLTag/>
<CrossReferenceFormat>
<BuildingBlock/>
</CrossReferenceFormat>
...
<Story>
<StoryPreference/>
<MetadataPacketPreference/>
<InCopyExportOption/>
<StandaloneDocumentPreference/>
IDML File Format Specification
427 Appendix B. IDML Variants: InCopy Assignments (ICMA)
<ParagraphStyleRange>
<CharacterStyleRange>
<Content></Content>
</CharacterStyleRange>
...
</ParagraphStyleRange>
...
</Story>
</Document>
1.3 InCopy Assignments (ICMA)
ICMA is a variant of ICML that encapsulates the data needed to support an InCopy assignment.
Because InCopy assignments are always closely bound to a speci"c InDesign layout, ICMA "les
contain almost all of the elements de"ned by the IDML speci"cation. ICMA documents are
standalone XML "les, not Zip archives.
ICMA documents do not include various InDesign application defaults elements that
appear in IDML. The following IDML elements are not included in an exported ICMA
document: <DataMerge>, <DataMergeOption>, <PrintPreference>, <IndexOptions>,
<LayoutAdjustmentPreference>, <ButtonPreference>, <PolygonPreference>,
<FlattenerSettings>, <TOCStyle>, <TrapStyle>, <XMLElement>, and <XMLViewPreference>.
ICMA documents do not include the XML structure associated with the stories in the
assignment; that data is stored in the InDesign document containing the assignment.
IDML File Format Specification
428 Appendix C. IDML Defaults
Appendix C. IDML Defaults
InDesign’s IDML defaults are stored in the "le Predef.iddx, which is stored inside the Default
folder inside the Presets folder in the InDesign application folder. When opening and converting
an IDML document, InDesign will use this "le to provide default values for any elements or
attributes that are not present in the IDML document. These default values ensure consistency
when converting IDML "les to InDesign documents.
Do not make changes to the Predef.iddx "le.
The following shows the contents of the Predef.iddx "le.
1.1.1 <Document> Attributes
The <Document> element contains all of the other elements in the Predef.iddx "le.
Attribute Name Value
DOMVersion 7.0
Self d
StoryList u9b
ZeroPoint 0 0
ActiveLayer ub6
CMYKProfile U.S. Web Coated (SWOP) v2
RGBProfile sRGB IEC61966-2.1
SolidColorIntent UseColorSettings
AfterBlendingIntent UseColorSettings
DefaultImageIntent UseColorSettings
RGBPolicy PreserveEmbeddedProfiles
CMYKPolicy CombinationOfPreserveAndSafeCmyk
AccurateLABSpots false
1.1.2 Languages
The default languages are the following (“%3a” in the following listing represents a colon):
1.1.3 Colors
[No Language], English%3a USA, English%3a USA Medical, English%3a USA Legal,
French, Spanish%3a Castilian, Italian, English%3a UK, Swedish, Danish,
Norwegian%3a Bokmal, Portuguese, Portuguese%3a Brazilian, French%3a Canadian,
Norwegian%3a Nynorsk, Finnish, Catalan, Russian, Bulgarian, Czech, Polish,
Romanian, Greek, Turkish, Hungarian, English%3a Canadian, Slovak, Croatian,
Estonian, Latvian, Lithuanian, Slovenian, German%3a Traditional, German%3a
Reformed, de_DE_2006, Dutch, nl_NL_2005, German%3a Swiss, de_CH_2006, Ukrainian
The default colors are:
Black, Cyan, Magenta, Paper, Registration, Yellow, u7d, u7f
IDML File Format Specification
429 Appendix C. IDML Defaults
1.1.4 Inks
The default inks are:
Process Cyan, Process Magenta, Process Yellow, and Process Black.
1.1.5 Swatches
The only default swatch is None.
1.1.6 Gradients
The only default gradient is named "u7e", which includes the default colors "u7f" and Black.
1.1.7 Stroke Styles
The default stroke styles are:
Triple_Stroke, ThickThinThick, ThinThickThin, ThickThick, ThickThin, ThinThick,
ThinThin, Japanese Dots, White Diamond, Left Slant Hash, Right Slant Hash,
Straight Hash, Wavy, Canned Dotted, Canned Dashed 3x2, , Dashed, and Solid
1.1.8 Font Families
Each font family contains a set of fonts. In the following listing, the indented listings are the
names of the fonts within a given font family.
Myriad Pro
Myriad Pro Condensed
Myriad Pro Condensed Italic
Myriad Pro Bold Condensed
Myriad Pro Bold Condensed Italic
Myriad Pro Regular
Myriad Pro Italic
Myriad Pro Semibold
Myriad Pro Semibold Italic
Myriad Pro Bold
Myriad Pro Bold Italic
Minion Pro
Minion Pro Bold Cond
Minion Pro Bold Cond Italic
Minion Pro Regular
Minion Pro Italic
Minion Pro Medium
Minion Pro Medium Italic
Minion Pro Semibold
Minion Pro Semibold Italic
Minion Pro Bold
Minion Pro Bold Italic
Kozuka Mincho Pro
Kozuka Mincho Pro EL
Kozuka Mincho Pro L
Kozuka Mincho Pro R
IDML File Format Specification
430 Appendix C. IDML Defaults
Kozuka Mincho Pro M
Kozuka Mincho Pro B
Kozuka Mincho Pro H
1.1.9 Composite Font
The defaults "le de"nes a composite font, made up of <CompositeFontEntry> elements. The
composite font uses the fonts Kozuka Mincho Pro R, Symbols, and Minion Pro Regular.
1.1.10 Character Styles
The defaults "le contains a <RootCharacterStyle> element, which, in turn, contains a
<CharacterStyle> element named [No character style].
[No character style]
Table 1. Character Style Properties Represented as Attributes
Attribute Name Value
Imported false
Name $ID/[No character style]
1.1.11 Paragraph Styles
The defaults "le contains a <RootParagraphStyle> element, which, in turn, contains the
following <ParagraphStyle> elements: [No paragraph style], Normal Paragraph Style.
[No paragraph style]
Table 2. Paragraph Style Properties Represented as Attributes
Attribute Name Value
Imported false
FillColor Color/Black
FontStyle Regular
PointSize 12
HorizontalScale 100
KerningMethod $ID/Metrics
Ligatures true
PageNumberType AutoPageNumber
StrokeWeight 1
Tracking 0
Composer HL Composer
IDML File Format Specification
431 Appendix C. IDML Defaults
Attribute Name Value
DropCapCharacters 0
DropCapLines 0
BaselineShift 0
Capitalization Normal
StrokeColor Swatch/None
HyphenateLadderLimit 3
VerticalScale 100
LeftIndent 0
RightIndent 0
FirstLineIndent 0
AutoLeading 120
AppliedLanguage $ID/English: USA
Hyphenation true
HyphenateAfterFirst 2
HyphenateBeforeLast 2
HyphenateCapitalizedWords true
HyphenateWordsLongerThan 5
NoBreak false
HyphenationZone 36
SpaceBefore 0
SpaceAfter 0
Underline false
OTFFigureStyle Default
DesiredWordSpacing 100
MaximumWordSpacing 133
MinimumWordSpacing 80
DesiredLetterSpacing 0
MaximumLetterSpacing 0
MinimumLetterSpacing 0
DesiredGlyphScaling 100
MaximumGlyphScaling 100
MinimumGlyphScaling 100
StartParagraph Anywhere
KeepAllLinesTogether false
KeepWithNext 0
KeepFirstLines 2
KeepLastLines 2
Position Normal
StrikeThru false
IDML File Format Specification
432 Appendix C. IDML Defaults
Attribute Name Value
CharacterAlignment AlignEmCenter
KeepLinesTogether false
StrokeTint -1
FillTint -1
OverprintStroke false
OverprintFill false
GradientStrokeAngle 0
GradientFillAngle 0
GradientStrokeLength -1
GradientFillLength -1
GradientStrokeStart 0 0
GradientFillStart 0 0
Skew 0
RuleAboveLineWeight 1
RuleAboveTint -1
RuleAboveOffset 0
RuleAboveLeftIndent 0
RuleAboveRightIndent 0
RuleAboveWidth ColumnWidth
RuleBelowLineWeight 1
RuleBelowTint -1
RuleBelowOffset 0
RuleBelowLeftIndent 0
RuleBelowRightIndent 0
RuleBelowWidth ColumnWidth
RuleAboveOverprint false
RuleBelowOverprint false
RuleAbove false
RuleBelow false
LastLineIndent 0
HyphenateLastWord true
ParagraphBreakType Anywhere
SingleWordJustification FullyJustified
OTFOrdinal false
OTFFraction false
OTFDiscretionaryLigature false
OTFTitling false
RuleAboveGapTint -1
RuleAboveGapOverprint false
IDML File Format Specification
433 Appendix C. IDML Defaults
Attribute Name Value
RuleBelowGapTint -1
RuleBelowGapOverprint false
Justification LeftAlign
DropcapDetail 0
PositionalForm None
OTFMark true
HyphenWeight 5
OTFLocale true
HyphenateAcrossColumns true
KeepRuleAboveInFrame false
IgnoreEdgeAlignment false
OTFSlashedZero false
OTFStylisticSets 0
OTFHistorical false
OTFContextualAlternate true
UnderlineGapOverprint false
UnderlineGapTint -1
UnderlineOffset -9999
UnderlineOverprint false
UnderlineTint -1
UnderlineWeight -9999
StrikeThroughGapOverprint false
StrikeThroughGapTint -1
StrikeThroughOffset -9999
StrikeThroughOverprint false
StrikeThroughTint -1
StrikeThroughWeight -9999
MiterLimit 4
StrokeAlignment OutsideAlignment
EndJoin MiterEndJoin
OTFSwash false
Tsume 0
LeadingAki -1
TrailingAki -1
KinsokuType KinsokuPushInFirst
KinsokuHangType None
BunriKinshi true
RubyOpenTypePro true
RubyFontSize -1
IDML File Format Specification
434 Appendix C. IDML Defaults
Attribute Name Value
RubyAlignment RubyJIS
RubyType PerCharacterRuby
RubyParentSpacing RubyParent121Aki
RubyXScale 100
RubyYScale 100
RubyXOffset 0
RubyYOffset 0
RubyPosition AboveRight
RubyAutoAlign true
RubyParentOverhangAmount RubyOverhangOneRuby
RubyOverhang false
RubyAutoScaling false
RubyParentScalingPercent 66
RubyTint -1
RubyOverprintFill Auto
RubyStrokeTint -1
RubyOverprintStroke Auto
RubyWeight -1
KentenKind None
KentenFontSize -1
KentenXScale 100
KentenYScale 100
KentenPlacement 0
KentenAlignment AlignKentenCenter
KentenPosition AboveRight
KentenCustomCharacter
KentenCharacterSet CharacterInput
KentenTint -1
KentenOverprintFill Auto
KentenStrokeTint -1
KentenOverprintStroke Auto
KentenWeight -1
Tatechuyoko false
TatechuyokoXOffset 0
TatechuyokoYOffset 0
AutoTcy 0
AutoTcyIncludeRoman false
Jidori 0
GridGyoudori 0
IDML File Format Specification
435 Appendix C. IDML Defaults
Attribute Name Value
GridAlignFirstLineOnly false
GridAlignment None
CharacterRotation 0
RotateSingleByteCharacters false
Rensuuji true
ShataiMagnification 0
ShataiDegreeAngle 4500
ShataiAdjustTsume true
ShataiAdjustRotation false
Warichu false
WarichuLines 2
WarichuSize 50
WarichuLineSpacing 0
WarichuAlignment Auto
WarichuCharsBeforeBreak 2
WarichuCharsAfterBreak 2
OTFHVKana false
OTFProportionalMetrics false
OTFRomanItalics false
LeadingModel LeadingModelAkiBelow
ScaleAffectsLineHeight false
ParagraphGyoudori false
CjkGridTracking false
GlyphForm None
RubyAutoTcyDigits 0
RubyAutoTcyIncludeRoman false
RubyAutoTcyAutoScale true
TreatIdeographicSpaceAsSpace false
AllowArbitraryHyphenation false
BulletsAndNumberingListType NoList
NumberingStartAt 1
NumberingLevel 1
NumberingContinue true
NumberingApplyRestartPolicy true
BulletsAlignment LeftAlign
NumberingAlignment LeftAlign
NumberingExpression ^#.^t
BulletsTextAfter ^t
DigitsType DefaultDigits
IDML File Format Specification
436 Appendix C. IDML Defaults
Attribute Name Value
Kashidas DefaultKashidas
DiacriticPosition OpentypePosition
CharacterDirection DefaultDirection
ParagraphDirection LeftToRightDirection
ParagraphJustification DefaultJustification
XOffsetDiacritic 0
YOffsetDiacritic 0
OTFOverlapSwash false
OTFStylisticAlternate false
OTFJustificationAlternate false
OTFStretchedAlternate false
KeyboardDirection DefaultDirection
SpanSplitColumnCount All
SpanColumnType SingleColumn
SplitColumnsInsideGutter 6
SplitColumnsOutsideGutter 6
KeepWithPrevious false
Table 3. Paragraph Properties Represented as Elements
Element Name Value
Leading Auto
AppliedFont Minion Pro
RuleAboveColor Text Color
RuleBelowColor Text Color
RuleAboveType StrokeStyle/$ID/Solid
RuleBelowType StrokeStyle/$ID/Solid
BalanceRaggedLines NoBalancing
RuleAboveGapColor Swatch/None
RuleBelowGapColor Swatch/None
UnderlineColor Text Color
UnderlineGapColor Swatch/None
UnderlineType StrokeStyle/$ID/Solid
StrikeThroughColor Text Color
StrikeThroughGapColor Swatch/None
StrikeThroughType StrokeStyle/$ID/Solid
Mojikumi Nothing
KinsokuSet Nothing
RubyFont $ID/
RubyFontStyle Nothing
IDML File Format Specification
437 Appendix C. IDML Defaults
Element Name Value
RubyFill Text Color
RubyStroke Text Color
KentenFont $ID/
KentenFontStyle Nothing
KentenFillColor Text Color
KentenStrokeColor Text Color
BulletChar BulletCharacterType=UnicodeOnly
BulletCharacterValue=8226
NumberingFormat 1, 2, 3, 4...
BulletsFont $ID/
BulletsFontStyle Nothing
AppliedNumberingList NumberingList/$ID/[Default]
NumberingRestartPolicies RestartPolicy=AnyPreviousLevel
LowerLevel=0 UpperLevel=0
BulletsCharacterStyle CharacterStyle/$ID/[No character style]
NumberingCharacterStyle CharacterStyle/$ID/[No character style]
NormalParagraphStyle
Table 4. Paragraph Properties Represented as Attributes
Attribute Name Value
Imported false
NextStyle ParagraphStyle/$ID/NormalParagraphStyle
KeyboardShortcut 0 0
Table 5. Paragraph Properties Represented as Elements
Element Name Value
BasedOn $ID/[No paragraph style]
PreviewColor Nothing
1.1.12 TOC Styles
The defaults "le contains a single TOC style.
Table 6. TOC Style Properties Represented as Attributes
Attribute Name Value
TitleStyle ParagraphStyle/$ID/[No paragraph style]
Title Contents
IDML File Format Specification
438 Appendix C. IDML Defaults
Attribute Name Value
Name $ID/DefaultTOCStyleName
RunIn false
IncludeHidden false
IncludeBookDocuments false
CreateBookmarks true
SetStoryDirection Horizontal
NumberedParagraphs IncludeFullParagraph
1.1.13 Cell Styles
The defaults "le contains a single cell style, [None].
Table 7. Cell Style Properties Represented as Attributes
Attribute Name Value
AppliedParagraphStyle ParagraphStyle/$ID/[No paragraph style]
Name $ID/[None]
1.1.14 Table Styles
The defaults "le contains a two table styles, [No table style] and [Basic Table].
[No table style]
Table 8. Table Style Properties Represented as Attributes
Attribute Name Value
Name $ID/[No table style]
StrokeOrder BestJoins
TopBorderStrokeWeight 1
TopBorderStrokeType StrokeStyle/$ID/Solid
TopBorderStrokeColor Color/Black
TopBorderStrokeTint 100
TopBorderStrokeOverprint false
TopBorderStrokeGapColor Color/Paper
TopBorderStrokeGapTint 100
TopBorderStrokeGapOverprint false
LeftBorderStrokeWeight 1
LeftBorderStrokeType StrokeStyle/$ID/Solid
LeftBorderStrokeColor Color/Black
IDML File Format Specification
439 Appendix C. IDML Defaults
Attribute Name Value
LeftBorderStrokeTint 100
LeftBorderStrokeOverprint false
LeftBorderStrokeGapColor Color/Paper
LeftBorderStrokeGapTint 100
LeftBorderStrokeGapOverprint false
BottomBorderStrokeWeight 1
BottomBorderStrokeType StrokeStyle/$ID/Solid
BottomBorderStrokeColor Color/Black
BottomBorderStrokeTint 100
BottomBorderStrokeOverprint false
BottomBorderStrokeGapColor Color/Paper
BottomBorderStrokeGapTint 100
BottomBorderStrokeGapOverprint false
RightBorderStrokeWeight 1
RightBorderStrokeType StrokeStyle/$ID/Solid
RightBorderStrokeColor Color/Black
RightBorderStrokeTint 100
RightBorderStrokeOverprint false
RightBorderStrokeGapColor Color/Paper
RightBorderStrokeGapTint 100
RightBorderStrokeGapOverprint false
SpaceBefore 4
SpaceAfter -4
SkipFirstAlternatingStrokeRows 0
SkipLastAlternatingStrokeRows 0
StartRowStrokeCount 0
StartRowStrokeColor Color/Black
StartRowStrokeWeight 1
StartRowStrokeType StrokeStyle/$ID/Solid
StartRowStrokeTint 100
StartRowStrokeGapOverprint false
StartRowStrokeGapColor Color/Paper
StartRowStrokeGapTint 100
StartRowStrokeOverprint false
EndRowStrokeCount 0
EndRowStrokeColor Color/Black
EndRowStrokeWeight 0.25
EndRowStrokeType StrokeStyle/$ID/Solid
EndRowStrokeTint 100
IDML File Format Specification
440 Appendix C. IDML Defaults
Attribute Name Value
EndRowStrokeOverprint false
EndRowStrokeGapColor Color/Paper
EndRowStrokeGapTint 100
EndRowStrokeGapOverprint false
SkipFirstAlternatingStrokeColumns 0
SkipLastAlternatingStrokeColumns 0
StartColumnStrokeCount 0
StartColumnStrokeColor Color/Black
StartColumnStrokeWeight 1
StartColumnStrokeType StrokeStyle/$ID/Solid
StartColumnStrokeTint 100
StartColumnStrokeOverprint false
StartColumnStrokeGapColor Color/Paper
StartColumnStrokeGapTint 100
StartColumnStrokeGapOverprint false
EndColumnStrokeCount 0
EndColumnStrokeColor Color/Black
EndColumnStrokeWeight 0.25
EndColumnLineStyle StrokeStyle/$ID/Solid
EndColumnStrokeTint 100
EndColumnStrokeOverprint false
EndColumnStrokeGapColor Color/Paper
EndColumnStrokeGapTint 100
EndColumnStrokeGapOverprint false
ColumnFillsPriority false
SkipFirstAlternatingFillRows 0
SkipLastAlternatingFillRows 0
StartRowFillColor Color/Black
StartRowFillCount 0
StartRowFillTint 20
StartRowFillOverprint false
EndRowFillCount 0
EndRowFillColor Swatch/None
EndRowFillTint 100
EndRowFillOverprint false
SkipFirstAlternatingFillColumns 0
SkipLastAlternatingFillColumns 0
StartColumnFillCount 0
StartColumnFillColor Color/Black
IDML File Format Specification
441 Appendix C. IDML Defaults
Attribute Name Value
StartColumnFillTint 20
StartColumnFillOverprint false
EndColumnFillCount 0
EndColumnFillColor Swatch/None
EndColumnFillTint 100
EndColumnFillOverprint false
HeaderRegionSameAsBodyRegion true
FooterRegionSameAsBodyRegion true
LeftColumnRegionSameAsBodyRegion true
RightColumnRegionSameAsBodyRegion true
HeaderRegionCellStyle n
FooterRegionCellStyle n
LeftColumnRegionCellStyle n
RightColumnRegionCellStyle n
BodyRegionCellStyle CellStyle/$ID/[None]/>
[Basic Table]
Table 9. Table Style Properties Represented as Attributes
Attribute Name Value
KeyboardShortcut 0 0
Name $ID/[Basic Table]
Table 10. Table Style Properties Represented as Elements
Element Name Value
BasedOn $ID/[No table style]
1.1.15 Named Grids
The defaults "le contains a single <NamedGrid> element, [Page Grid]. This element contains a
<GridDataInformation> element, which, in turn, contains an <AppliedFont> element.
Table 11. Table Style Properties Represented as Elements
Attribute Name Value
Name $ID/[Page Grid]
IDML File Format Specification
442 Appendix C. IDML Defaults
Table 12. Grid Data Properties Represented as Attributes
Attribute Name Value
FontStyle Regular
PointSize 12
CharacterAki 0
LineAki 9
HorizontalScale 100
VerticalScale 100
LineAlignment LeftOrTopLineJustify
GridAlignment AlignEmCenter
CharacterAlignment AlignEmCenter
Table 13. Grid Data Properties Represented as Elements
Element Name Value
AppliedFont Minion Pro
1.1.16 Object Styles
The defaults "le contains a series of <ObjectStyle> elements: [None], [Normal [Normal Text Frame], and [Normal Grid].
Graphics Frame],
Each <ObjectStyle> element contains the following elements (some of these elements contain
child elements; these child elements are indicated by an indent).
<TextFramePreference>
<InsetSpacing>
<BaselineFrameGridOption>
<BaselineFrameGridColor>
<AnchoredObjectSetting>
<TextWrapPreference>
<TextWrapOffset>
<ContourOption>
<StoryPreference>
<FrameFittingOption>
Some of the <ObjectStyle> elements also contain the following elements:
<ObjectStyleObjectEffectsCategorySettings>
<ObjectStyleStrokeEffectsCategorySettings>
<ObjectStyleFillEffectsCategorySettings>
<ObjectStyleContentEffectsCategorySettings>
IDML File Format Specification
443 Appendix C. IDML Defaults
[None]
Table 14. Object Style Properties Represented as Attributes
Attribute Name Value
AppliedParagraphStyle ParagraphStyle/$ID/[No paragraph style]
FillColor Swatch/None
FillTint -1
StrokeWeight 0
MiterLimit 4
EndCap ButtEndCap
EndJoin MiterEndJoin
StrokeType StrokeStyle/$ID/Solid
LeftLineEnd None
RightLineEnd None
StrokeColor Swatch/None
StrokeTint -1
TopLeftCornerOption None
TopRightCornerOption None
BottomLeftCornerOption None
BottomRightCornerOption None
TopLeftCornerRadius 12
TopRightCornerRadius 12
BottomLeftCornerRadius 12
BottomRightCornerRadius 12
GapColor Swatch/None
GapTint -1
StrokeAlignment CenterAlignment
Nonprinting false
GradientFillAngle 0
GradientStrokeAngle 0
AppliedNamedGrid n
Table 15. Text Frame Preferences Properties Represented as Attributes
Attribute Name Value
TextColumnCount 1
TextColumnGutter 12
TextColumnFixedWidth 144
UseFixedColumnWidth false
FirstBaselineOffset AscentOffset
IDML File Format Specification
444 Appendix C. IDML Defaults
Attribute Name Value
MinimumFirstBaselineOffset 0
VerticalJustification TopAlign
VerticalThreshold 0
IgnoreWrap false
VerticalBalanceColumns false
Table 16. Text Frame Preferences Properties Represented as Elements
Element Name Value
InsetSpacing <ListItem type=unit>0</ListItem>
<ListItem type=unit>0</ListItem>
<ListItem type=unit>0</ListItem>
<ListItem type=unit>0</ListItem>
Table 17. Baseline Frame Grid Options Represented as Attributes
Attribute Name Value
UseCustomBaselineFrameGrid false
StartingOffsetForBaselineFrameGrid 0
BaselineFrameGridRelativeOption TopOfInset
BaselineFrameGridIncrement 12
Table 18. Baseline Frame Grid Options Represented as Elements
Element Name Value
BaselineFrameGridColor LightBlue
Table 19. Anchored Object Settings Properties Represented as Attributes
Attribute Name Value
AnchoredPosition InlinePosition
SpineRelative false
LockPosition false
PinPosition true
AnchorPoint BottomRightAnchor
HorizontalAlignment LeftAlign
HorizontalReferencePoint TextFrame
VerticalAlignment BottomAlign
VerticalReferencePoint LineBaseline
AnchorXoffset 0
AnchorYoffset 0
AnchorSpaceAbove 0
IDML File Format Specification
445 Appendix C. IDML Defaults
Table 20. Text Wrap Preferences Properties Represented as Attributes
Attribute Name Value
Inverse false
ApplyToMasterPageOnly false
TextWrapSide BothSides
TextWrapMode None
Table 21. Text Wrap Preferences Properties Represented as Elements
Element Name Value
TextWrapOffset Top=0 Left=0 Bottom=0 Right=0
Table 22. Contour Option Properties Represented as Attributes
Attribute Name Value
ContourType SameAsClipping
IncludeInsideEdges false
ContourPathName $ID/
Table 23. Story Preferences Properties Represented as Attributes
Attribute Name Value
OpticalMarginAlignment false
OpticalMarginSize 12
FrameType TextFrameType
StoryOrientation Horizontal
StoryDirection LeftToRightDirection
Table 24. Frame Fitting Option Properties Represented as Attributes
Attribute Name Value
LeftCrop 0
TopCrop 0
RightCrop 0
BottomCrop 0
FittingOnEmptyFrame None
FittingAlignment TopLeftAnchor
AutoFit false
IDML File Format Specification
446 Appendix C. IDML Defaults
[Normal Graphics Frame]
Table 25. Object Style Properties Represented as Attributes
Attribute Name Value
Name $ID/[Normal Graphics Frame]
AppliedParagraphStyle ParagraphStyle/$ID/[No paragraph style]
ApplyNextParagraphStyle false
EnableFill true
EnableStroke true
EnableParagraphStyle false
EnableTextFrameGeneralOptions false
EnableTextFrameBaselineOptions false
EnableStoryOptions false
EnableTextWrapAndOthers false
EnableAnchoredObjectOptions false
FillColor Swatch/None
FillTint -1
StrokeWeight 1
MiterLimit 4
EndCap ButtEndCap
EndJoin MiterEndJoin
StrokeType StrokeStyle/$ID/Solid
LeftLineEnd None
RightLineEnd None
StrokeColor Color/Black
StrokeTint -1
TopLeftCornerOption None
TopRightCornerOption None
BottomLeftCornerOption None
BottomRightCornerOption None
TopLeftCornerRadius 12
TopRightCornerRadius 12
BottomLeftCornerRadius 12
BottomRightCornerRadius 12
OverprintStroke false
GapColor Swatch/None
GapTint -1
StrokeAlignment CenterAlignment
Nonprinting false
GradientFillAngle 0
IDML File Format Specification
447 Appendix C. IDML Defaults
Attribute Name Value
GradientStrokeAngle 0
AppliedNamedGrid n
KeyboardShortcut 0 0
EnableFrameFittingOptions false
EnableStrokeAndCornerOptions true
Table 26. Object Style Properties Represented as Elements
Element Name Value
BasedOn $ID/[None]
Table 27. Text Frame Preferences Properties Represented as Attributes
Attribute Name Value
TextColumnCount 1
TextColumnGutter 12
TextColumnFixedWidth 144
UseFixedColumnWidth false
FirstBaselineOffset AscentOffset
MinimumFirstBaselineOffset 0
VerticalJustification TopAlign
VerticalThreshold 0
IgnoreWrap false
Table 28. Text Frame Preferences Properties Represented as Elements
Element Name Value
InsetSpacing <ListItem type=unit>0</ListItem>
<ListItem type=unit>0</ListItem>
<ListItem type=unit>0</ListItem>
<ListItem type=unit>0</ListItem>
Table 29. Baseline Frame Grid Options Represented as Attributes
Attribute Name Value
UseCustomBaselineFrameGrid false
StartingOffsetForBaselineFrameGrid 0
BaselineFrameGridRelativeOption TopOfInset
BaselineFrameGridIncrement 12
IDML File Format Specification
448 Appendix C. IDML Defaults
Table 30. Baseline Frame Grid Options Represented as Elements
Element Name Value
BaselineFrameGridColor LightBlue
Table 31. Anchored Object Settings Properties Represented as Attributes
Attribute Name Value
AnchoredPosition InlinePosition
SpineRelative false
LockPosition false
PinPosition true
AnchorPoint BottomRightAnchor
HorizontalAlignment LeftAlign
HorizontalReferencePoint TextFrame
VerticalAlignment BottomAlign
VerticalReferencePoint LineBaseline
AnchorXoffset 0
AnchorYoffset 0
AnchorSpaceAbove 0
Table 32. Text Wrap Preferences Properties Represented as Attributes
Attribute Name Value
Inverse false
ApplyToMasterPageOnly false
TextWrapSide BothSides
TextWrapMode None
Table 33. Text Wrap Preferences Properties Represented as Elements
Element Name Value
TextWrapOffset Top=0 Left=0 Bottom=0 Right=0
Table 34. Contour Option Properties Represented as Attributes
Attribute Name Value
ContourType SameAsClipping
IncludeInsideEdges false
ContourPathName $ID/
IDML File Format Specification
449 Appendix C. IDML Defaults
Table 35. Story Preferences Properties Represented as Attributes
Attribute Name Value
OpticalMarginAlignment false
OpticalMarginSize 12
FrameType TextFrameType
StoryOrientation Horizontal
StoryDirection LeftToRightDirection
Table 36. Frame Fitting Option Properties Represented as Attributes
Attribute Name Value
LeftCrop 0
TopCrop 0
RightCrop 0
BottomCrop 0
FittingOnEmptyFrame None
FittingAlignment TopLeftAnchor
AutoFit false
Table 37. Object Style Object Effects Category Settings Properties Represented as Attributes
Attribute Name Value
EnableTransparency true
EnableDropShadow true
EnableFeather true
EnableInnerShadow true
EnableOuterGlow true
EnableInnerGlow true
EnableBevelEmboss true
EnableSatin true
EnableDirectionalFeather true
EnableGradientFeather true
Table 38. Object Style Stroke Effects Category Settings Properties Represented as Attributes
Attribute Name Value
EnableTransparency true
EnableDropShadow true
EnableFeather true
EnableInnerShadow true
EnableOuterGlow true
IDML File Format Specification
450 Appendix C. IDML Defaults
Attribute Name Value
EnableInnerGlow true
EnableBevelEmboss true
EnableSatin true
EnableDirectionalFeather true
EnableGradientFeather true
Table 39. Object Style Fill Effects Category Settings Properties Represented as Attributes
Attribute Name Value
EnableTransparency true
EnableDropShadow true
EnableFeather true
EnableInnerShadow true
EnableOuterGlow true
EnableInnerGlow true
EnableBevelEmboss true
EnableSatin true
EnableDirectionalFeather true
EnableGradientFeather true
Table 40. Object Style Content Effects Category Settings Properties Represented as Attributes
Attribute Name Value
EnableTransparency true
EnableDropShadow true
EnableFeather true
EnableInnerShadow true
EnableOuterGlow true
EnableInnerGlow true
EnableBevelEmboss true
EnableSatin true
EnableDirectionalFeather true
EnableGradientFeather true
[Normal Text Frame]
Table 41. Object Style Properties Represented as Attributes
Attribute Name Value
Name $ID/[Normal Text Frame]
IDML File Format Specification
451 Appendix C. IDML Defaults
Attribute Name Value
AppliedParagraphStyle ParagraphStyle/$ID/NormalParagraphStyle
ApplyNextParagraphStyle false
EnableFill true
EnableStroke true
EnableParagraphStyle false
EnableTextFrameGeneralOptions true
EnableTextFrameBaselineOptions true
EnableStoryOptions false
EnableTextWrapAndOthers false
EnableAnchoredObjectOptions false
FillColor Swatch/None
FillTint -1
StrokeWeight 0
MiterLimit 4
EndCap ButtEndCap
EndJoin MiterEndJoin
StrokeType StrokeStyle/$ID/Solid
LeftLineEnd None
RightLineEnd None
StrokeColor Swatch/None
StrokeTint -1
TopLeftCornerOption None
TopRightCornerOption None
BottomLeftCornerOption None
BottomRightCornerOption None
TopLeftCornerRadius 12
TopRightCornerRadius 12
BottomLeftCornerRadius 12
BottomRightCornerRadius 12
GapColor Swatch/None
GapTint -1
StrokeAlignment CenterAlignment
Nonprinting false
GradientFillAngle 0
GradientStrokeAngle 0
AppliedNamedGrid n
KeyboardShortcut 0 0
EnableFrameFittingOptions false
EnableStrokeAndCornerOptions true
IDML File Format Specification
452 Appendix C. IDML Defaults
Table 42. Object Style Properties Represented as Elements
Element Name Value
BasedOn $ID/[None]
Table 43. Text Frame Preferences Properties Represented as Attributes
Attribute Name Value
TextColumnCount 1
TextColumnGutter 12
TextColumnFixedWidth 144
UseFixedColumnWidth false
FirstBaselineOffset AscentOffset
MinimumFirstBaselineOffset 0
VerticalJustification TopAlign
VerticalThreshold 0
IgnoreWrap false
Table 44. Text Frame Preferences Properties Represented as Elements
Element Name Value
InsetSpacing <ListItem type=unit>0</ListItem>
<ListItem type=unit>0</ListItem>
<ListItem type=unit>0</ListItem>
<ListItem type=unit>0</ListItem>
Table 45. Baseline Frame Grid Options Represented as Attributes
Attribute Name Value
UseCustomBaselineFrameGrid false
StartingOffsetForBaselineFrameGrid 0
BaselineFrameGridRelativeOption TopOfInset
BaselineFrameGridIncrement 12
Table 46. Baseline Frame Grid Options Represented as Elements
Element Name Value
BaselineFrameGridColor LightBlue
Table 47. Anchored Object Settings Properties Represented as Attributes
Attribute Name Value
AnchoredPosition InlinePosition
SpineRelative false
IDML File Format Specification
453 Appendix C. IDML Defaults
Attribute Name Value
LockPosition false
PinPosition true
AnchorPoint BottomRightAnchor
HorizontalAlignment LeftAlign
HorizontalReferencePoint TextFrame
VerticalAlignment BottomAlign
VerticalReferencePoint LineBaseline
AnchorXoffset 0
AnchorYoffset 0
AnchorSpaceAbove 0
Table 48. Text Wrap Preferences Properties Represented as Attributes
Attribute Name Value
Inverse false
ApplyToMasterPageOnly false
TextWrapSide BothSides
TextWrapMode None
Table 49. Text Wrap Preferences Properties Represented as Elements
Element Name Value
TextWrapOffset Top=0 Left=0 Bottom=0 Right=0
Table 50. Contour Option Properties Represented as Attributes
Attribute Name Value
ContourType SameAsClipping
IncludeInsideEdges false
ContourPathName $ID/
Table 51. Story Preferences Properties Represented as Attributes
Attribute Name Value
OpticalMarginAlignment false
OpticalMarginSize 12
FrameType TextFrameType
StoryOrientation Horizontal
StoryDirection LeftToRightDirection
IDML File Format Specification
454 Appendix C. IDML Defaults
Table 52. Frame Fitting Option Properties Represented as Attributes
Attribute Name Value
LeftCrop 0
TopCrop 0
RightCrop 0
BottomCrop 0
FittingOnEmptyFrame None
FittingAlignment TopLeftAnchor
AutoFit false
Table 53. Object Style Object Effects Category Settings Properties Represented as Attributes
Attribute Name Value
EnableTransparency true
EnableDropShadow true
EnableFeather true
EnableInnerShadow true
EnableOuterGlow true
EnableInnerGlow true
EnableBevelEmboss true
EnableSatin true
EnableDirectionalFeather true
EnableGradientFeather true
Table 54. Object Style Stroke Effects Category Settings Properties Represented as Attributes
Attribute Name Value
EnableTransparency true
EnableDropShadow true
EnableFeather true
EnableInnerShadow true
EnableOuterGlow true
EnableInnerGlow true
EnableBevelEmboss true
EnableSatin true
EnableDirectionalFeather true
EnableGradientFeather true
IDML File Format Specification
455 Appendix C. IDML Defaults
Table 55. Object Style Fill Effects Category Settings Properties Represented as Attributes
Attribute Name Value
EnableTransparency true
EnableDropShadow true
EnableFeather true
EnableInnerShadow true
EnableOuterGlow true
EnableInnerGlow true
EnableBevelEmboss true
EnableSatin true
EnableDirectionalFeather true
EnableGradientFeather true
Table 56. Object Style Content Effects Category Settings Properties Represented as Attributes
Attribute Name Value
EnableTransparency true
EnableDropShadow true
EnableFeather true
EnableInnerShadow true
EnableOuterGlow true
EnableInnerGlow true
EnableBevelEmboss true
EnableSatin true
EnableDirectionalFeather true
EnableGradientFeather true
[Normal Grid]
Table 57. Object Style Properties Represented as Attributes
Attribute Name Value
Name $ID/[Normal Grid]
AppliedParagraphStyle ParagraphStyle/$ID/NormalParagraphStyle
ApplyNextParagraphStyle false
EnableFill true
EnableStroke true
EnableParagraphStyle false
EnableTextFrameGeneralOptions true
EnableTextFrameBaselineOptions true
EnableStoryOptions true
IDML File Format Specification
456 Appendix C. IDML Defaults
Attribute Name Value
EnableTextWrapAndOthers false
EnableAnchoredObjectOptions false
FillColor Swatch/None
FillTint -1
StrokeWeight 0
MiterLimit 4
EndCap ButtEndCap
EndJoin MiterEndJoin
StrokeType StrokeStyle/$ID/Solid
LeftLineEnd None
RightLineEnd None
StrokeColor Swatch/None
StrokeTint -1
TopLeftCornerOption None
TopRightCornerOption None
BottomLeftCornerOption None
BottomRightCornerOption None
TopLeftCornerRadius 12
TopRightCornerRadius 12
BottomLeftCornerRadius 12
BottomRightCornerRadius 12
GapColor Swatch/None
GapTint -1
StrokeAlignment CenterAlignment
Nonprinting false
GradientFillAngle 0
GradientStrokeAngle 0
AppliedNamedGrid n
KeyboardShortcut 0 0
EnableFrameFittingOptions false
EnableStrokeAndCornerOptions true
Table 58. Object Style Properties Represented as Elements
Element Name Value
BasedOn $ID/[None]
IDML File Format Specification
457 Appendix C. IDML Defaults
Table 59. Text Frame Preferences Properties Represented as Attributes
Attribute Name Value
TextColumnCount 1
TextColumnGutter 12
TextColumnFixedWidth 144
UseFixedColumnWidth false
FirstBaselineOffset AscentOffset
MinimumFirstBaselineOffset 0
VerticalJustification TopAlign
VerticalThreshold 0
IgnoreWrap false
Table 60. Text Frame Preferences Properties Represented as Elements
Element Name Value
InsetSpacing <ListItem type=unit>0</ListItem>
<ListItem type=unit>0</ListItem>
<ListItem type=unit>0</ListItem>
<ListItem type=unit>0</ListItem>
Table 61. Baseline Frame Grid Options Represented as Attributes
Attribute Name Value
UseCustomBaselineFrameGrid false
StartingOffsetForBaselineFrameGrid 0
BaselineFrameGridRelativeOption TopOfInset
BaselineFrameGridIncrement 12
Table 62. Baseline Frame Grid Options Represented as Elements
Element Name Value
BaselineFrameGridColor LightBlue
Table 63. Anchored Object Settings Properties Represented as Attributes
Attribute Name Value
AnchoredPosition InlinePosition
SpineRelative false
LockPosition false
PinPosition true
AnchorPoint BottomRightAnchor
HorizontalAlignment LeftAlign
HorizontalReferencePoint TextFrame
IDML File Format Specification
458 Appendix C. IDML Defaults
Attribute Name Value
VerticalAlignment BottomAlign
VerticalReferencePoint LineBaseline
AnchorXoffset 0
AnchorYoffset 0
AnchorSpaceAbove 0
Table 64. Text Wrap Preferences Properties Represented as Attributes
Attribute Name Value
Inverse false
ApplyToMasterPageOnly false
TextWrapSide BothSides
TextWrapMode None
Table 65. Text Wrap Preferences Properties Represented as Elements
Element Name Value
TextWrapOffset Top=0 Left=0 Bottom=0 Right=0
Table 66. Contour Option Properties Represented as Attributes
Attribute Name Value
ContourType SameAsClipping
IncludeInsideEdges false
ContourPathName $ID/
Story Preferences Properties Represented as Attributes
Attribute Name Value
OpticalMarginAlignment false
OpticalMarginSize 12
FrameType FrameGridType
StoryOrientation Unknown
StoryDirection LeftToRightDirection
Table 67. Frame Fitting Option Properties Represented as Attributes
Attribute Name Value
LeftCrop 0
TopCrop 0
RightCrop 0
BottomCrop 0
IDML File Format Specification
459 Appendix C. IDML Defaults
Attribute Name Value
FittingOnEmptyFrame None
FittingAlignment TopLeftAnchor
AutoFit false
Table 68. Object Style Object Effects Category Settings Properties Represented as Attributes
Attribute Name Value
EnableTransparency true
EnableDropShadow true
EnableFeather true
EnableInnerShadow true
EnableOuterGlow true
EnableInnerGlow true
EnableBevelEmboss true
EnableSatin true
EnableDirectionalFeather true
EnableGradientFeather true
Table 69. Object Style Stroke Effects Category Settings Properties Represented as Attributes
Attribute Name Value
EnableTransparency true
EnableDropShadow true
EnableFeather true
EnableInnerShadow true
EnableOuterGlow true
EnableInnerGlow true
EnableBevelEmboss true
EnableSatin true
EnableDirectionalFeather true
EnableGradientFeather true
Table 70. Object Style Fill Effects Category Settings Properties Represented as Attributes
Attribute Name Value
EnableTransparency true
EnableDropShadow true
EnableFeather true
EnableInnerShadow true
EnableOuterGlow true
IDML File Format Specification
460 Appendix C. IDML Defaults
Attribute Name Value
EnableInnerGlow true
EnableBevelEmboss true
EnableSatin true
EnableDirectionalFeather true
EnableGradientFeather true
Table 71. Object Style Content Effects Category Settings Properties Represented as Attributes
Attribute Name Value
EnableTransparency true
EnableDropShadow true
EnableFeather true
EnableInnerShadow true
EnableOuterGlow true
EnableInnerGlow true
EnableBevelEmboss true
EnableSatin true
EnableDirectionalFeather true
EnableGradientFeather true
1.1.17 Trap Presets
The defaults "le contains two <TrapPreset> elements: [No Trap Preset] and $ID/
kDefaultTrapStyleName. These are the default trap presets for the document.
[No Trap Preset]
Table 72. Trap Preset Properties Represented as Attributes
Attribute Name Value
Name $ID/k[No Trap Preset]
DefaultTrapWidth 0.25
BlackWidth 0.5
TrapJoin MiterEndJoin
TrapEnd MiterTrapEnds
ObjectsToImages true
ImagesToImages true
InternalImages false
OneBitImages true
ImagePlacement CenterEdges
IDML File Format Specification
461 Appendix C. IDML Defaults
Attribute Name Value
StepThreshold 10
BlackColorThreshold 100
BlackDensity 1.6
SlidingTrapThreshold 70
ColorReduction 100
$ID/kDefaultTrapStyleName
Table 73. Trap Preset Properties Represented as Attributes
Attribute Name Value
Name $ID/kDefaultTrapStyleName
DefaultTrapWidth 0.25
BlackWidth 0.5
TrapJoin MiterEndJoin
TrapEnd MiterTrapEnds
ObjectsToImages true
ImagesToImages true
InternalImages false
OneBitImages true
ImagePlacement CenterEdges
StepThreshold 10
BlackColorThreshold 100
BlackDensity 1.6
SlidingTrapThreshold 70
ColorReduction 100
1.1.18 Transparency Preferences
The <TransparencyPreference> element de"nes the default transparency preferences.
Table 74. Transparency Preferences Properties Represented as Attributes
Attribute Name Value
BlendingSpace CMYK
GlobalLightAngle 120
GlobalLightAltitude 30
IDML File Format Specification
462 Appendix C. IDML Defaults
1.1.19 Transparency Default Container Object
TransparencySetting
Table 75. BlendingSetting Properties Represented as Attributes
Attribute Name BlendMode Normal
Opacity 100
KnockoutGroup false
IsolateBlending false
Table 76. DropShadowSetting Properties Represented as Attributes
Attribute Name Mode None
BlendMode Multiply
Opacity 75
XOffset 7
YOffset 7
Size 5
EffectColor n
Noise 0
Spread 0
UseGlobalLight false
KnockedOut true
HonorOtherEffects false
Table 77. FeatherSetting Properties Represented as Attributes
Attribute Name Mode None
Width 9
CornerType Diffusion
Noise 0
ChokeAmount 0
Table 78. InnerShadowSetting Properties Represented as Attributes
Attribute Name Applied false
EffectColor n
IDML File Format Specification
Value
Value
Value
Value
463 Appendix C. IDML Defaults
Attribute Name BlendMode Multiply
Opacity 75
Angle 120
Distance 7
UseGlobalLight false
ChokeAmount 0
Size 7
Noise 0
Table 79. OuterGlowSetting Properties Represented as Attributes
Attribute Name Applied false
BlendMode Screen
Opacity 75
Noise 0
EffectColor n
Technique Softer
Spread 0
Size 7
Source EdgeSourced
Table 80. BevelAndEmbossSetting Properties Represented as Attributes
Attribute Name Applied false
Style InnerBevel
Technique SmoothContour
Depth 100
Direction Up
Size 7
Soften 0
Angle 120
Altitude 30
UseGlobalLight false
HighlightColor n
HighlightBlendMode Screen
HighlightOpacity 75
ShadowColor n
ShadowBlendMode Multiply
IDML File Format Specification
Value
Value
Value
464 Appendix C. IDML Defaults
Attribute Name ShadowOpacity 75
Table 81. SatinSetting Properties Represented as Attributes
Attribute Name Applied false
EffectColor n
BlendMode Multiply
Opacity 50
Angle 120
Distance 7
Size 7
InvertEffect false
Table 82. DirectionalFeatherSetting Properties Represented as Attributes
Attribute Name Applied false
LeftWidth 0
RightWidth 0
TopWidth 0
BottomWidth 0
ChokeAmount 0
Angle 0
FollowShapeMode LeadingEdge
Noise 0
StrokeTransparencySetting
Table 83. BlendingSetting Properties Represented as Attributes
Attribute Name BlendMode Normal
Opacity 100
KnockoutGroup false
IsolateBlending false
IDML File Format Specification
Value
Value
Value
Value
465 Appendix C. IDML Defaults
Table 84. DropShadowSetting Properties Represented as Attributes
Attribute Name Mode None
BlendMode Multiply
Opacity 75
XOffset 7
YOffset 7
Size 5
EffectColor n
Noise 0
Spread 0
UseGlobalLight false
KnockedOut true
HonorOtherEffects false
Table 85. FeatherSetting Properties Represented as Attributes
Attribute Name Mode None
Width 9
CornerType Diffusion
Noise 0
ChokeAmount 0
Table 86. InnerShadowSetting Properties Represented as Attributes
Attribute Name Applied false
EffectColor n
BlendMode Multiply
Opacity 75
Angle 120
Distance 7
UseGlobalLight false
ChokeAmount 0
Size 7
Noise 0
IDML File Format Specification
Value
Value
Value
466 Appendix C. IDML Defaults
Table 87. OuterGlowSetting Properties Represented as Attributes
Attribute Name Applied false
BlendMode Screen
Opacity 75
Noise 0
EffectColor n
Technique Softer
Spread 0
Size 7
Source EdgeSourced
Table 88. BevelAndEmbossSetting Properties Represented as Attributes
Attribute Name Applied false
Style InnerBevel
Technique SmoothContour
Depth 100
Direction Up
Size 7
Soften 0
Angle 120
Altitude 30
UseGlobalLight false
HighlightColor n
HighlightBlendMode Screen
HighlightOpacity 75
ShadowColor n
ShadowBlendMode Multiply
ShadowOpacity 75
Table 89. SatinSetting Properties Represented as Attributes
Attribute Name Applied false
EffectColor n
BlendMode Multiply
Opacity 50
Angle 120
Distance 7
IDML File Format Specification
Value
Value
Value
467 Appendix C. IDML Defaults
Attribute Name Size 7
InvertEffect false
Table 90. DirectionalFeatherSetting Properties Represented as Attributes
Attribute Name Applied false
LeftWidth 0
RightWidth 0
TopWidth 0
BottomWidth 0
ChokeAmount 0
Angle 0
FollowShapeMode LeadingEdge
Noise 0
Table 91. GradientFeatherSetting Properties Represented as Attributes
Attribute Name Applied false
Type Linear
Angle 0
Length 0
GradientStart 0 0
HiliteAngle 0
HiliteLength 0
FillTransparencySetting
Table 92. BlendingSetting Properties Represented as Attributes
Attribute Name BlendMode Normal
Opacity 100
KnockoutGroup false
IsolateBlending false
IDML File Format Specification
Value
Value
Value
Value
468 Appendix C. IDML Defaults
Table 93. DropShadowSetting Properties Represented as Attributes
Attribute Name Mode None
BlendMode Multiply
Opacity 75
XOffset 7
YOffset 7
Size 5
EffectColor n
Noise 0
Spread 0
UseGlobalLight false
KnockedOut true
HonorOtherEffects false
Table 94. FeatherSetting Properties Represented as Attributes
Attribute Name Mode None
Width 9
CornerType Diffusion
Noise 0
ChokeAmount 0
Table 95. InnerShadowSetting Properties Represented as Attributes
Attribute Name Applied false
EffectColor n
BlendMode Multiply
Opacity 75
Angle 120
Distance 7
UseGlobalLight false
ChokeAmount 0
Size 7
Noise 0
IDML File Format Specification
Value
Value
Value
469 Appendix C. IDML Defaults
Table 96. OuterGlowSetting Properties Represented as Attributes
Attribute Name Applied false
BlendMode Screen
Opacity 75
Noise 0
EffectColor n
Technique Softer
Spread 0
Size 7
Source EdgeSourced
Table 97. BevelAndEmbossSetting Properties Represented as Attributes
Attribute Name Applied false
Style InnerBevel
Technique SmoothContour
Depth 100
Direction Up
Size 7
Soften 0
Angle 120
Altitude 30
UseGlobalLight false
HighlightColor n
HighlightBlendMode Screen
HighlightOpacity 75
ShadowColor n
ShadowBlendMode Multiply
ShadowOpacity 75
Table 98. SatinSetting Properties Represented as Attributes
Attribute Name Applied false
EffectColor n
BlendMode Multiply
Opacity 50
Angle 120
Distance 7
IDML File Format Specification
Value
Value
Value
470 Appendix C. IDML Defaults
Attribute Name Size 7
InvertEffect false
Table 99. DirectionalFeatherSetting Properties Represented as Attributes
Attribute Name Applied false
LeftWidth 0
RightWidth 0
TopWidth 0
BottomWidth 0
ChokeAmount 0
Angle 0
FollowShapeMode LeadingEdge
Noise 0
Table 100. GradientFeatherSetting Properties Represented as Attributes
Attribute Name Applied false
Type Linear
Angle 0
Length 0
GradientStart 0 0
HiliteAngle 0
HiliteLength 0
ContentTransparencySetting
Table 101. BlendingSetting Properties Represented as Attributes
Attribute Name BlendMode Normal
Opacity 100
KnockoutGroup false
IsolateBlending false
IDML File Format Specification
Value
Value
Value
Value
471 Appendix C. IDML Defaults
Table 102. DropShadowSetting Properties Represented as Attributes
Attribute Name Mode None
BlendMode Multiply
Opacity 75
XOffset 7
YOffset 7
Size 5
EffectColor n
Noise 0
Spread 0
UseGlobalLight false
KnockedOut true
HonorOtherEffects false
Table 103. FeatherSetting Properties Represented as Attributes
Attribute Name Mode None
Width 9
CornerType Diffusion
Noise 0
ChokeAmount 0
Table 104. InnerShadowSetting Properties Represented as Attributes
Attribute Name Applied false
EffectColor n
BlendMode Multiply
Opacity 75
Angle 120
Distance 7
UseGlobalLight false
ChokeAmount 0
Size 7
Noise 0
IDML File Format Specification
Value
Value
Value
472 Appendix C. IDML Defaults
Table 105. OuterGlowSetting Properties Represented as Attributes
Attribute Name Applied false
BlendMode Screen
Opacity 75
Noise 0
EffectColor n
Technique Softer
Spread 0
Size 7
Source EdgeSourced
Table 106. BevelAndEmbossSetting Properties Represented as Attributes
Attribute Name Applied false
Style InnerBevel
Technique SmoothContour
Depth 100
Direction Up
Size 7
Soften 0
Angle 120
Altitude 30
UseGlobalLight false
HighlightColor n
HighlightBlendMode Screen
HighlightOpacity 75
ShadowColor n
ShadowBlendMode Multiply
ShadowOpacity 75
Table 107. SatinSetting Properties Represented as Attributes
Attribute Name Applied false
EffectColor n
BlendMode Multiply
Opacity 50
Angle 120
Distance 7
IDML File Format Specification
Value
Value
Value
473 Appendix C. IDML Defaults
Attribute Name Value
Size 7
InvertEffect false
Table 108. DirectionalFeatherSetting Properties Represented as Attributes
Attribute Name Value
Applied false
LeftWidth 0
RightWidth 0
TopWidth 0
BottomWidth 0
ChokeAmount 0
Angle 0
FollowShapeMode LeadingEdge
Noise 0
Table 109. GradientFeatherSetting Properties Represented as Attributes
Attribute Name Value
Applied false
Type Linear
Angle 0
Length 0
GradientStart 0 0
HiliteAngle 0
HiliteLength 0
1.1.20 Story Preferences
The <StoryPreference> element de"nes the default story preferences for the document.
Table 110. Story Preferences Properties Represented as Attributes
Attribute Name Value
OpticalMarginAlignment false
OpticalMarginSize 12
FrameType TextFrameType
StoryOrientation Horizontal
StoryDirection LeftToRightDirection
IDML File Format Specification
474 Appendix C. IDML Defaults
1.1.21 Text Frame Preferences
The <TextFramePreference> element de"nes the default text frame preferences for the document.
Table 111. Text Frame Preferences Properties Represented as Attributes
Attribute Name Value
TextColumnCount 1
TextColumnGutter 12
TextColumnFixedWidth 144
UseFixedColumnWidth false
FirstBaselineOffset AscentOffset
MinimumFirstBaselineOffset 0
VerticalJustification TopAlign
VerticalThreshold 0
IgnoreWrap false
VerticalBalanceColumns false
Table 112. Text Frame Preferences Properties Represented as Elements
Element Name Value
InsetSpacing <ListItem type=unit>0</ListItem>
<ListItem type=unit>0</ListItem>
<ListItem type=unit>0</ListItem>
<ListItem type=unit>0</ListItem>
1.1.22 Text Preferences
The <TextPreference> element de"nes the default text preferences for the document.
Table 113. Text Preferences Properties Represented as Attributes
Attribute Name Value
TypographersQuotes true
HighlightHjViolations false
HighlightKeeps false
HighlightSubstitutedGlyphs false
HighlightCustomSpacing false
HighlightSubstitutedFonts true
UseOpticalSize true
UseParagraphLeading false
SuperscriptSize 58.3
SuperscriptPosition 33.3
IDML File Format Specification
475 Appendix C. IDML Defaults
Attribute Name Value
SubscriptSize 58.3
SubscriptPosition 33.3
SmallCap 70
LeadingKeyIncrement 2
BaselineShiftKeyIncrement 2
KerningKeyIncrement 20
ShowInvisibles false
JustifyTextWraps false
AbutTextToTextWrap true
ZOrderTextWrap false
LinkTextFilesWhenImporting false
HighlightKinsoku false
UseNewVerticalScaling false
UseCidMojikumi false
EnableStylePreviewMode false
SmartTextReflow true
AddPages EndOfStory
LimitToMasterTextFrames true
PreserveFacingPageSpreads false
DeleteEmptyPages false
1.1.23 Text Defaults
The <TextDefault> element de"nes the default text formatting for the document.
Table 114. Text Defaults Properties Represented as Attributes
Attribute Name Value
FirstLineIndent 0
LeftIndent 0
RightIndent 0
SpaceBefore 0
SpaceAfter 0
Justification LeftAlign
SingleWordJustification FullyJustified
AutoLeading 120
DropCapLines 0
DropCapCharacters 0
KeepLinesTogether false
KeepAllLinesTogether false
IDML File Format Specification
476 Appendix C. IDML Defaults
Attribute Name Value
KeepWithNext 0
KeepFirstLines 2
KeepLastLines 2
StartParagraph Anywhere
Composer HL Composer
MinimumWordSpacing 80
MaximumWordSpacing 133
DesiredWordSpacing 100
MinimumLetterSpacing 0
MaximumLetterSpacing 0
DesiredLetterSpacing 0
MinimumGlyphScaling 100
MaximumGlyphScaling 100
DesiredGlyphScaling 100
RuleAbove false
RuleAboveOverprint false
RuleAboveLineWeight 1
RuleAboveTint -1
RuleAboveOffset 0
RuleAboveLeftIndent 0
RuleAboveRightIndent 0
RuleAboveWidth ColumnWidth
RuleAboveGapTint -1
RuleAboveGapOverprint false
RuleBelow false
RuleBelowLineWeight 1
RuleBelowTint -1
RuleBelowOffset 0
RuleBelowLeftIndent 0
RuleBelowRightIndent 0
RuleBelowWidth ColumnWidth
RuleBelowGapTint -1
HyphenateCapitalizedWords true
Hyphenation true
HyphenateBeforeLast 2
HyphenateAfterFirst 2
HyphenateWordsLongerThan 5
HyphenateLadderLimit 3
HyphenationZone 36
IDML File Format Specification
477 Appendix C. IDML Defaults
Attribute Name Value
HyphenWeight 5
AppliedParagraphStyle ParagraphStyle/$ID/NormalParagraphStyle
AppliedCharacterStyle CharacterStyle/$ID/[No character style]
FontStyle Regular
PointSize 12
KerningMethod $ID/Metrics
Tracking 0
Capitalization Normal
Position Normal
Underline false
StrikeThru false
Ligatures true
NoBreak false
HorizontalScale 100
VerticalScale 100
BaselineShift 0
Skew 0
FillTint -1
StrokeTint -1
StrokeWeight 1
OverprintStroke false
OverprintFill false
OTFFigureStyle Default
OTFOrdinal false
OTFFraction false
OTFDiscretionaryLigature false
OTFTitling false
OTFContextualAlternate true
OTFSwash false
UnderlineTint -1
UnderlineGapTint -1
UnderlineOverprint false
UnderlineGapOverprint false
UnderlineOffset -9999
UnderlineWeight -9999
StrikeThroughTint -1
StrikeThroughGapTint -1
StrikeThroughOverprint false
StrikeThroughGapOverprint false
IDML File Format Specification
478 Appendix C. IDML Defaults
Attribute Name Value
StrikeThroughOffset -9999
StrikeThroughWeight -9999
FillColor Color/Black
StrokeColor Swatch/None
AppliedLanguage $ID/English: USA
LastLineIndent 0
HyphenateLastWord true
OTFSlashedZero false
OTFHistorical false
OTFStylisticSets 0
GradientFillLength -1
GradientFillAngle 0
GradientStrokeLength -1
GradientStrokeAngle 0
GradientFillStart 0 0
GradientStrokeStart 0 0
RuleBelowOverprint false
RuleBelowGapOverprint false
DropcapDetail 0
HyphenateAcrossColumns true
KeepRuleAboveInFrame false
IgnoreEdgeAlignment false
OTFMark true
OTFLocale true
PositionalForm None
ParagraphDirection LeftToRightDirection
ParagraphJustification DefaultJustification
MiterLimit 4
StrokeAlignment OutsideAlignment
EndJoin MiterEndJoin
OTFOverlapSwash false
OTFStylisticAlternate false
OTFJustificationAlternate false
OTFStretchedAlternate false
CharacterDirection DefaultDirection
KeyboardDirection DefaultDirection
DigitsType DefaultDigits
Kashidas DefaultKashidas
DiacriticPosition OpentypePosition
IDML File Format Specification
479 Appendix C. IDML Defaults
Attribute Name Value
XOffsetDiacritic 0
YOffsetDiacritic 0
ParagraphBreakType Anywhere
PageNumberType AutoPageNumber
AppliedNamedGrid n
CharacterAlignment AlignEmCenter
Tsume 0
LeadingAki -1
TrailingAki -1
CharacterRotation 0
Jidori 0
ShataiMagnification 0
ShataiDegreeAngle 4500
ShataiAdjustRotation false
ShataiAdjustTsume true
Tatechuyoko false
TatechuyokoXOffset 0
TatechuyokoYOffset 0
KentenTint -1
KentenStrokeTint -1
KentenWeight -1
KentenOverprintFill Auto
KentenOverprintStroke Auto
KentenKind None
KentenPlacement 0
KentenAlignment AlignKentenCenter
KentenPosition AboveRight
KentenFontSize -1
KentenXScale 100
KentenYScale 100
KentenCustomCharacter
KentenCharacterSet CharacterInput
RubyTint -1
RubyWeight -1
RubyOverprintFill Auto
RubyOverprintStroke Auto
RubyStrokeTint -1
RubyFontSize -1
RubyOpenTypePro true
IDML File Format Specification
480 Appendix C. IDML Defaults
Attribute Name Value
RubyXScale 100
RubyYScale 100
RubyType PerCharacterRuby
RubyAlignment RubyJIS
RubyPosition AboveRight
RubyXOffset 0
RubyYOffset 0
RubyParentSpacing RubyParent121Aki
RubyAutoAlign true
RubyOverhang false
RubyAutoScaling false
RubyParentScalingPercent 66
RubyParentOverhangAmount RubyOverhangOneRuby
Warichu false
WarichuSize 50
WarichuLines 2
WarichuLineSpacing 0
WarichuAlignment Auto
WarichuCharsAfterBreak 2
WarichuCharsBeforeBreak 2
OTFProportionalMetrics false
OTFHVKana false
OTFRomanItalics false
ScaleAffectsLineHeight false
CjkGridTracking false
GlyphForm None
GridAlignFirstLineOnly false
GridAlignment None
GridGyoudori 0
AutoTcy 0
AutoTcyIncludeRoman false
KinsokuType KinsokuPushInFirst
KinsokuHangType None
BunriKinshi true
Rensuuji true
RotateSingleByteCharacters false
LeadingModel LeadingModelAkiBelow
RubyAutoTcyDigits 0
RubyAutoTcyIncludeRoman false
IDML File Format Specification
481 Appendix C. IDML Defaults
Attribute Name Value
RubyAutoTcyAutoScale true
TreatIdeographicSpaceAsSpace false
AllowArbitraryHyphenation false
ParagraphGyoudori false
BulletsAndNumberingListType NoList
NumberingExpression ^#.^t
BulletsTextAfter ^t
NumberingLevel 1
NumberingContinue true
NumberingStartAt 1
NumberingApplyRestartPolicy true
BulletsAlignment LeftAlign
NumberingAlignment LeftAlign
SpanSplitColumnCount All
SpanColumnType SingleColumn
SplitColumnsInsideGutter 6
SplitColumnsOutsideGutter 6
KeepWithPrevious false
Table 115. Text Defaults Properties Represented as Elements
Element Name Value
BalanceRaggedLines NoBalancing
RuleAboveColor Text Color
RuleAboveGapColor Swatch/None
RuleAboveType StrokeStyle/$ID/Solid
RuleBelowColor Text Color
RuleBelowGapColor Swatch/None
RuleBelowType StrokeStyle/$ID/Solid
AppliedFont Minion Pro
Leading Auto
UnderlineColor Text Color
UnderlineGapColor Swatch/None
UnderlineType StrokeStyle/$ID/Solid
StrikeThroughColor Text Color
StrikeThroughGapColor Swatch/None
StrikeThroughType StrokeStyle/$ID/Solid
KentenFillColor Text Color
KentenStrokeColor Text Color
IDML File Format Specification
482 Appendix C. IDML Defaults
Element Name Value
KentenFont $ID/
KentenFontStyle Nothing
RubyFill Text Color
RubyStroke Text Color
RubyFont $ID/
RubyFontStyle Nothing
KinsokuSet Nothing
Mojikumi Nothing
BulletChar BulletCharacterType=UnicodeOnly
BulletCharacterValue=8226
BulletsFont $ID/
BulletsFontStyle Nothing
BulletsCharacterStyle CharacterStyle/$ID/[No character style]
NumberingCharacterStyle CharacterStyle/$ID/[No character style]
AppliedNumberingList /$ID/[Default]
NumberingFormat 1, 2, 3, 4...
NumberingRestartPolicies RestartPolicy=AnyPreviousLevel
LowerLevel=0 UpperLevel=0
1.1.24 Anchored Object Defaults
The <AnchoredObjectDefault> element de"nes the default formatting and behavior of anchored
objects in the document.
Table 116. Anchored Object Defaults Properties Represented as Attributes
Attribute Name Value
AnchorContent Unassigned
InitialAnchorHeight 72
InitialAnchorWidth 72
AnchoredParagraphStyle ParagraphStyle/$ID/[No paragraph style]
AnchoredObjectStyle ObjectStyle/$ID/[None]
1.1.25 Anchored Object Settings
The <AnchoredObjectSetting> element de"nes the default anchored objects settings used in the
document.
IDML File Format Specification
483 Appendix C. IDML Defaults
Table 117. Anchored Object Settings Properties Represented as Attributes
Attribute Name Value
AnchoredPosition InlinePosition
SpineRelative false
LockPosition false
PinPosition true
AnchorPoint BottomRightAnchor
HorizontalAlignment LeftAlign
HorizontalReferencePoint TextFrame
VerticalAlignment TopAlign
VerticalReferencePoint LineBaseline
AnchorXoffset 0
AnchorYoffset 0
AnchorSpaceAbove 0
1.1.26 Baseline Frame Grid Options
The <BaselineFrameGridOption> element de"nes the default anchored objects settings used in
the document.
Table 118. Basic Frame Grid Options Properties Represented as Attributes
Attribute Name Value
UseCustomBaselineFrameGrid false
StartingOffsetForBaselineFrameGrid 0
BaselineFrameGridRelativeOption TopOfInset
BaselineFrameGridIncrement 12
Table 119. Baseline Frame Grid Options Represented as Elements
Element Name Value
BaselineFrameGridColor LightBlue
1.1.27 Footnote Options
The <FootnoteOption> element de"nes the default footnote options used in the document.
Table 120. Footnote Options Properties Represented as Attributes
Attribute Name Value
StartAt 1
Prefix
IDML File Format Specification
484 Appendix C. IDML Defaults
Attribute Name Value
Suffix
FootnoteTextStyle ParagraphStyle/$ID/NormalParagraphStyle
FootnoteMarkerStyle CharacterStyle/$ID/[No character style]
SeparatorText &#x9;
SpaceBetween 0
Spacer 0
FootnoteFirstBaselineOffset LeadingOffset
FootnoteMinimumFirstBaselineOffset 0
EosPlacement false
NoSplitting false
RuleOn true
RuleLineWeight 1
RuleTint 100
RuleGapTint 100
RuleGapOverprint false
RuleOverprint false
RuleLeftIndent 0
RuleWidth 72
RuleOffset 0
ContinuingRuleOn true
ContinuingRuleLineWeight 1
ContinuingRuleTint 100
ContinuingRuleGapTint 100
ContinuingRuleOverprint false
ContinuingRuleGapOverprint false
ContinuingRuleLeftIndent 0
ContinuingRuleWidth 288
ContinuingRuleOffset 0
Table 121. Footnote Options Properties Represented as Elements
Element Name Value
FootnoteNumberingStyle Arabic
RestartNumbering DontRestart
ShowPrefixSuffix NoPrefixSuffix
MarkerPositioning SuperscriptMarker
RuleType StrokeStyle/$ID/Solid
RuleColor Color/Black
RuleGapColor Swatch/None
IDML File Format Specification
485 Appendix C. IDML Defaults
Element Name Value
ContinuingRuleType StrokeStyle/$ID/Solid
ContinuingRuleColor Color/Black
ContinuingRuleGapColor Swatch/None
1.1.28 Text Wrap Preferences
The <TextWrapPreference> element de"nes the default text wrap preferences used in the
document. The <TextWrapPreference> element contains a <ContourOption> element.
Table 122. Text Wrap Preferences Properties Represented as Attributes
Attribute Name Value
Inverse false
ApplyToMasterPageOnly false
TextWrapSide BothSides
TextWrapMode None
Table 123. Text Wrap Preferences Properties Represented as Elements
Element Name Value
TextWrapOffset Top=0 Left=0 Bottom=0 Right=0
Table 124. Contour Option Properties Represented as Attributes
Attribute Name Value
ContourType SameAsClipping
IncludeInsideEdges false
ContourPathName $ID/
1.1.29 Document Preferences
The <DocumentPreference> element de"nes the default document preferences.
Table 125. DocumentPreference Properties Represented as Attributes
Attribute Name Value
PageHeight 792
PageWidth 612
PagesPerDocument 1
FacingPages true
DocumentBleedTopOffset 0
IDML File Format Specification
486 Appendix C. IDML Defaults
Attribute Name Value
DocumentBleedBottomOffset 0
DocumentBleedInsideOrLeftOffset 0
DocumentBleedOutsideOrRightOffset 0
DocumentBleedUniformSize true
SlugTopOffset 0
SlugBottomOffset 0
SlugInsideOrLeftOffset 0
SlugRightOrOutsideOffset 0
DocumentSlugUniformSize false
PreserveLayoutWhenShuffling true
AllowPageShuffle true
OverprintBlack true
PageBinding LeftToRight
ColumnDirection Horizontal
ColumnGuideLocked true
MasterTextFrame false
SnippetImportUsesOriginalLocation false
Intent PrintIntent
Table 126. Document Preferences Properties Represented as Elements
Element Name Value
ColumnGuideColor Violet
MarginGuideColor Magenta
1.1.30 Margin Preferences
The <MarginPreference> element de"nes the default margin preferences used in the document.
Table 127. Margin Preferences Properties Represented as Attributes
Attribute Name Value
ColumnCount 1
ColumnGutter 12
Top 36
Bottom 36
Left 36
Right 36
ColumnDirection Horizontal
IDML File Format Specification
487 Appendix C. IDML Defaults
1.1.31 Page Item Defaults
The <PageItemDefault> element de"nes the default formatting used for page items.
Table 128. Page Item Defaults Properties Represented as Attributes
Attribute Name Value
AppliedGraphicObjectStyle ObjectStyle/$ID/[Normal Graphics Frame]
AppliedTextObjectStyle ObjectStyle/$ID/[Normal Text Frame]
AppliedGridObjectStyle ObjectStyle/$ID/[Normal Grid]
FillColor Swatch/None
FillTint -1
StrokeWeight 1
MiterLimit 4
EndCap ButtEndCap
EndJoin MiterEndJoin
StrokeType StrokeStyle/$ID/Solid
LeftLineEnd None
RightLineEnd None
StrokeColor Swatch/None
StrokeTint -1
TopLeftCornerOption None
TopRightCornerOption None
BottomLeftCornerOption None
BottomRightCornerOption None
TopLeftCornerRadius 12
TopRightCornerRadius 12
BottomLeftCornerRadius 12
BottomRightCornerRadius 12
GradientFillAngle 0
GradientStrokeAngle 0
GapColor Swatch/None
GapTint -1
StrokeAlignment CenterAlignment
Nonprinting false
1.1.32 Frame Fitting Options
The <FrameFittingOption> element de"nes the default frame "tting options used in the
document.
IDML File Format Specification
488 Appendix C. IDML Defaults
Table 129. Frame Fitting Properties Represented as Attributes
Attribute Name Value
LeftCrop 0
TopCrop 0
RightCrop 0
BottomCrop 0
FittingOnEmptyFrame None
FittingAlignment TopLeftAnchor
AutoFit false
1.1.33 Button Preferences
The <ButtonPreference> element de"nes the default button name used in the document.
Table 130. Button Preferences Properties Represented as Attributes
Attribute Name Value
Name
1.1.34 Conditional Text Preferences
The <ConditionalTextPreference> element de"nes the defaults for conditional text used in the
document.
Table 131. Conditional Text Preferences Properties Represented as Attributes
Attribute Name Value
ShowConditionIndicators ShowIndicators
ActiveConditionSet n
1.1.35 XML Tag
The <XMLTag> element de"nes the default XML tag used in the document.
Table 132. XML Tag Properties Represented as Attributes
Attribute Name Value
Name Root
Table 133. XMLTag Properties Represented as Elements
Attribute Name Value
TagColor type enumeration>LightBlue
IDML File Format Specification
489 Appendix C. IDML Defaults
1.1.36 Layer
The <Layer> element de"nes the default layer used in the document.
Table 134. Layer Properties Represented as Attributes
Attribute Name Value
Name Layer 1
Visible true
Locked false
IgnoreWrap false
ShowGuides true
LockGuides false
UI true
Expendable true
Printable true
Table 135. Layer Properties Represented as Elements
Attribute Name Value
LayerColor type LightBlue
1.1.37 Master Spread
The <MasterSpread> element de"nes the default master spread of the document.
The <MasterSpread> element contains two <Page> elements, which, in turn, contain
<MarginPreference> and <GridDataInformation> elements.
Table 136. Master Spread Properties Represented as Attributes
Attribute Name Value
ItemTransform 1 0 0 1 0 0
Name A-Master
NamePrefix A
BaseName Master
ShowMasterItems true
PageCount 2
OverriddenPageItemProps
PageColor UseMasterPageColor
The two <Page> elements are identical.
IDML File Format Specification
490 Appendix C. IDML Defaults
Table 137. Page Properties Represented as Attributes
Attribute Name Value
Name A
AppliedTrapPreset TrapPreset/$ID/kDefaultTrapStyleName
AppliedMaster n
OverrideList
TabOrder
GridStartingPoint TopOutside
UseMasterGrid true
PageColor UseMasterPageColor
Each <Page> element contains a <MarginPreference> element.
Table 138. Margin Preferences Properties Represented as Attributes
Attribute Name Value
ColumnCount 1
ColumnGutter 12
Top 36
Bottom 36
Left 36
Right 36
ColumnDirection Horizontal
ColumnsPositions 0 540
Each <Page> element contains a <GridDataInformation> element.
Table 139. Grid Data Information Properties Represented as Attributes
Attribute Name Value
FontStyle Regular
PointSize 12
CharacterAki 0
LineAki 9
HorizontalScale 100
VerticalScale 100
LineAlignment LeftOrTopLineJustify
GridAlignment AlignEmCenter
CharacterAlignment AlignEmCenter
IDML File Format Specification
491 Appendix C. IDML Defaults
Table 140. Grid Data Information Properties Represented as Elements
Attribute Name Value
AppliedFont Minion Pro
Table 141. Timing Settings Properties Represented as Attributes
Attribute Name Value
UnassignedDynamicTargets
1.1.38 Page
The <Page> element de"nes the default page used in the document.
Table 142. Page Properties Represented as Attributes
Attribute Name Value
Name A
AppliedTrapPreset TrapPreset/$ID/kDefaultTrapStyleName
AppliedMaster n
OverrideList
TabOrder
GridStartingPoint TopOutside
UseMasterGrid true
Each <Page> element contains a <MarginPreference> element.
Table 143. Margin Preferences Properties Represented as Attributes
Attribute Name Value
ColumnCount 1
ColumnGutter 12
Top 36
Bottom 36
Left 36
Right 36
ColumnDirection Horizontal
ColumnsPositions 0 540
Each <Page> element contains a <GridDataInformation> element.
IDML File Format Specification
492 Appendix C. IDML Defaults
Table 144. Grid Data Information Properties Represented as Attributes
Attribute Name Value
FontStyle Regular
PointSize 12
CharacterAki 0
LineAki 9
HorizontalScale 100
VerticalScale 100
LineAlignment LeftOrTopLineJustify
GridAlignment AlignEmCenter
CharacterAlignment AlignEmCenter
Table 145. Grid Data Information Properties Represented as Elements
Element Name Value
AppliedFont Minion Pro
1.1.39 Spread
The <Spread> element de"nes the default spread used in the document. The <Spread> element
contains a < FlattenerPreference > element. The <Spread> element contains a <Page> element.
Table 146. Spread Properties Represented as Attributes
Attribute Name Value
PageTransitionType None
PageTransitionDirection NotApplicable
PageTransitionDuration Medium
FlattenerOverride Default
ShowMasterItems true
PageCount 1
BindingLocation 0
AllowPageShuffle true
ItemTransform 1 0 0 1 0 0
Table 147. Flattener Preference Properties Represented as Attributes
Attribute Name Value
LineArtAndTextResolution 300
GradientAndMeshResolution 150
ClipComplexRegions false
ConvertAllStrokesToOutlines false
IDML File Format Specification
493 Appendix C. IDML Defaults
Attribute Name Value
ConvertAllTextToOutlines false
Table 148. Flattener Preference Properties Represented as Elements
Element Name Value
RasterVectorBalance 50
Table 149. Page Properties Represented as Attributes
Attribute Name Value
Name A
AppliedTrapPreset TrapPreset/$ID/kDefaultTrapStyleName
AppliedMaster n
OverrideList
TabOrder
GridStartingPoint TopOutside
UseMasterGrid true
Each <Page> element contains a <MarginPreference> element.
Table 150. Margin Preferences Properties Represented as Attributes
Attribute Name Value
ColumnCount 1
ColumnGutter 12
Top 36
Bottom 36
Left 36
Right 36
ColumnDirection Horizontal
ColumnsPositions 0 540
Each <Page> element contains a <GridDataInformation> element.
Table 151. Grid Data Information Properties Represented as Attributes
Attribute Name Value
FontStyle Regular
PointSize 12
CharacterAki 0
LineAki 9
HorizontalScale 100
IDML File Format Specification
494 Appendix C. IDML Defaults
Attribute Name Value
VerticalScale 100
LineAlignment LeftOrTopLineJustify
GridAlignment AlignEmCenter
CharacterAlignment AlignEmCenter
Table 152. Grid Data Information Properties Represented as Elements
Attribute Name Value
AppliedFont Minion Pro
Table 153. Timing Settings Properties Represented as Attributes
Attribute Name Value
UnassignedDynamicTargets
1.1.40 Section
The <Section> element de"nes the default section used in the document.
Table 154. Section Properties Represented as Attributes
Attribute Name Value
Length 1
Name
PageNumberStyle Arabic
ContinueNumbering true
IncludeSectionPrefix false
Marker
PageStart ube
SectionPrefix
1.1.41 XmlStory
The <XmlStory> element de"nes the default XML story (unplaced XML text elements)
of the document. The <XmlStory> element contains a <StoryPreference> element and a
<ParagraphStyleRange> element.
Table 155. Xml Story Properties Represented as Attributes
Attribute Name Value
AppliedTOCStyle n
TrackChanges false
IDML File Format Specification
495 Appendix C. IDML Defaults
Attribute Name Value
StoryTitle $ID/
AppliedNamedGrid n
Table 156. Story Preferences Properties Represented as Attributes
Attribute Name Value
OpticalMarginAlignment false
OpticalMarginSize 12
FrameType TextFrameType
StoryOrientation Horizontal
StoryDirection LeftToRightDirection
Table 157. Paragraph Style Range Properties Represented as Attributes
Attribute Name Value
AppliedParagraphStyle ParagraphStyle/$ID/NormalParagraphStyle
The <ParagraphStyleRange> element contains a <CharacterStyleRange> element.
Table 158. Character Style Range Properties Represented as Attributes
Attribute Name Value
AppliedCharacterStyle CharacterStyle/$ID/[No character style]
Table 159. Character Style Range Properties Represented as Elements
Element Name Value
XMLElement MarkupTag=XMLTag/Root
Content ï¿
Table 160. InCopyExportOption Properties Represented as Attributes
Attribute Name Value
IncludeGraphicProxies true
IncludeAllResources true
1.1.42 IndexingSortOptions
The <IndexingSortOptions> elements de"nes the default indexing sort options for the document.
The default document contains eight <IndexSortOptions> elements with the following names:
$ID/kIndexGroup_Symbol, $ID/kIndexGroup_Alphabet, $ID/kIndexGroup_Numeric, $ID/
kWRIndexGroup_GreekAlphabet, $ID/kWRIndexGroup_CyrillicAlphabet, $ID/kIndexGroup_
Kana, $ID/kIndexGroup_Chinese, $ID/kIndexGroup_Korean ArabicAlphabet, HebrewAlphabet.
IDML File Format Specification
496 Appendix C. IDML Defaults
$ID/kIndexGroup_Symbol
Table 161. Indexing Sort Options Properties Represented as Attributes
Attribute Name Value
Name $ID/kIndexGroup_Symbol
Include true
Priority 0
HeaderType Nothing
$ID/kIndexGroup_Alphabet
Table 162. Indexing Sort Options Properties Represented as Attributes
Attribute Name Value
Name $ID/kIndexGroup_Alphabet
Include true
Priority 1
HeaderType BasicLatin
$ID/kIndexGroup_Numeric
Table 163. Indexing Sort Options Properties Represented as Attributes
Attribute Name Value
Name $ID/kIndexGroup_Numeric
Include false
Priority 2
HeaderType Nothing
$ID/kWRIndexGroup_GreekAlphabet
Table 164. Indexing Sort Options Properties Represented as Attributes
Attribute Name Value
Name $ID/kWRIndexGroup_GreekAlphabet
Include false
Priority 3
HeaderType Nothing
IDML File Format Specification
497 Appendix C. IDML Defaults
$ID/kWRIndexGroup_CyrillicAlphabet
Table 165. Indexing Sort Options Properties Represented as Attributes
Attribute Name Value
Name $ID/kWRIndexGroup_CyrillicAlphabet
Include false
Priority 4
HeaderType Russian
$ID/kIndexGroup_Kana
Table 166. Indexing Sort Options Properties Represented as Attributes
Attribute Name Value
Name $ID/kIndexGroup_Kana
Include false
Priority 5
HeaderType HiraganaAll
$ID/kIndexGroup_Chinese
Table 167. Indexing Sort Options Properties Represented as Attributes
Attribute Name Value
Name $ID/kIndexGroup_Chinese
Include false
Priority 6
HeaderType ChinesePinyin
$ID/kIndexGroup_Korean
Table 168. Indexing Sort Options Properties Represented as Attributes
Attribute Name Value
Name $ID/kIndexGroup_Korean
Include false
Priority 7
HeaderType KoreanConsonant
IDML File Format Specification
498 Appendix C. IDML Defaults
1.1.43 Bullets
A series of <ABullet> elements de"ne the default bullets for the document. These elements are
named dABullet0, dABullet1, dABullet2, dABullet3, and dABullet4.
dABullet0
Table 169. Bullet Properties Represented as Attributes
Attribute Name Value
CharacterType UnicodeOnly
CharacterValue 8226
Bullet Properties Represented as Elements
Element Name Value
BulletsFont $ID/
BulletsFontStyle $ID/
dABullet1
Table 170. Bullet Properties Represented as Attributes
Attribute Name Value
CharacterType UnicodeOnly
CharacterValue 42
Table 171. Bullet Properties Represented as Elements
Element Name Value
BulletsFont $ID/
BulletsFontStyle $ID/
dABullet2
Table 172. Bullet Properties Represented as Attributes
Attribute Name Value
CharacterType UnicodeOnly
CharacterValue 9674
IDML File Format Specification
499 Appendix C. IDML Defaults
Table 173. Bullet Properties Represented as Elements
Element Name Value
BulletsFont $ID/
BulletsFontStyle $ID/
dABullet3
Table 174. Bullet Properties Represented as Attributes
Attribute Name Value
CharacterType UnicodeWithFont
CharacterValue 187
Table 175. Bullet Properties Represented as Elements
Element Name Value
BulletsFont Myriad Pro
BulletsFontStyle $ID/Regular
dABullet4
Table 176. Bullet Properties Represented as Attributes
Attribute Name Value
CharacterType GlyphWithFont
CharacterValue 503
Table 177. Bullet Properties Represented as Elements
Element Name Value
BulletsFont Minion Pro
BulletsFontStyle $ID/Regular
1.1.44 Assignment
The <Assignment> element de"nes the default assignment used in the document.
Table 178. Assignment Properties Represented as Attributes
Attribute Name Value
Name $ID/UnassignedInCopy
UserName $ID/
IDML File Format Specification
500 Appendix C. IDML Defaults: Defaults Example Files
Attribute Name Value
ExportOptions AssignedSpreads
IncludeLinksWhenPackage true
FilePath $ID/
Table 179. Assignment Properties Represented as Elements
Element Name Value
FrameColor Nothing
1.1 Defaults Example Files
We’ve provided a set of example "les demonstrating further details of InDesign’s IDML defaults.
the following sections explain the purpose of each "le.
BlankFile.idml
Provides defaults for optional attributes for various document settings. Overlaps with the defaults
"le but does have some unique items that are not contained in the defaults "le.
PageItems.idml
Provides defaults for optional attributes for page item elements.
Text.idml
Provides defaults for optional attributes for elements related to text, tables, table of contents,
index, hyperlinks, variables, cross-references, InCopy stories and assignments. Non-roman text
features are not included here and should be looked for in Misc.idml.
RID.idml
Provides defaults for optional attributes related to Rich Interactive Documents such as
amimations, for AnimationSetting, TimingSetting, NavigationPoint, various Behavior.
Misc.idml
Provides defaults related to composite fonts, kinsoku table, mojikumi table, data merge, XML
elements, pre$ight rules etc.
IDML File Format Specification
501 Appendix D. Datatype.rnc
Appendix D. Datatype.rnc
This appendix contains the datatype.rnc "le, which de"nes the data types used in an IDML,
InDesign Snippet (.idms), or InCopy ICML document.
grammar {
anything = ( element * { anything } | attribute * { text } | text )*
empty_type = attribute type { string "empty" }
bool_type = attribute type { string "boolean" }
string_type = attribute type { string "string" }
short_type = attribute type { string "short" }
long_type = attribute type { string "long" }
longlong_type = attribute type { string "longlong" }
double_type = attribute type { string "double" }
object_type = attribute type { string "object" }
date_type = attribute type { string "date" }
file_type = attribute type { string "file" }
enum_type = attribute type { string "enumeration" }
unit_type = attribute type { string "unit" }
stream_type = attribute type { string "binary" }
list_type = attribute type { string "list" }
record_type = attribute type { string "record" }
AddPageOptions_EnumValue = string "EndOfStory" | string "EndOfSection" | string
"EndOfDocument"
AdornmentOverprint_EnumValue = string "Auto" | string "OverprintOn" | string
"OverprintOff"
AlignmentStyleOptions_EnumValue = string "Spreadsheet" | string "LeftAlign" |
string "RightAlign" | string "CenterAlign"
AlternateGlyphForms_EnumValue = string "None" | string "TraditionalForm"
| string "ExpertForm" | string "JIS78Form" | string "JIS83Form" | string
"MonospacedHalfWidthForm" | string "ThirdWidthForm" | string "QuarterWidthForm"
| string "NLCForm" | string "ProportionalWidthForm" | string "FullWidthForm" |
string "JIS04Form" | string "JIS90Form"
AnchorPoint_EnumValue = string "TopLeftAnchor" | string "TopCenterAnchor" | string
"TopRightAnchor" | string "LeftCenterAnchor" | string "CenterAnchor" | string
"RightCenterAnchor" | string "BottomLeftAnchor" | string "BottomCenterAnchor" |
string "BottomRightAnchor"
AnchorPosition_EnumValue = string "InlinePosition" | string "AboveLine" | string
"Anchored"
AnchoredRelativeTo_EnumValue = string "ColumnEdge" | string "TextFrame" | string
"PageMargins" | string "PageEdge" | string "AnchorLocation"
AnimationEaseOptions_EnumValue = string "NoEase" | string "EaseIn" | string
"EaseOut" | string "EaseInOut" | string "CustomEase"
AnimationPlayOperations_EnumValue = string "Play" | string "Stop" | string "Pause"
| string "Resume" | string "ReversePlayback" | string "StopAll"
ArrowHead_EnumValue = string "None" | string "SimpleArrowHead" |
string "SimpleWideArrowHead" | string "TriangleArrowHead" | string
"TriangleWideArrowHead" | string "BarbedArrowHead" | string "CurvedArrowHead"
| string "CircleArrowHead" | string "CircleSolidArrowHead" | string
"SquareArrowHead" | string "SquareSolidArrowHead" | string "BarArrowHead"
AssignmentExportOptions_EnumValue = string "EmptyFrames" | string
"AssignedSpreads" | string "Everything"
AutoEnum_EnumValue = string "AutoValue"
BalanceLinesStyle_EnumValue = string "NoBalancing" | string "VeeShape" | string
"FullyBalanced" | string "PyramidShape"
BaselineFrameGridRelativeOption_EnumValue = string "TopOfPage" | string
"TopOfMargin" | string "TopOfFrame" | string "TopOfInset"
BaselineGridRelativeOption_EnumValue = string
"TopOfPageOfBaselineGridRelativeOption" | string
"TopOfMarginOfBaselineGridRelativeOption"
IDML File Format Specification 19 March, 2012 Adobe Confidential
502 Appendix D. Datatype.rnc
BehaviorEvents_EnumValue = string "MouseUp" | string "MouseDown" | string
"MouseEnter" | string "MouseExit" | string "OnFocus" | string "OnBlur"
BevelAndEmbossDirection_EnumValue = string "Up" | string "Down"
BevelAndEmbossStyle_EnumValue = string "OuterBevel" | string "InnerBevel" | string
"Emboss" | string "PillowEmboss"
BevelAndEmbossTechnique_EnumValue = string "SmoothContour" | string "ChiselHard" |
string "ChiselSoft"
BlendMode_EnumValue = string "Normal" | string "Multiply" | string "Screen" |
string "Overlay" | string "SoftLight" | string "HardLight" | string "ColorDodge"
| string "ColorBurn" | string "Darken" | string "Lighten" | string "Difference" |
string "Exclusion" | string "Hue" | string "Saturation" | string "Color" | string
"Luminosity"
BlendingSpace_EnumValue = string "Default" | string "RGB" | string "CMYK"
BookletTypeOptions_EnumValue = string "TwoUpSaddleStitch" | string
"TwoUpPerfectBound" | string "TwoUpConsecutive" | string "ThreeUpConsecutive" |
string "FourUpConsecutive"
BuildingBlockTypes_EnumValue = string "CustomStringBuildingBlock" | string
"FileNameBuildingBlock" | string "ChapterNumberBuildingBlock" | string
"PageNumberBuildingBlock" | string "FullParagraphBuildingBlock" | string
"ParagraphNumberBuildingBlock" | string "ParagraphTextBuildingBlock" | string
"BookmarkNameBuildingBlock"
BulletCharacterType_EnumValue = string "UnicodeOnly" | string "UnicodeWithFont" |
string "GlyphWithFont"
Capitalization_EnumValue = string "Normal" | string "SmallCaps" | string "AllCaps"
| string "CapToSmallCap"
ChangeCaseOptions_EnumValue = string "None" | string "Uppercase" | string
"Lowercase" | string "Titlecase" | string "Sentencecase"
ChangeTypes_EnumValue = string "InsertedText" | string "DeletedText" | string
"MovedText"
ChapterNumberSources_EnumValue = string "UserDefined" | string
"ContinueFromPreviousDocument" | string "SameAsPreviousDocument"
CharacterAlignment_EnumValue = string "AlignBaseline" | string "AlignEmTop" |
string "AlignEmCenter" | string "AlignEmBottom" | string "AlignICFTop" | string
"AlignICFBottom"
CharacterCountLocation_EnumValue = string "None" | string "TopAlign" | string
"LeftAlign" | string "BottomAlign" | string "RightAlign"
CharacterDirectionOptions_EnumValue = string "DefaultDirection" | string
"LeftToRightDirection" | string "RightToLeftDirection"
ClippingPathType_EnumValue = string "None" | string "DetectEdges" | string
"AlphaChannel" | string "PhotoshopPath" | string "UserModifiedPath"
ColorModel_EnumValue = string "Spot" | string "Process" | string "Registration" |
string "Mixedinkmodel"
ColorOutputModes_EnumValue = string "CompositeLeaveUnchanged" | string
"CompositeGray" | string "CompositeRGB" | string "CompositeCMYK" | string
"Separations" | string "InRIPSeparations"
ColorOverride_EnumValue = string "Normal" | string "Specialpaper" | string
"Specialblack" | string "Specialregistration" | string "Hiddenreserved" | string
"Mixedinkparent"
ColorRenderingDictionary_EnumValue = string "Default" | string "UseDocument" |
string "Working"
ColorSettingsPolicy_EnumValue = string "ColorPolicyOff" | string
"PreserveEmbeddedProfiles" | string "ConvertToWorkingSpace" | string
"CombinationOfPreserveAndSafeCmyk"
ColorSpace_EnumValue = string "RGB" | string "CMYK" | string "LAB" | string
"MixedInk" | string "NoAlternateColor"
ComposeUsing_EnumValue = string "UseUserDictionary" | string "UseDocument" |
string "Both"
ConditionIndicatorMethod_EnumValue = string "UseUnderline" | string "UseHighlight"
ConditionIndicatorMode_EnumValue = string "ShowIndicators" | string
"ShowAndPrintIndicators" | string "HideIndicators"
ConditionUnderlineIndicatorAppearance_EnumValue = string "Wavy" | string "Solid" |
string "Dashed"
ContentType_EnumValue = string "Unassigned" | string "GraphicType" | string
"TextType"
ContentsTypeSettings_EnumValue = string "AxialShade" | string "RadialShade" |
IDML File Format Specification 19 March, 2012 Adobe Confidential
503 Appendix D. Datatype.rnc
string "MeshShade" | string "ConstantShade"
ContourOptionsTypes_EnumValue = string "BoundingBox" | string "PhotoshopPath" |
string "DetectEdges" | string "AlphaChannel" | string "GraphicFrame" | string
"SameAsClipping"
ConvertPageBreaks_EnumValue = string "None" | string "PageBreak" | string
"ColumnBreak"
ConvertTablesOptions_EnumValue = string "UnformattedTable" | string
"UnformattedTabbedText"
CornerOptions_EnumValue = string "None" | string "RoundedCorner" | string
"InverseRoundedCorner" | string "InsetCorner" | string "BevelCorner" | string
"FancyCorner"
CrossReferenceType_EnumValue = string "SeeOrAlsoBracket" | string "See" |
string "SeeAlso" | string "SeeHerein" | string "SeeAlsoHerein" | string
"CustomCrossReference" | string "CustomCrossReferenceBefore" | string
"CustomCrossReferenceAfter"
DataFormat_EnumValue = string "ASCII" | string "Binary"
DataSourceType_EnumValue = string "CommaSeparated" | string "TabDelimited"
DesignOptions_EnumValue = string "FromCurrentAppearance" | string
"ToCurrentAppearance" | string "ToCurrentLocation"
DiacriticPositionOptions_EnumValue = string "DefaultPosition" | string
"LoosePosition" | string "MediumPosition" | string "TightPosition" | string
"OpentypePosition"
DigitsTypeOptions_EnumValue = string "DefaultDigits" | string "ArabicDigits"
| string "HindiDigits" | string "FarsiDigits" | string "NativeDigits" |
string "FullFarsiDigits" | string "ThaiDigits" | string "LaoDigits" | string
"DevanagariDigits" | string "BengaliDigits" | string "GurmukhiDigits" | string
"GujaratiDigits" | string "OriyaDigits" | string "TamilDigits" | string
"TeluguDigits" | string "KannadaDigits" | string "MalayalamDigits" | string
"TibetanDigits" | string "KhmerDigits" | string "BurmeseDigits"
DisplayOrderOptions_EnumValue = string "OrderByRows" | string "OrderByColumns"
DisplaySettingOptions_EnumValue = string "HighQuality" | string "Typical" | string
"Optimized" | string "Default"
DocumentIntentOptions_EnumValue = string "PrintIntent" | string "WebIntent"
DynamicTriggerEvents_EnumValue = string "OnPageLoad" | string "OnPageClick" |
string "OnStateLoad" | string "OnClick" | string "OnRollover" | string "OnRelease"
| string "OnRolloff" | string "OnSelfClick" | string "OnSelfRollover"
EmptyFrameFittingOptions_EnumValue = string "None" | string "ContentToFrame" |
string "Proportionally" | string "FillProportionally"
EncodingType_EnumValue = string "HexEncoding" | string "Ascii85Encoding" | string
"Ascii64Encoding"
EndCap_EnumValue = string "ButtEndCap" | string "RoundEndCap" | string
"ProjectingEndCap"
EndJoin_EnumValue = string "MiterEndJoin" | string "RoundEndJoin" | string
"BevelEndJoin"
FeatherCornerType_EnumValue = string "Sharp" | string "Rounded" | string
"Diffusion"
FeatherMode_EnumValue = string "None" | string "Standard"
FirstBaseline_EnumValue = string "AscentOffset" | string "CapHeight" | string
"LeadingOffset" | string "EmboxHeight" | string "XHeight" | string "FixedHeight"
Fitting_EnumValue = string "Proportional" | string "FitContentToFrame" | string
"FitFrameToContent" | string "PreserveSizes" | string "FillProportional"
FlattenerLevel_EnumValue = string "Low" | string "MediumLow" | string "Medium" |
string "MediumHigh" | string "High"
FlipValues_EnumValue = string "NotFlipped" | string "Flipped" | string
"UndefinedFlipValue"
Flip_EnumValue = string "None" | string "Horizontal" | string "Vertical" | string
"HorizontalAndVertical" | string "Both"
FloatingWindowPosition_EnumValue = string "UpperLeft" | string "UpperMiddle" |
string "UpperRight" | string "CenterLeft" | string "Center" | string "CenterRight"
| string "LowerLeft" | string "LowerMiddle" | string "LowerRight"
FloatingWindowSize_EnumValue = string "OneFifth" | string "OneFourth" | string
"OneHalf" | string "Full" | string "Double" | string "Triple" | string "Quadruple"
| string "Max"
FollowShapeModeOptions_EnumValue = string "None" | string "LeadingEdge" | string
"AllEdges"
IDML File Format Specification 19 March, 2012 Adobe Confidential
504 Appendix D. Datatype.rnc
FontDownloading_EnumValue = string "None" | string "Complete" | string "Subset" |
string "SubsetLarge"
FontStatus_EnumValue = string "Installed" | string "NotAvailable" | string
"Fauxed" | string "Substituted" | string "Unknown"
FontTypes_EnumValue = string "Type1" | string "TrueType" | string "CID" |
string "ATC" | string "Bitmap" | string "OCF" | string "OpenTypeCFF" | string
"OpenTypeCID" | string "OpenTypeTT" | string "Unknown"
FootnoteFirstBaseline_EnumValue = string "AscentOffset" | string "CapHeight"
| string "LeadingOffset" | string "EmboxHeight" | string "XHeight" | string
"FixedHeight"
FootnoteMarkerPositioning_EnumValue = string "NormalMarker" | string
"SuperscriptMarker" | string "SubscriptMarker" | string "RubyMarker"
FootnoteNumberingStyle_EnumValue = string "UpperRoman" | string "LowerRoman" |
string "UpperLetters" | string "LowerLetters" | string "Arabic" | string "Symbols"
| string "Kanji" | string "FullWidthArabic" | string "SingleLeadingZeros" | string
"DoubleLeadingZeros" | string "Asterisks" | string "ArabicAlifBaTah" | string
"ArabicAbjad" | string "HebrewBiblical" | string "HebrewNonStandard"
FootnotePrefixSuffix_EnumValue = string "NoPrefixSuffix" | string
"PrefixSuffixReference" | string "PrefixSuffixMarker" | string "PrefixSuffixBoth"
FootnoteRestarting_EnumValue = string "DontRestart" | string "PageRestart" |
string "SpreadRestart" | string "SectionRestart"
FrameTypes_EnumValue = string "TextFrameType" | string "FrameGridType" | string
"Unknown"
GIFOptionsPalette_EnumValue = string "AdaptivePalette" | string "MacintoshPalette"
| string "WebPalette" | string "WindowsPalette"
GlowTechnique_EnumValue = string "Softer" | string "Precise"
GoToZoomOptions_EnumValue = string "InheritZoom" | string "FitWindow" | string
"FitWidth" | string "FitVisible" | string "ActualSize"
GradientType_EnumValue = string "Linear" | string "Radial"
GridAlignment_EnumValue = string "None" | string "AlignBaseline" | string
"AlignEmTop" | string "AlignEmCenter" | string "AlignEmBottom" | string
"AlignICFTop" | string "AlignICFBottom"
GridStartingPointOptions_EnumValue = string "TopOutside" | string "TopInside" |
string "BottomOutside" | string "BottomInside" | string "CenterVertical" | string
"CenterHorizontal" | string "CenterCompletely"
GridViewSettings_EnumValue = string "GridViewEnum" | string "ZnViewEnum" | string
"AlignViewEnum" | string "GridAndZnViewEnum"
HeaderFooterBreakTypes_EnumValue = string "InAllTextColumns" | string
"OncePerTextFrame" | string "OncePerPage"
HeaderTypes_EnumValue = string "BasicLatin" | string "FinnishSwedish" | string
"DanishNorwegian" | string "Spanish" | string "Croatian" | string "Czech" |
string "Estonian" | string "Hungarian" | string "Latvian" | string "Lithuanian"
| string "Polish" | string "Romanian" | string "Slovak" | string "Slovenian" |
string "Turkish" | string "Belarusian" | string "Bulgarian" | string "Russian" |
string "Ukrainian" | string "KoreanConsonant" | string "KoreanConsonantPlusVowel"
| string "HiraganaAll" | string "HiraganaConsonantsOnly" | string "KatakanaAll"
| string "KatakanaConsonantsOnly" | string "ChinesePinyin" | string
"ChineseStrokeCount"
HorizontalAlignment_EnumValue = string "RightAlign" | string "LeftAlign" | string
"CenterAlign" | string "TextAlign"
HorizontalOrVertical_EnumValue = string "Horizontal" | string "Vertical"
HyperlinkAppearanceHighlight_EnumValue = string "None" | string "Invert" | string
"Outline" | string "Inset"
HyperlinkAppearanceStyle_EnumValue = string "Solid" | string "Dashed"
HyperlinkAppearanceWidth_EnumValue = string "Thin" | string "Medium" | string
"Thick"
HyperlinkDestinationPageSetting_EnumValue = string "Fixed" | string "FitView" |
string "FitWindow" | string "FitWidth" | string "FitHeight" | string "FitVisible"
| string "InheritZoom"
ImageConversion_EnumValue = string "Automatic" | string "JPEG" | string "GIF"
ImageDataTypes_EnumValue = string "AllImageData" | string "OptimizedSubsampling" |
string "ProxyImageData" | string "None"
ImportPlatform_EnumValue = string "Macintosh" | string "PC"
ImportedPageCropOptions_EnumValue = string "CropContent" | string "CropBleed" |
string "CropSlug"
IDML File Format Specification 19 March, 2012 Adobe Confidential
505 Appendix D. Datatype.rnc
InCopyUIColors_EnumValue = string "Canary" | string "Lemon" | string "Electrolyte"
| string "Lime" | string "Forest" | string "Lichen" | string "Jade" | string
"Aqua" | string "Cirrus" | string "Ether" | string "Slate" | string "Ultramarine"
| string "Midnight" | string "Blueberry" | string "Eggplant" | string "Grape" |
string "Fuchsia" | string "Iris" | string "Carnation" | string "Mocha" | string
"Wheat" | string "Mustard" | string "Amber" | string "Cornstarch" | string
"Powder" | string "Smoke" | string "Graphite" | string "Gunmetal" | string
"LightBlue" | string "Red" | string "Green" | string "Blue" | string "Yellow"
| string "Magenta" | string "Cyan" | string "Gray" | string "Black" | string
"Orange" | string "DarkGreen" | string "Teal" | string "Tan" | string "Brown"
| string "Violet" | string "Gold" | string "DarkBlue" | string "Pink" | string
"Lavender" | string "BrickRed" | string "OliveGreen" | string "Peach" | string
"Burgundy" | string "GrassGreen" | string "Ochre" | string "Purple" | string
"LightGray" | string "Charcoal" | string "GridBlue" | string "GridOrange" | string
"Fiesta" | string "LightOlive" | string "Lipstick" | string "CuteTeal" | string
"Sulphur" | string "GridGreen" | string "White"
IndexFormat_EnumValue = string "RuninFormat" | string "NestedFormat"
InkTypes_EnumValue = string "Normal" | string "Opaque" | string "Transparent" |
string "OpaqueIgnore"
InnerGlowSource_EnumValue = string "CenterSourced" | string "EdgeSourced"
JPEGOptionsFormat_EnumValue = string "BaselineEncoding" | string
"ProgressiveEncoding"
JPEGOptionsQuality_EnumValue = string "Low" | string "Medium" | string "High" |
string "Maximum"
Justification_EnumValue = string "LeftAlign" | string "CenterAlign" | string
"RightAlign" | string "LeftJustified" | string "RightJustified" | string
"CenterJustified" | string "FullyJustified" | string "ToBindingSide" | string
"AwayFromBindingSide"
KashidasOptions_EnumValue = string "DefaultKashidas" | string "KashidasOff"
KentenAlignment_EnumValue = string "AlignKentenLeft" | string "AlignKentenCenter"
KentenCharacterSet_EnumValue = string "CharacterInput" | string "ShiftJIS" |
string "JIS" | string "Kuten" | string "Unicode"
KentenCharacter_EnumValue = string "None" | string "KentenSesameDot" | string
"KentenWhiteSesameDot" | string "KentenBlackCircle" | string "KentenWhiteCircle"
| string "KentenBlackTriangle" | string "KentenWhiteTriangle" | string
"KentenBullseye" | string "KentenFisheye" | string "KentenSmallBlackCircle" |
string "KentenSmallWhiteCircle" | string "Custom"
KinsokuHangTypes_EnumValue = string "None" | string "KinsokuHangRegular" | string
"KinsokuHangForce"
KinsokuSet_EnumValue = string "Nothing" | string "HardKinsoku" | string
"SoftKinsoku" | string "KoreanKinsoku" | string "SimplifiedChineseKinsoku" |
string "TraditionalChineseKinsoku"
KinsokuType_EnumValue = string "KinsokuPushInFirst" | string "KinsokuPushOutFirst"
| string "KinsokuPushOutOnly" | string "KinsokuPrioritizeAdjustmentAmount"
LeadingModel_EnumValue = string "LeadingModelRoman" | string
"LeadingModelAkiBelow" | string "LeadingModelAkiAbove" | string
"LeadingModelCenter" | string "LeadingModelCenterDown"
Leading_EnumValue = string "Auto"
LineAlignment_EnumValue = string "LeftOrTopLineAlign" | string "CenterLineAlign"
| string "RightOrBottomLineAlign" | string "LeftOrTopLineJustify" | string
"CenterLineJustify" | string "RightOrBottomLineJustify" | string "FullLineJustify"
LinkExportPolicy_EnumValue = string "NoAutoExport" | string "ExportOnModify" |
string "ExportOnClose" | string "ExportOnSave"
LinkImportPolicy_EnumValue = string "NoAutoImport" | string "ImportOnModify"
LinkResourceStoreState_EnumValue = string "Normal" | string "Cached" | string
"Contained" | string "Embedded"
ListAlignment_EnumValue = string "LeftAlign" | string "CenterAlign" | string
"RightAlign"
ListType_EnumValue = string "NoList" | string "BulletList" | string "NumberedList"
LockStateValues_EnumValue = string "None" | string "UnmanagedStory" | string
"CheckedInStory" | string "CheckedOutStory" | string "LockedStory" | string
"EmbeddedStory" | string "MissingLockState" | string "MixedLockState"
MarkLineWeight_EnumValue = string "P125pt" | string "P25pt" | string "P50pt" |
string "P05mm" | string "P07mm" | string "P10mm" | string "P15mm" | string "P20mm"
| string "P30mm"
IDML File Format Specification 19 March, 2012 Adobe Confidential
506 Appendix D. Datatype.rnc
MarkTypes_EnumValue = string "Default" | string "JMarkWithCircle" | string
"JMarkWithoutCircle"
MeasurementUnits_EnumValue = string "Points" | string "Picas" | string "Inches"
| string "InchesDecimal" | string "Millimeters" | string "Centimeters" | string
"Ciceros" | string "Custom" | string "Agates" | string "U" | string "Bai" | string
"Mils" | string "Pixels" | string "Q" | string "Ha" | string "AmericanPoints"
MojikumiTableDefaults_EnumValue = string "Nothing" | string
"LineEndAllOneHalfEmEnum" | string "OneEmIndentLineEndUkeOneHalfEmEnum"
| string "OneOrOneHalfEmIndentLineEndUkeOneHalfEmEnum" |
string "OneOrOneHalfEmIndentLineEndAllOneEmEnum" | string
"OneEmIndentLineEndAllOneEmEnum" | string "OneEmIndentLineEndAllNoFloatEnum"
| string "OneEmIndentLineEndUkeNoFloatEnum" | string
"OneOrOneHalfEmIndentLineEndUkeNoFloatEnum" | string
"OneEmIndentLineEndAllOneHalfEmEnum" | string "LineEndAllOneEmEnum" | string
"LineEndUkeNoFloatEnum" | string "OneOrOneHalfEmIndentLineEndPeriodOneEmEnum" |
string "OneEmIndentLineEndPeriodOneEmEnum" | string "LineEndPeriodOneEmEnum" |
string "TradChineseDefault" | string "SimpChineseDefault"
MoviePlayOperations_EnumValue = string "Play" | string "PlayFromNavigationPoint" |
string "Stop" | string "Pause" | string "Resume" | string "StopAll"
NestedStyleDelimiters_EnumValue = string "Sentence" | string "AnyWord" |
string "AnyCharacter" | string "Letters" | string "Digits" | string "Tabs" |
string "InlineGraphic" | string "Dropcap" | string "ForcedLineBreak" | string
"EndNestedStyle" | string "IndentHereTab" | string "EmSpace" | string "EnSpace"
| string "NonbreakingSpace" | string "AutoPageNumber" | string "SectionMarker" |
string "Repeat"
NothingEnum_EnumValue = string "Nothing"
NumberedParagraphsOptions_EnumValue = string "IncludeFullParagraph" | string
"IncludeNumbersOnly" | string "ExcludeNumbers"
NumberingStyle_EnumValue = string "UpperRoman" | string "LowerRoman" | string
"UpperLetters" | string "LowerLetters" | string "Arabic" | string "Kanji" | string
"KatakanaModern" | string "KatakanaTraditional" | string "FormatNone" | string
"SingleLeadingZeros" | string "ArabicAlifBaTah" | string "ArabicAbjad" | string
"HebrewBiblical" | string "HebrewNonStandard" | string "DoubleLeadingZeros" |
string "TripleLeadingZeros"
OTFFigureStyle_EnumValue = string "TabularLining" | string "ProportionalOldstyle"
| string "ProportionalLining" | string "TabularOldstyle" | string "Default"
OutlineJoin_EnumValue = string "MiterEndJoin" | string "RoundEndJoin" | string
"BevelEndJoin"
PDFCrop_EnumValue = string "CropArt" | string "CropPDF" | string "CropTrim" |
string "CropBleed" | string "CropMedia" | string "CropContentVisibleLayers" |
string "CropContentAllLayers" | string "CropContent"
PPDValues_EnumValue = string "DeviceIndependent"
PageBindingOptions_EnumValue = string "Default" | string "RightToLeft" | string
"LeftToRight"
PageColorOptions_EnumValue = string "Nothing" | string "UseMasterColor"
PageNumberPosition_EnumValue = string "AfterEntry" | string "BeforeEntry" | string
"None"
PageNumberStyle_EnumValue = string "UpperRoman" | string "LowerRoman" | string
"UpperLetters" | string "LowerLetters" | string "Arabic" | string "Kanji" | string
"DoubleLeadingZeros" | string "TripleLeadingZeros" | string "ArabicAlifBaTah" |
string "ArabicAbjad" | string "HebrewBiblical" | string "HebrewNonStandard" |
string "SingleLeadingZeros" | string "FullWidthArabic"
PageNumberTypes_EnumValue = string "AutoPageNumber" | string "NextPageNumber" |
string "PreviousPageNumber" | string "TextVariable"
PagePositions_EnumValue = string "UpperLeft" | string "CenterHorizontally" |
string "CenterVertically" | string "Centered"
PageRange_EnumValue = string "AllPages" | string "SelectedItems"
PageReferenceType_EnumValue = string "CurrentPage" | string "ToNextStyleChange"
| string "ToNextUseOfStyle" | string "ToEndOfStory" | string "ToEndOfDocument" |
string "ToEndOfSection" | string "ForNextNParagraphs" | string "ForNextNPages" |
string "SuppressPageNumbers"
PageTransitionDirectionOptions_EnumValue = string "NotApplicable" | string
"Down" | string "RightToLeft" | string "LeftDown" | string "LeftUp" | string
"LeftToRight" | string "RightDown" | string "RightUp" | string "Up" | string "In"
| string "Out" | string "Horizontal" | string "Vertical" | string "HorizontalIn" |
IDML File Format Specification 19 March, 2012 Adobe Confidential
507 Appendix D. Datatype.rnc
string "HorizontalOut" | string "VerticalIn" | string "VerticalOut"
PageTransitionDurationOptions_EnumValue = string "Fast" | string "Medium" | string
"Slow"
PageTransitionTypeOptions_EnumValue = string "None" | string "BlindsTransition"
| string "BoxTransition" | string "CombTransition" | string "CoverTransition"
| string "DissolveTransition" | string "FadeTransition" | string
"PageTurnTransition" | string "PushTransition" | string "SplitTransition" | string
"UncoverTransition" | string "WipeTransition" | string "ZoomInTransition" | string
"ZoomOutTransition"
PaperSize_EnumValue = string "Auto"
PaperSizes_EnumValue = string "DefinedByDriver" | string "Custom"
ParagraphBreakTypes_EnumValue = string "Anywhere" | string "NextColumn" | string
"NextFrame" | string "NextPage" | string "NextOddPage" | string "NextEvenPage"
ParagraphDirectionOptions_EnumValue = string "LeftToRightDirection" | string
"RightToLeftDirection"
ParagraphJustificationOptions_EnumValue = string "DefaultJustification" | string
"ArabicJustification" | string "NaskhJustification"
PathTypeAlignments_EnumValue = string "TopPathAlignment" | string
"BottomPathAlignment" | string "CenterPathAlignment"
PlacedVectorProfilePolicy_EnumValue = string "IgnoreAll" | string
"IgnoreOutputIntent" | string "HonorAllProfiles"
PlayMode_EnumValue = string "Once" | string "StayOpen" | string "RepeatPlay"
PlayOperations_EnumValue = string "Play" | string "Stop" | string "Pause" | string
"Resume" | string "StopAll"
Position_EnumValue = string "Normal" | string "Superscript" | string "Subscript"
| string "OTSuperscript" | string "OTSubscript" | string "OTNumerator" | string
"OTDenominator"
PositionalForms_EnumValue = string "None" | string "Calculate" | string "Initial"
| string "Medial" | string "Final" | string "Isolated"
PostScriptLevels_EnumValue = string "Level2" | string "Level3"
PreflightRuleFlag_EnumValue = string "RuleIsDisabled" | string "ReturnAsError" |
string "ReturnAsWarning" | string "ReturnAsInformational"
PrintLayerOptions_EnumValue = string "AllLayers" | string "VisibleLayers" | string
"VisiblePrintableLayers"
PrintPageOrientation_EnumValue = string "Portrait" | string "Landscape" | string
"ReversePortrait" | string "ReverseLandscape"
PrinterPresetTypes_EnumValue = string "Default" | string "Custom"
Printer_EnumValue = string "PostscriptFile"
Profile_EnumValue = string "PostScriptCMS" | string "UseDocument" | string
"Working" | string "NoCMS"
RenderingIntent_EnumValue = string "UseColorSettings" | string "Perceptual"
| string "Saturation" | string "RelativeColorimetric" | string
"AbsoluteColorimetric"
ResolveStyleClash_EnumValue = string "ResolveClashUseExisting" | string
"ResolveClashAutoRename" | string "ResolveClashUseNew"
RestartPolicy_EnumValue = string "AnyPreviousLevel" | string "AfterSpecificLevel"
| string "RangeOfLevels"
RubyAlignments_EnumValue = string "RubyLeft" | string "RubyCenter" | string
"RubyRight" | string "RubyFullJustify" | string "RubyJIS" | string "RubyEqualAki"
| string "Ruby1Aki"
RubyKentenPosition_EnumValue = string "AboveRight" | string "BelowLeft"
RubyOverhang_EnumValue = string "None" | string "RubyOverhangOneRuby" |
string "RubyOverhangHalfRuby" | string "RubyOverhangOneChar" | string
"RubyOverhangHalfChar" | string "RubyOverhangNoLimit"
RubyParentSpacing_EnumValue = string "RubyParentNoAdjustment" | string
"RubyParentBothSides" | string "RubyParent121Aki" | string "RubyParentEqualAki" |
string "RubyParentFullJustify"
RubyTypes_EnumValue = string "GroupRuby" | string "PerCharacterRuby"
RuleDataType_EnumValue = string "IntegerDataType" | string "ShortIntegerDataType"
| string "RealDataType" | string "StringDataType" | string "BooleanDataType" |
string "ObjectDataType" | string "ListDataType"
RuleWidth_EnumValue = string "TextWidth" | string "ColumnWidth"
RulerOrigin_EnumValue = string "SpreadOrigin" | string "PageOrigin" | string
"SpineOrigin"
ScaleModes_EnumValue = string "ScaleWidthHeight" | string "ScaleToFit"
IDML File Format Specification 19 March, 2012 Adobe Confidential
508 Appendix D. Datatype.rnc
Screeening_EnumValue = string "Default" | string "Custom"
SearchStrategies_EnumValue = string "FirstOnPage" | string "LastOnPage"
Sequences_EnumValue = string "All" | string "Odd" | string "Even"
ShadowMode_EnumValue = string "None" | string "Drop"
SignatureSizeOptions_EnumValue = string "SignatureSize4" | string "SignatureSize8"
| string "SignatureSize12" | string "SignatureSize16" | string "SignatureSize32"
SingleWordJustification_EnumValue = string "LeftAlign" | string "CenterAlign" |
string "RightAlign" | string "FullyJustified"
SourceSpaces_EnumValue = string "UseDocument" | string "ProofSpace"
SpanColumnCountOptions_EnumValue = string "All"
SpanColumnTypeOptions_EnumValue = string "SingleColumn" | string "SpanColumns" |
string "SplitColumns"
SpecialCharacters_EnumValue = string "AutoPageNumber" | string "NextPageNumber" |
string "PreviousPageNumber" | string "SectionMarker" | string "BulletCharacter" |
string "CopyrightSymbol" | string "DegreeSymbol" | string "EllipsisCharacter" |
string "ForcedLineBreak" | string "ParagraphSymbol" | string "RegisteredTrademark"
| string "SectionSymbol" | string "TrademarkSymbol" | string "RightIndentTab"
| string "IndentHereTab" | string "EmDash" | string "EnDash" | string
"DiscretionaryHyphen" | string "NonbreakingHyphen" | string "EndNestedStyle" |
string "DoubleLeftQuote" | string "DoubleRightQuote" | string "SingleLeftQuote"
| string "SingleRightQuote" | string "EmSpace" | string "EnSpace" | string
"FlushSpace" | string "HairSpace" | string "NonbreakingSpace" | string "ThinSpace"
| string "FigureSpace" | string "PunctuationSpace" | string "ColumnBreak" |
string "FrameBreak" | string "PageBreak" | string "OddPageBreak" | string
"EvenPageBreak" | string "FootnoteSymbol" | string "LeftToRightEmbedding" |
string "RightToLeftEmbedding" | string "PopDirectionalFormatting" | string
"LeftToRightOverride" | string "RightToLeftOverride" | string "DottedCircle" |
string "ZeroWidthJoiner" | string "TextVariable" | string "SingleStraightQuote"
| string "DoubleStraightQuote" | string "DiscretionaryLineBreak" | string
"ZeroWidthNonjoiner" | string "ThirdSpace" | string "QuarterSpace" | string
"SixthSpace" | string "FixedWidthNonbreakingSpace" | string "HebrewMaqaf" | string
"HebrewGeresh" | string "HebrewGershayim" | string "ArabicKashida" | string
"ArabicComma" | string "ArabicSemicolon" | string "ArabicQuestionMark" | string
"LeftToRightMark" | string "RightToLeftMark" | string "HebrewSofPasuk"
SpreadFlattenerLevel_EnumValue = string "Default" | string "None" | string
"Custom"
StartParagraph_EnumValue = string "Anywhere" | string "NextColumn" | string
"NextFrame" | string "NextPage" | string "NextOddPage" | string "NextEvenPage"
StateTypes_EnumValue = string "Up" | string "Rollover" | string "Down"
StoryDirectionOptions_EnumValue = string "LeftToRightDirection" | string
"RightToLeftDirection" | string "UnknownDirection"
StoryHorizontalOrVertical_EnumValue = string "Horizontal" | string "Vertical" |
string "Unknown"
StrokeAlignment_EnumValue = string "CenterAlignment" | string "InsideAlignment" |
string "OutsideAlignment"
StrokeCornerAdjustment_EnumValue = string "None" | string "Dashes" | string "Gaps"
| string "DashesAndGaps"
StrokeOrderTypes_EnumValue = string "RowOnTop" | string "ColumnOnTop" | string
"BestJoins" | string "Indesign2Compatibility"
TabStopAlignment_EnumValue = string "LeftAlign" | string "CenterAlign" | string
"RightAlign" | string "CharacterAlign"
TableDirectionOptions_EnumValue = string "LeftToRightDirection" | string
"RightToLeftDirection"
TableFormattingOptions_EnumValue = string "ExcelFormattedTable" | string
"ExcelUnformattedTable" | string "ExcelUnformattedTabbedText" | string
"ExcelFormatOnlyOnce"
TextImportCharacterSet_EnumValue = string "Ansi" | string "RecommendShiftJIS83pv"
| string "ShiftJIS90pv" | string "ShiftJIS90ms" | string "GB2312" | string
"ChineseBig5" | string "MacintoshCE" | string "MacintoshCyrillic" | string
"MacintoshGreek" | string "MacintoshTurkish" | string "WindowsCyrillic" | string
"WindowsEE" | string "WindowsGreek" | string "WindowsTurkish" | string "GB18030"
| string "KSC5601" | string "WindowsBaltic" | string "WindowsCE" | string
"MacintoshRoman" | string "MacintoshCroatian" | string "MacintoshIcelandic" |
string "MacintoshRomanian" | string "CyrillicKOI8R" | string "CyrillicKOI8U"
| string "CyrillicCP855" | string "DOSLatin2" | string "CyrillicISO" | string
IDML File Format Specification 19 March, 2012 Adobe Confidential
509 Appendix D. Datatype.rnc
"GreekISO" | string "CentralEuropeanISO" | string "TurkishISO" | string "UTF16" |
string "UTF8"
TextPathEffects_EnumValue = string "RainbowPathEffect" | string "SkewPathEffect"
| string "RibbonPathEffect" | string "StairStepPathEffect" | string
"GravityPathEffect"
TextStrokeAlign_EnumValue = string "CenterAlignment" | string "OutsideAlignment"
TextTypeAlignments_EnumValue = string "AscenderTextAlignment" | string
"DescenderTextAlignment" | string "CenterTextAlignment" | string
"BaselineTextAlignment" | string "AboveRightEmBoxTextAlignment" | string
"BelowLeftEmBoxTextAlignment" | string "AboveRightIcfBoxTextAlignment" | string
"BelowLeftIcfBoxTextAlignment"
TextWrapModes_EnumValue = string "None" | string "JumpObjectTextWrap" | string
"NextColumnTextWrap" | string "BoundingBoxTextWrap" | string "Contour"
TextWrapSideOptions_EnumValue = string "BothSides" | string "LeftSide" | string
"RightSide" | string "SideTowardsSpine" | string "SideAwayFromSpine" | string
"LargestArea"
ThumbsPerPage_EnumValue = string "K1x2" | string "K2x2" | string "K3x3" | string
"K4x4" | string "K5x5" | string "K6x6" | string "K7x7"
TilingTypes_EnumValue = string "Auto" | string "AutoJustified" | string "Manual"
TrapEndTypes_EnumValue = string "MiterTrapEnds" | string "OverlapTrapEnds"
TrapImagePlacementTypes_EnumValue = string "CenterEdges" | string "Choke" | string
"ImageNeutralDensity" | string "ImagesOverSpread"
Trapping_EnumValue = string "Off" | string "ApplicationBuiltin" | string
"AdobeInRIP"
UIColors_EnumValue = string "LightBlue" | string "Red" | string "Green" | string
"Blue" | string "Yellow" | string "Magenta" | string "Cyan" | string "Gray" |
string "Black" | string "Orange" | string "DarkGreen" | string "Teal" | string
"Tan" | string "Brown" | string "Violet" | string "Gold" | string "DarkBlue" |
string "Pink" | string "Lavender" | string "BrickRed" | string "OliveGreen" |
string "Peach" | string "Burgundy" | string "GrassGreen" | string "Ochre" | string
"Purple" | string "LightGray" | string "Charcoal" | string "GridBlue" | string
"GridOrange" | string "Fiesta" | string "LightOlive" | string "Lipstick" | string
"CuteTeal" | string "Sulphur" | string "GridGreen" | string "White"
UpdateLinkOptions_EnumValue = string "Unknown" | string "ApplicationSettings" |
string "KeepOverrides"
VariableNumberingStyles_EnumValue = string "Current" | string "Arabic" | string
"UpperRoman" | string "LowerRoman" | string "UpperLetters" | string "LowerLetters"
| string "Kanji" | string "FullWidthArabic" | string "SingleLeadingZeros" | string
"DoubleLeadingZeros"
VariableScopes_EnumValue = string "DocumentScope" | string "SectionScope"
VariableTypes_EnumValue = string "CustomTextType" | string "FileNameType"
| string "LastPageNumberType" | string "ChapterNumberType" | string
"OutputDateType" | string "CreationDateType" | string "ModificationDateType" |
string "MatchCharacterStyleType" | string "MatchParagraphStyleType" | string
"XrefPageNumberType" | string "XrefChapterNumberType" | string "LiveCaptionType"
VerticalAlignment_EnumValue = string "TopAlign" | string "BottomAlign" | string
"CenterAlign"
VerticalJustification_EnumValue = string "TopAlign" | string "CenterAlign" |
string "BottomAlign" | string "JustifyAlign"
VerticallyRelativeTo_EnumValue = string "ColumnEdge" | string "TextFrame" | string
"PageMargins" | string "PageEdge" | string "LineBaseline" | string "LineXheight" |
string "LineAscent" | string "Capheight" | string "TopOfLeading"
ViewZoomStyle_EnumValue = string "FullScreen" | string "ZoomIn" | string "ZoomOut"
| string "FitPage" | string "ActualSize" | string "FitWidth" | string "FitVisible"
| string "SinglePage" | string "OneColumn" | string "TwoColumn"
VisibilityInPdf_EnumValue = string "VisibleInPdf" | string "HiddenInPdf" | string
"VisibleButDoesNotPrintInPdf" | string "HiddenButPrintableInPdf"
WarichuAlignment_EnumValue = string "Auto" | string "LeftAlign" | string
"CenterAlign" | string "RightAlign" | string "FullyJustified" | string
"LeftJustified" | string "CenterJustified" | string "RightJustified"
WatermarkHorizontalPositionEnum_EnumValue = string "WatermarkHLeft" | string
"WatermarkHCenter" | string "WatermarkHRight"
WatermarkVerticalPositionEnum_EnumValue = string "WatermarkVTop" | string
"WatermarkVCenter" | string "WatermarkVBottom"
XMLExportUntaggedTablesFormat_EnumValue = string "None" | string "CALS"
IDML File Format Specification 19 March, 2012 Adobe Confidential
510 Appendix D. Datatype.rnc
XMLFileEncoding_EnumValue = string "UTF8" | string "UTF16" | string "ShiftJIS"
XMLImportStyles_EnumValue = string "AppendImport" | string "MergeImport"
XMLTransformFile_EnumValue = string "StylesheetInXML"
# A geometry path that contains the number of path points in the path, a list of
all the path points, and whether the path is open.
GeometryPathType_TypeDef =
attribute PathOpen { xsd:boolean },
element PathPointArray { element PathPointType { PathPointType_TypeDef }*
}
# A point in the form (x, y).
XyPointType_TypeDef = list { xsd:double ,xsd:double }
# An InDesign path point containing (anchor point, left direction point, right
direction point).
PathPointType_TypeDef =
attribute Anchor { XyPointType_TypeDef },
attribute LeftDirection { XyPointType_TypeDef },
attribute RightDirection { XyPointType_TypeDef }
# The bounds of a rectangle in the form [left, top, right, bottom].
RectangleBoundsType_TypeDef =
attribute Left { xsd:double },
attribute Top { xsd:double },
attribute Right { xsd:double },
attribute Bottom { xsd:double }
# A transformation matrix in the form (a, b, c, d, e, f).
TransformationMatrixType_TypeDef = list { xsd:double ,xsd:double ,xsd:double
,xsd:double ,xsd:double ,xsd:double }
# An override mojikumi aki.
OverrideMojikumiAkiType_TypeDef =
attribute TargetMojikumiClass { xsd:short },
attribute SideMojikumiClass { xsd:short },
attribute SideIsAfterTarget { xsd:boolean },
attribute Minimum { xsd:double },
attribute Desired { xsd:double },
attribute Maximum { xsd:double },
attribute CompressionPriority { xsd:short },
attribute AkiDoesNotFloat { xsd:boolean }
# A key value pair.
KeyValuePair_TypeDef =
attribute Key { xsd:string },
attribute Value { xsd:string }
# Properties or parameters using the InDesign UI Colors enumeration use this to
specify the type as either one of the enumerated UI colors or a list of RGB values
for a custom color.
InDesignUIColorType_TypeDef =
(list_type,
element ListItem { double_type, xsd:double {minInclusive="0" maxInclusive="255"}
},
element ListItem { double_type, xsd:double {minInclusive="0" maxInclusive="255"}
},
element ListItem { double_type, xsd:double {minInclusive="0" maxInclusive="255"}
}) |
(enum_type, UIColors_EnumValue )
# A point specified in unit type in the form (x, y).
UnitPointType_TypeDef = list { xsd:double ,xsd:double }
IDML File Format Specification 19 March, 2012 Adobe Confidential
511 Appendix D. Datatype.rnc
# The bounds of a rectangle specified in unit type in the form [top, left, bottom,
right].
UnitRectangleBoundsType_TypeDef =
attribute Top { xsd:double },
attribute Left { xsd:double },
attribute Bottom { xsd:double },
attribute Right { xsd:double }
# Properties or parameters using the InCopy UI Colors enumeration use this to
specify the type as either one of the enumerated UI colors or a list of RGB values
for a custom color.
InCopyUIColorType_TypeDef =
(list_type,
element ListItem { double_type, xsd:double {minInclusive="0" maxInclusive="255"}
},
element ListItem { double_type, xsd:double {minInclusive="0" maxInclusive="255"}
},
element ListItem { double_type, xsd:double {minInclusive="0" maxInclusive="255"}
}) |
(enum_type, InCopyUIColors_EnumValue )
# A name value pair
NameValuePair_TypeDef =
attribute Name { xsd:string },
attribute Value { xsd:string }
# Index header group.
IndexHeaderGroupType_TypeDef =
attribute InternalName { xsd:string },
attribute UIString { xsd:string },
attribute DocumentString { xsd:string },
attribute Visibility { xsd:boolean },
element SectionHeaderArray { element SectionHeaderType { SectionHeaderType_
TypeDef }*
}
# Index section header.
SectionHeaderType_TypeDef =
attribute SortingHeaderString { xsd:string },
attribute DocumentHeaderString { xsd:string },
attribute UIHeaderString { xsd:string },
attribute Language { xsd:int }
# Index instance.
IndexInstanceType_TypeDef =
attribute Name { xsd:string },
attribute Story { xsd:string }
# The preflight error results for a single node, consisting of up to three strings
describing error info for that node.
PreflightErrorNodeType_TypeDef =
attribute ParentNodeID { xsd:int },
attribute ErrorName { xsd:string },
attribute PageNumber { xsd:string },
attribute ErrorInfo { xsd:string },
element ErrorDetail { element PreflightErrorInfoType { PreflightErrorInfoType_
TypeDef }*
}
# The preflight results.
PreflightResultsType_TypeDef =
attribute DocumentName { xsd:string },
attribute ProfileName { xsd:string },
element Results { element PreflightErrorNodeType { PreflightErrorNodeType_
TypeDef }*
IDML File Format Specification 19 March, 2012 Adobe Confidential
512 Appendix D. Datatype.rnc
}
# preflight error detail info type
PreflightErrorInfoType_TypeDef =
attribute Label { xsd:string },
attribute Description { xsd:string }
# preflight rule data base list type
PreflightRuleDataBaseListType_TypeDef = list_type, element ListItem {
(string_type, xsd:string ) |
(double_type, xsd:double ) |
(long_type, xsd:int ) |
(short_type, xsd:short ) |
(bool_type, xsd:boolean ) |
(object_type, xsd:string )
}*
# preflight rule data list type
PreflightRuleDataListType_TypeDef = list_type, element ListItem {
list_type, element PreflightRuleDataBaseListType {
PreflightRuleDataBaseListType_TypeDef }*
}*
# animation data key frame type
AnimationDataKeyFrameType_TypeDef =
attribute KeyFrame { xsd:int },
attribute Value { xsd:double }
# animation data motion path key frame type
AnimationDataPathKeyFrameType_TypeDef =
attribute KeyFrame { xsd:int },
element PathPoint { PathPointType_TypeDef }
# A condition verses it’s visibility
VisibilityPair_TypeDef =
attribute Condition { xsd:string },
attribute Visibility { xsd:boolean }
}
IDML File Format Specification 19 March, 2012 Adobe Confidential
513 Appendix E. Update List of IDML 8.0: New Elements
Appendix E. Update List of IDML 8.0
This appendix describes changes to the structure of IDML "les and the IDML schema made for
Adobe InDesign CS6. These changes appear as new objects (XML elements in the IDML "le) and
new properties (attributes, in the XML of the IDML "le itself) on existing objects. The overall
structure of the IDML document (that is, the contents of the IDML zip archive) has not changed,
and remains as documented in section 8, "IDML Document Structure" above.
1.1 New Elements
1.1.1 LinkedPageItemOption
The LinkedPageItemOption element has been added as a child element to the <Oval> element,
<Sound > element, <Movie> element, <Graphic> element (see "Spline Item Containing an
Imported Graphic" on page 120), <Image> element, <EPS> element, <WMF> element, <PICT>
element, <PDF> element, <ImportedPage> element, <Rectangle> element (see "Graphics" on
page 91), <GraphicLine> element, <TextFrame> element (see "Text Frames" on page 127),
<Polygon> element, <Group> element, <EPSText> element, <FormField> element, <Button>
element (see "Buttons" on page 141), <MultiStateObject> element (see "Multi-State Object" on
page 149). This element is the link options for a linked Page Item.
1.1.2 HtmlItem
The HtmlItem element has been added as a child element to the <Oval> element, <Rectangle>
element (see "Graphics" on page 91), <GraphicLine> element, <Polygon> element and <Group>
element. This element is the embedded HTML item.
1.1.3 ParaStyleMapping
The ParaStyleMapping element has been added as child element to the <Application> element,
<Document> element (see "designmap.xml" on page 44) and <Story script> element. This
element is a para style mapping.
1.1.4 CharStyleMapping
The CharStyleMapping element has been added as child element to the <Application> element,
<Document> element (see "designmap.xml" on page 44)S and <Story script> element. This
element is a char style mapping.
1.1.5 TableStyleMapping
The TableStyleMapping element has been added as child element to the <Application> element,
<Document> element (see "designmap.xml" on page 44) and <Story script> element. This
element is a table style mapping.
IDML File Format Specification
514 Appendix E. Update List of IDML 8.0: New Elements
1.1.6 CellStyleMapping
The CellStyleMapping element has been added as child element to the <Application> element,
<Document> element (see "designmap.xml" on page 44) and <Story script> element. This
element is a cell style mapping.
1.1.7 CheckBox
The CheckBox element has been added as a child element to the <Spread> element (see "Spreads
and Master Spreads" on page 87), <Oval> element and <Rectangle> element (see "Graphics" on
page 91).
1.1.8 ComboBox
The ComboBox element has been added as a child element to the <Spread> element (see "Spreads
and Master Spreads" on page 87), <Oval> element and <Rectangle> element (see "Graphics" on
page 91).
1.1.9 ListBox
The ListBox element has been added as a child element to the <Spread> element (see "Spreads and
Master Spreads" on page 87), <Oval> element and <Rectangle> element (see "Graphics" on page
91).
1.1.10 RadioButton
The RadioButtonelement has been added as a child element to the <Spread> element (see "Spreads
and Master Spreads" on page 87), <Oval> element and <Rectangle> element (see "Graphics" on
page 91).
1.1.11 TextBox
The TextBox element has been added as a child element to the <Spread> element (see "Spreads and
Master Spreads" on page 87), <Oval> element and <Rectangle> element (see "Graphics" on page
91).
1.1.12 SignatureField
The SignatureField element has been added as a child element to the <Spread> element (see
"Spreads and Master Spreads" on page 87), <Oval> element and <Rectangle> element (see
"Graphics" on page 91).
1.1.13 Pumpkin
The Pumpkin element has been added as a child element to the <Spread> element (see "Spreads
and Master Spreads" on page 87), <Oval> element and <Rectangle> element (see "Graphics" on
page 91).
IDML File Format Specification
515 Appendix E. Update List of IDML 8.0: New Attributes
1.1.14 ObjectExportOption
The ObjectExportOption element has been added as a child element to the <TextFrame> element
(see "Text Frames" on page 127). This element is the export options of its parent element.
1.1.15 SubmitFormBehavior
The SubmitFormBehavior element has been added as a child element to the <Button> element (see
"Buttons" on page 141). This element is a behavior object that submits the document.
1.1.16 ClearFormBehavior
The ClearFormBehavior element has been added as a child element to the <Button> element
(see "Buttons" on page 141). This element is a behavior object that clears the form "elds in the
document.
1.1.17 PrintFormBehavior
The PrintFormBehavior element has been added as a child element to the <Button> element (see
"Buttons" on page 141). This element is a behavior object that triggers print for the document.
1.2 New Attributes
1.2.1 ApplyStyleMappings
The ApplyStyleMappings attribute has been added to the <linkedStoryOption> elements. If this
attribute is true, style mappings will be applied during linked story creation or update.
1.2.2 AlternateLayoutLength
The AlternateLayoutLength attribute has been added to the <Section> elements (see "Section" on
page 69). This attribute is the number of pages in the alternate layout section.
1.2.3 AlternateLayout
The AlternateLayout attribute has been added to the <Section> elements (see "Section" on page
69). This attribute is the alternate layout name for a set of pages.
1.2.4 Pagination
The Pagination attribute has been added to the <Section> elements (see "Section" on page 69).
This attribute is the pagination option for this section for adding and removing pages in HTML5.
IDML File Format Specification
516 Appendix E. Update List of IDML 8.0: New Attributes
1.2.5 PaginationMaster
The PaginationMaster attribute has been added to the <Section> elements (see "Section" on page
69). This attribute is the master to apply when pages are added in HTML5.
1.2.6 ExternalStyleSheets
The ExternalStyleSheets attribute has been added to the <EPubExportPreference> element and
<HTMLExportPreference> element. This attribute is the "le path of external cascading style
sheets.
1.2.7 Javascripts
The Javascripts attribute has been added to the <EPubExportPreference> element and
<HTMLExportPreference> element. This attribute is the "le path of external javascripts.
1.2.8 UseFlexibleColumnWidth
The UseFlexibleColumnWidth attribute has been added to the <TextFramePreference> element
(see "Text Frame Preference" on page 132). If this attribute is true, maintains column width
between a min and max range when the text frame is resized. If this attribute is false, causes
columns to resize when the text frame is resized.
Note: When true, resizing the frame can change the number of columns in the frame.
1.2.9 TextColumnMaxWidth
The UseFlexibleColumnWidth attribute has been added to the <TextFramePreference> element
(see "Text Frame Preference" on page 132). This attribute is the maximum column width of the
columns in the text frame. Use 0 to indicate no upper limit.
1.2.10 AutoSizeType
The AutoSizeType attribute has been added to the <TextFramePreference> element (see "Text-
Frame Preference" on page 132). This attribute is the dimension for auto sizing of text frame
based on text content.
1.2.11 AutoSizingReferencePoint
The AutoSizingReferencePoint attribute has been added to the <TextFramePreference> element
(see "Text Frame Preference" on page 132). This attribute is the reference point for auto sizing of
text frame based on text content.
IDML File Format Specification
517 Appendix E. Update List of IDML 8.0: New Attributes
1.2.12 UseMinimumHeightForAutoSizing
The UseMinimumHeightForAutoSizing attribute has been added to the <TextFramePreference>
element (see "Text Frame Preference" on page 132). If this attribute is true, while auto sizing it is
made sure that the text frame height is always more than or equal to given minimum height.
1.2.13 MinimumHeightForAutoSizing
The MinimumHeightForAutoSizing attribute has been added to the <TextFramePreference>
element (see "Text Frame Preference" on page 132). This attribute is the minimum height of the
text frame, that should be considered while auto sizing.
1.2.14 UseMinimumWidthForAutoSizing
The UseMinimumWidthForAutoSizing attribute has been added to the <TextFramePreference>
element (see "Text Frame Preference" on page 132). If this attribute is true, while auto sizing it is
made sure that the text frame width is always more than or equal to given minimum width.
1.2.15 MinimumWidthForAutoSizing
The MinimumWidthForAutoSizing attribute has been added to the <TextFramePreference>
element (see "Text Frame Preference" on page 132). This attribute is the minimum width of the
text frame, that should be considered while auto sizing.
1.2.16 UseNoLineBreaksForAutoSizing
The UseNoLineBreaksForAutoSizing attribute has been added to the <TextFramePreference>
element (see "Text Frame Preference" on page 132). If this attribute is true, line breaks are not
introduced a%er auto sizing.
1.2.17 QuoteCharactersRotatedInVertical
The QuoteCharactersRotatedInVertical attribute has been added to the <TextPreference> element
(see "Text Preference" on page 299). If this attribute is true, Japanese composer treats quotes as
half width and rotates them in vertical.
1.2.18 ParagraphKashidaWidth
The ParagraphKashidaWidth attribute has been added to the <TextDefault> element (see "Text-
Default" on page 301), <ParagraphStyle> element (see "Paragraph Styles" on page 345), <Story>
(see "Story Schema" on page 186) element, <ParagraphStyleRange> element (see "Text Range
Elements" on page 196), <CharacterStyleRange> element (see "Character Style Range" on page
205). This attribute is the Paragraph kashida width. 0 is none, 1 is short, 2 is medium, 3 is long.
IDML File Format Specification
518 Appendix E. Update List of IDML 8.0: New Attributes
1.2.19 CreatePrimaryTextFrame
The CreatePrimaryTextFrame attribute has been added to the <DocumentPreference> element
(see "Document Preference" on page 319). If this attribute is true, the document A-master has
primary text frames when a new document is created.
1.2.20 EnableTextFrameAutoSizingOptions
The EnableTextFrameAutoSizingOptions attribute has been added to the <ObjectStyle> element
(see "Object Styles" on page 377). If this attribute is true, the object style will apply auto-sizing
text frame options.
1.2.21 GuideType
The GuideType attribute has been added to the <Guide> element (see "Guides" on page 160). This
attribute is the type of the guide.
1.2.22 GuideZone
The GuideZone attribute has been added to the <Guide> element (see "Guides" on page 160).
This attribute is zone of the guide.
1.2.23 LinkResourceId
The LinkResourceId attribute has been added to the <Oval> element, <Sound > element, <Movie>
element, <Graphic> element (see "Spline Item Containing an Imported Graphic" on page
120), <Image> element, <EPS> element, <WMF> element, <PICT> element, <PDF> element,
<ImportedPage> element, <Rectangle> element (see "Graphics" on page 91), <GraphicLine>
element, <TextFrame> element, <Polygon> element, <Group> element, <EPSText> element,
<FormField> element, <Button> element (see "Buttons" on page 141), <MultiStateObject> (see
"Multi-State Object" on page 149) element. This attribute is the destination unique id for shared
content link.
1.2.24 ParentInterfaceChangeCount
The ParentInterfaceChangeCount attribute has been added to the <Oval> element, <Sound
> element, <Movie> element, <Graphic> element (see "Spline Item Containing an Imported
Graphic" on page 120), <Image> element, <EPS> element, <WMF> element, <PICT> element,
<PDF> element, <ImportedPage> element, <Rectangle> element (see "Graphics" on page
91), <GraphicLine> element, <TextFrame> element, <Polygon> element, <Group> element,
<EPSText> element, <FormField> element, <Button> element (see "Buttons" on page 141),
<MultiStateObject> element (see "Multi-State Object" on page 149). This attribute is Parent
Interface Change Count.
1.2.25 TargetInterfaceChangeCount
The TargetInterfaceChangeCount attribute has been added to the <Oval> element, <Sound
> element, <Movie> element, <Graphic> element (see "Spline Item Containing an Imported
IDML File Format Specification
519 Appendix E. Update List of IDML 8.0: New Attributes
Graphic" on page 120), <Image> element, <EPS> element, <WMF> element, <PICT> element,
<PDF> element, <ImportedPage> element, <Rectangle> element (see "Graphics" on page
91), <GraphicLine> element, <TextFrame> element, <Polygon> element, <Group> element,
<EPSText> element, <FormField> element, <Button> element (see "Buttons" on page 141),
<MultiStateObject> element (see "Multi-State Object" on page 149). This attribute is Target
Interface Change Count.
1.2.26 LastUpdatedInterfaceChangeCount
The LastUpdatedInterfaceChangeCount attribute has been added to the <Oval> element, <Sound
> element, <Movie> element, <Graphic> element (see "Spline Item Containing an Imported
Graphic" on page 120), <Image> element, <EPS> element, <WMF> element, <PICT> element,
<PDF> element, <ImportedPage> element, <Rectangle> element (see "Graphics" on page
91), <GraphicLine> element, <TextFrame> element, <Polygon> element, <Group> element,
<EPSText> element, <FormField> element, <Button> element (see "Buttons" on page 141),
<MultiStateObject> element (see "Multi-State Object" on page 149). This attribute is Last
Updated Interface Change Count.
1.2.27 HorizontalLayoutConstraints
The HorizontalLayoutConstraints attribute has been added to the <Oval> element, <Sound
> element, <Movie> element, <Graphic> element (see "Spline Item Containing an Imported
Graphic" on page 120), <Image> element, <EPS> element, <WMF> element, <PICT> element,
<PDF> element, <ImportedPage> element, <Rectangle> element (see "Graphics" on page
91), <GraphicLine> element, <TextFrame> element, <Polygon> element, <Group> element,
<EPSText> element, <FormField> element, <Button> element (see "Buttons" on page 141),
<MultiStateObject> element (see "Multi-State Object" on page 149). This attribute is the le%
margin, width, and right margin constraints this item is subject to when using the object-based
layout rule.
1.2.28 VerticalLayoutConstraints
The VerticalLayoutConstraints attribute has been added to the <Oval> element, <Sound >
element, <Movie> element, <Graphic> element (see "Spline Item Containing an Imported
Graphic" on page 120), <Image> element, <EPS> element, <WMF> element, <PICT> element,
<PDF> element, <ImportedPage> element, <Rectangle> element (see "Graphics" on page
91), <GraphicLine> element, <TextFrame> element, <Polygon> element, <Group> element,
<EPSText> element, <FormField> element, <Button> element (see "Buttons" on page 141),
<MultiStateObject> element (see "Multi-State Object" on page 149). This attribute is the top
margin, height, and bottom margin constraints this item is subject to when using the object-based
layout rule.
1.2.29 CustomLayout
The CustomLayout attribute has been added to the <ObjectExportOption> element. If this
attribute is true, custom layout is enabled for object.
IDML File Format Specification
520 Appendix E. Update List of IDML 8.0: New Attributes
1.2.30 CustomLayoutType
The CustomLayoutType attribute has been added to the <ObjectExportOption> element. This
attribute is the custom Layout settings to be used for object.
1.2.31 PrintableInPDF
The PrintableInPDF attribute has been added to the <Button> element (see "Buttons" on page
141). If this attribute is true, the form "eld/push button is printable in the exported PDF.
1.2.32 HiddenUntilTriggered
The HiddenUntilTriggered attribute has been added to the <Button> element (see "Buttons" on
page 141). If this attribute is true, the form "eld/push button is hidden until triggered in the
exported PDF.
1.2.33 AppliedAlternateLayout
The AppliedAlternateLayout attribute has been added to the <Page> element (see "Pages" on page
156). This attribute is the alternate layout section to which the page belongs.
1.2.34 LayoutRule
The LayoutRule attribute has been added to the <Page> element (see "Pages" on page 156). This
attribute is the layout rule.
1.2.35 SnapshotBlendingMode
The SnapshotBlendingMode attribute has been added to the <Page> element (see "Pages" on page
156). This attribute is the snapshot blending mode.
1.2.36 OptionalPage
The OptionalPage attribute has been added to the <Page> element (see "Pages" on page 156).
This attribute is the optional page for HTML5 pagination.